/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGCSHARP
#define SWIGCSHARP
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else


#include <AK/SoundEngine/Common/AkTypes.h>

SWIGINTERN void AkDeviceDescription_Clear(AkDeviceDescription *self){ *(AkDeviceDescription*)self = AkDeviceDescription(); }
SWIGINTERN int AkDeviceDescription_GetSizeOf(){ return sizeof(AkDeviceDescription); }
SWIGINTERN void AkDeviceDescription_Clone(AkDeviceDescription *self,AkDeviceDescription const &other){ *(AkDeviceDescription*)(self) = other; }
SWIGINTERN void AkObstructionOcclusionValues_Clear(AkObstructionOcclusionValues *self){ *(AkObstructionOcclusionValues*)self = AkObstructionOcclusionValues(); }
SWIGINTERN int AkObstructionOcclusionValues_GetSizeOf(){ return sizeof(AkObstructionOcclusionValues); }
SWIGINTERN void AkObstructionOcclusionValues_Clone(AkObstructionOcclusionValues *self,AkObstructionOcclusionValues const &other){ *(AkObstructionOcclusionValues*)(self) = other; }
SWIGINTERN void AkAuxSendValue_Set(AkAuxSendValue *self,AkGameObjectID listener,AkAuxBusID id,AkReal32 value){
		self->listenerID = listener;
		self->auxBusID = id;
		self->fControlValue = value;
	}
SWIGINTERN bool AkAuxSendValue_IsSame(AkAuxSendValue *self,AkGameObjectID listener,AkAuxBusID id){
		return self->listenerID == listener && self->auxBusID == id;
	}
SWIGINTERN int AkAuxSendValue_GetSizeOf(){ return sizeof(AkAuxSendValue); }

#if defined(AK_SONY)
#undef SWIGEXPORT
#define SWIGEXPORT __declspec(dllexport)
#endif

#include <AK/SoundEngine/Common/AkSoundEngine.h>
#include <AK/SoundEngine/Common/AkModule.h>
#include <AK/SoundEngine/Common/AkStreamMgrModule.h>
#include <AK/MusicEngine/Common/AkMusicEngine.h>
#include "../Common/AkCallbackSerializer.h"
#include <AK/Tools/Common/AkMonitorError.h>
#include <AK/Tools/Common/AkPlatformFuncs.h>
#include <AK/SoundEngine/Common/AkDynamicDialogue.h>
#include "../Common/AkDynamicSequence_PlaylistItem.h"
#include "../Common/AkDynamicSequence_Playlist.h"
#include <AK/SoundEngine/Common/AkQueryParameters.h>
#include <AK/Plugin/AkReflectGameData.h>
#include <AK/SpatialAudio/Common/AkSpatialAudioTypes.h>
#include <AK/SpatialAudio/Common/AkSpatialAudio.h>

#if defined(AK_LINUX) || defined(AK_NX) || defined(AK_GGP)
#undef AK_SUPPORT_WCHAR
#endif


#include "../Common/AkArrayProxy.h"


SWIGINTERN AkMIDIEventTypes AkMIDIEvent_byType_get(AkMIDIEvent *info) { return (AkMIDIEventTypes)info->byType; }
SWIGINTERN void AkMIDIEvent_byType_set(AkMIDIEvent *info, AkMIDIEventTypes value) { info->byType = (AkUInt8)value; }

SWIGINTERN AkMidiNoteNo AkMIDIEvent_byOnOffNote_get(AkMIDIEvent *info) { return (AkMidiNoteNo)info->NoteOnOff.byNote; }
SWIGINTERN void AkMIDIEvent_byOnOffNote_set(AkMIDIEvent *info, AkMidiNoteNo value) { info->NoteOnOff.byNote = value; }

SWIGINTERN AkUInt8 AkMIDIEvent_byVelocity_get(AkMIDIEvent *info) { return info->NoteOnOff.byVelocity; }
SWIGINTERN void AkMIDIEvent_byVelocity_set(AkMIDIEvent *info, AkUInt8 value) { info->NoteOnOff.byVelocity = value; }

SWIGINTERN AkMIDICcTypes AkMIDIEvent_byCc_get(AkMIDIEvent *info) { return (AkMIDICcTypes)info->Cc.byCc; }
SWIGINTERN void AkMIDIEvent_byCc_set(AkMIDIEvent *info, AkMIDICcTypes value) { info->Cc.byCc = (AkUInt8)value; }

SWIGINTERN AkUInt8 AkMIDIEvent_byCcValue_get(AkMIDIEvent *info) { return info->Cc.byValue; }
SWIGINTERN void AkMIDIEvent_byCcValue_set(AkMIDIEvent *info, AkUInt8 value) { info->Cc.byValue = value; }

SWIGINTERN AkUInt8 AkMIDIEvent_byValueLsb_get(AkMIDIEvent *info) { return info->PitchBend.byValueLsb; }
SWIGINTERN void AkMIDIEvent_byValueLsb_set(AkMIDIEvent *info, AkUInt8 value) { info->PitchBend.byValueLsb = value; }

SWIGINTERN AkUInt8 AkMIDIEvent_byValueMsb_get(AkMIDIEvent *info) { return info->PitchBend.byValueMsb; }
SWIGINTERN void AkMIDIEvent_byValueMsb_set(AkMIDIEvent *info, AkUInt8 value) { info->PitchBend.byValueMsb = value; }

SWIGINTERN AkUInt8 AkMIDIEvent_byAftertouchNote_get(AkMIDIEvent *info) { return info->NoteAftertouch.byNote; }
SWIGINTERN void AkMIDIEvent_byAftertouchNote_set(AkMIDIEvent *info, AkUInt8 value) { info->NoteAftertouch.byNote = value; }

SWIGINTERN AkUInt8 AkMIDIEvent_byNoteAftertouchValue_get(AkMIDIEvent *info) { return info->NoteAftertouch.byValue; }
SWIGINTERN void AkMIDIEvent_byNoteAftertouchValue_set(AkMIDIEvent *info, AkUInt8 value) { info->NoteAftertouch.byValue = value; }

SWIGINTERN AkUInt8 AkMIDIEvent_byChanAftertouchValue_get(AkMIDIEvent *info) { return info->ChanAftertouch.byValue; }
SWIGINTERN void AkMIDIEvent_byChanAftertouchValue_set(AkMIDIEvent *info, AkUInt8 value) { info->ChanAftertouch.byValue = value; }

SWIGINTERN AkUInt8 AkMIDIEvent_byProgramNum_get(AkMIDIEvent *info) { return info->ProgramChange.byProgramNum; }
SWIGINTERN void AkMIDIEvent_byProgramNum_set(AkMIDIEvent *info, AkUInt8 value) { info->ProgramChange.byProgramNum = value; }

SWIGINTERN AkUInt16 AkMIDIEvent_uCmd_get(AkMIDIEvent *info) { return info->WwiseCmd.uCmd; }
SWIGINTERN void AkMIDIEvent_uCmd_set(AkMIDIEvent *info, AkUInt16 value) { info->WwiseCmd.uCmd = value; }

SWIGINTERN AkUInt32 AkMIDIEvent_uArg_get(AkMIDIEvent *info) { return info->WwiseCmd.uArg; }
SWIGINTERN void AkMIDIEvent_uArg_set(AkMIDIEvent *info, AkUInt32 value) { info->WwiseCmd.uArg = value; }


typedef AkArray<AK::SoundEngine::DynamicSequence::PlaylistItem, AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional>::Iterator AkIterator;

SWIGINTERN void AkSourceSettings_Clear(AkSourceSettings *self){
		self->sourceID = AK_INVALID_UNIQUE_ID;
		self->pMediaMemory = (AkUInt8*)0;
		self->uMediaSize = 0;
	}
SWIGINTERN int AkSourceSettings_GetSizeOf(){ return sizeof(AkSourceSettings); }
SWIGINTERN void AkSourceSettings_Clone(AkSourceSettings *self,AkSourceSettings const &other){ *(AkSourceSettings*)(self) = other; }
SWIGINTERN AkPlayingID AkMIDIPost_PostOnEvent__SWIG_0(AkMIDIPost *self,AkUniqueID in_eventID,AkGameObjectID in_gameObjectID,AkUInt32 in_uNumPosts){
		if (!AK::SoundEngine::IsInitialized())
			return AK_Fail;

		return AK::SoundEngine::PostMIDIOnEvent(in_eventID, in_gameObjectID, self, static_cast<AkUInt16>(in_uNumPosts), false, 0, 0, 0, AK_INVALID_PLAYING_ID);
	}
SWIGINTERN AkPlayingID AkMIDIPost_PostOnEvent__SWIG_1(AkMIDIPost *self,AkUniqueID in_eventID,AkGameObjectID in_gameObjectID,AkUInt32 in_uNumPosts,bool in_bAbsoluteOffsets){
		if (!AK::SoundEngine::IsInitialized())
			return AK_Fail;

		return AK::SoundEngine::PostMIDIOnEvent(in_eventID, in_gameObjectID, self, static_cast<AkUInt16>(in_uNumPosts), in_bAbsoluteOffsets, 0, 0, 0, AK_INVALID_PLAYING_ID);
	}
SWIGINTERN AkPlayingID AkMIDIPost_PostOnEvent__SWIG_2(AkMIDIPost *self,AkUniqueID in_eventID,AkGameObjectID in_gameObjectID,AkUInt32 in_uNumPosts,bool in_bAbsoluteOffsets,AkUInt32 in_uFlags,AkCallbackFunc in_pfnCallback,void *in_pCookie){
		if (!AK::SoundEngine::IsInitialized())
			return AK_Fail;

		return AK::SoundEngine::PostMIDIOnEvent(in_eventID, in_gameObjectID, self, static_cast<AkUInt16>(in_uNumPosts), in_bAbsoluteOffsets, in_uFlags, in_pfnCallback, in_pCookie, AK_INVALID_PLAYING_ID);
	}
SWIGINTERN AkPlayingID AkMIDIPost_PostOnEvent__SWIG_3(AkMIDIPost *self,AkUniqueID in_eventID,AkGameObjectID in_gameObjectID,AkUInt32 in_uNumPosts,bool in_bAbsoluteOffsets,AkUInt32 in_uFlags,AkCallbackFunc in_pfnCallback,void *in_pCookie,AkPlayingID in_playingID){
		if (!AK::SoundEngine::IsInitialized())
			return AK_Fail;

		return AK::SoundEngine::PostMIDIOnEvent(in_eventID, in_gameObjectID, self, static_cast<AkUInt16>(in_uNumPosts), in_bAbsoluteOffsets, in_uFlags, in_pfnCallback, in_pCookie, in_playingID);
	}
SWIGINTERN void AkMIDIPost_Clone(AkMIDIPost *self,AkMIDIPost const &other){
		*(AkMIDIPost*)(self) = other;
	}
SWIGINTERN int AkMIDIPost_GetSizeOf(){ return sizeof(AkMIDIPost); }
SWIGINTERN void AkObjectInfo_Clear(AkObjectInfo *self){ *(AkObjectInfo*)self = AkObjectInfo(); }
SWIGINTERN int AkObjectInfo_GetSizeOf(){ return sizeof(AkObjectInfo); }
SWIGINTERN void AkObjectInfo_Clone(AkObjectInfo *self,AkObjectInfo const &other){ *(AkObjectInfo*)(self) = other; }
SWIGINTERN void AkTriangle_Clear(AkTriangle *self){ *(AkTriangle*)self = AkTriangle(); }
SWIGINTERN int AkTriangle_GetSizeOf(){ return sizeof(AkTriangle); }
SWIGINTERN void AkTriangle_Clone(AkTriangle *self,AkTriangle const &other){ *(AkTriangle*)(self) = other; }
SWIGINTERN void AkAcousticSurface_Clear(AkAcousticSurface *self){ *(AkAcousticSurface*)self = AkAcousticSurface(); }
SWIGINTERN void AkAcousticSurface_DeleteName(AkAcousticSurface *self){
		if (self->strName)
		{
			delete self->strName;
			self->strName = 0;
		}
	}
SWIGINTERN int AkAcousticSurface_GetSizeOf(){ return sizeof(AkAcousticSurface); }
SWIGINTERN void AkAcousticSurface_Clone(AkAcousticSurface *self,AkAcousticSurface const &other){ *(AkAcousticSurface*)(self) = other; }
SWIGINTERN int AkReflectionPathInfo_GetSizeOf(){ return sizeof(AkReflectionPathInfo); }
SWIGINTERN AkVector AkReflectionPathInfo_GetPathPoint(AkReflectionPathInfo const *self,AkUInt32 idx){
		return self->pathPoint[idx];
	}
SWIGINTERN AkAcousticSurface const &AkReflectionPathInfo_GetAcousticSurface(AkReflectionPathInfo const *self,AkUInt32 idx){
		return self->surfaces[idx];
	}
SWIGINTERN AkReal32 const AkReflectionPathInfo_GetDiffraction(AkReflectionPathInfo const *self,AkUInt32 idx){
		return self->diffraction[idx];
	}
SWIGINTERN void AkReflectionPathInfo_Clone(AkReflectionPathInfo *self,AkReflectionPathInfo const &other){ *(AkReflectionPathInfo*)(self) = other; }
SWIGINTERN int AkDiffractionPathInfo_GetSizeOf(){ return sizeof(AkDiffractionPathInfo); }
SWIGINTERN AkVector AkDiffractionPathInfo_GetNodes(AkDiffractionPathInfo const *self,AkUInt32 idx){
		return self->nodes[idx];
	}
SWIGINTERN AkReal32 const AkDiffractionPathInfo_GetAngles(AkDiffractionPathInfo const *self,AkUInt32 idx){
		return self->angles[idx];
	}
SWIGINTERN AkUInt64 const AkDiffractionPathInfo_GetPortals(AkDiffractionPathInfo const *self,AkUInt32 idx){
		return self->portals[idx].id;
	}
SWIGINTERN AkUInt64 const AkDiffractionPathInfo_GetRooms(AkDiffractionPathInfo const *self,AkUInt32 idx){
		return self->rooms[idx].id;
	}
SWIGINTERN void AkDiffractionPathInfo_Clone(AkDiffractionPathInfo *self,AkDiffractionPathInfo const &other){ *(AkDiffractionPathInfo*)(self) = other; }

#include "../Common/AkSoundEngineStubs.h"


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AK_INVALID_PIPELINE_ID_get() {
  unsigned int jresult ;
  AkPipelineID result;
  
  result = (AkPipelineID)(AkPipelineID)AK_INVALID_PIPELINE_ID;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_AK_INVALID_AUDIO_OBJECT_ID_get() {
  unsigned long long jresult ;
  AkAudioObjectID result;
  
  result = (AkAudioObjectID)(AkAudioObjectID)AK_INVALID_AUDIO_OBJECT_ID;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AK_SOUNDBANK_VERSION_get() {
  unsigned int jresult ;
  AkUInt32 result;
  
  result = (AkUInt32)(AkUInt32)AK_SOUNDBANK_VERSION;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkAudioSettings_uNumSamplesPerFrame_set(void * jarg1, unsigned int jarg2) {
  AkAudioSettings *arg1 = (AkAudioSettings *) 0 ;
  AkUInt32 arg2 ;
  
  arg1 = (AkAudioSettings *)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  if (arg1) (arg1)->uNumSamplesPerFrame = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkAudioSettings_uNumSamplesPerFrame_get(void * jarg1) {
  unsigned int jresult ;
  AkAudioSettings *arg1 = (AkAudioSettings *) 0 ;
  AkUInt32 result;
  
  arg1 = (AkAudioSettings *)jarg1; 
  result = (AkUInt32) ((arg1)->uNumSamplesPerFrame);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkAudioSettings_uNumSamplesPerSecond_set(void * jarg1, unsigned int jarg2) {
  AkAudioSettings *arg1 = (AkAudioSettings *) 0 ;
  AkUInt32 arg2 ;
  
  arg1 = (AkAudioSettings *)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  if (arg1) (arg1)->uNumSamplesPerSecond = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkAudioSettings_uNumSamplesPerSecond_get(void * jarg1) {
  unsigned int jresult ;
  AkAudioSettings *arg1 = (AkAudioSettings *) 0 ;
  AkUInt32 result;
  
  arg1 = (AkAudioSettings *)jarg1; 
  result = (AkUInt32) ((arg1)->uNumSamplesPerSecond);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AkAudioSettings() {
  void * jresult ;
  AkAudioSettings *result = 0 ;
  
  {
    result = (AkAudioSettings *)new AkAudioSettings();
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AkAudioSettings(void * jarg1) {
  AkAudioSettings *arg1 = (AkAudioSettings *) 0 ;
  
  arg1 = (AkAudioSettings *)jarg1; 
  {
    delete arg1;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkDeviceDescription_idDevice_set(void * jarg1, unsigned int jarg2) {
  AkDeviceDescription *arg1 = (AkDeviceDescription *) 0 ;
  AkUInt32 arg2 ;
  
  arg1 = (AkDeviceDescription *)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  if (arg1) (arg1)->idDevice = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkDeviceDescription_idDevice_get(void * jarg1) {
  unsigned int jresult ;
  AkDeviceDescription *arg1 = (AkDeviceDescription *) 0 ;
  AkUInt32 result;
  
  arg1 = (AkDeviceDescription *)jarg1; 
  result = (AkUInt32) ((arg1)->idDevice);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkDeviceDescription_deviceName_set(void * jarg1, wchar_t* jarg2) {
  AkDeviceDescription *arg1 = (AkDeviceDescription *) 0 ;
  AkOSChar *arg2 ;
  
  arg1 = (AkDeviceDescription *)jarg1; 
  arg2 = (wchar_t *)jarg2; 
  {
    size_t ii;
    AkOSChar *b = (AkOSChar *) arg1->deviceName;
    for (ii = 0; ii < (size_t)260; ii++) b[ii] = *((AkOSChar *) arg2 + ii);
  }
}


SWIGEXPORT wchar_t* SWIGSTDCALL CSharp_AkDeviceDescription_deviceName_get(void * jarg1) {
  wchar_t* jresult ;
  AkDeviceDescription *arg1 = (AkDeviceDescription *) 0 ;
  AkOSChar *result = 0 ;
  
  arg1 = (AkDeviceDescription *)jarg1; 
  result = (AkOSChar *)(AkOSChar *) ((arg1)->deviceName);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkDeviceDescription_deviceStateMask_set(void * jarg1, int jarg2) {
  AkDeviceDescription *arg1 = (AkDeviceDescription *) 0 ;
  AkAudioDeviceState arg2 ;
  
  arg1 = (AkDeviceDescription *)jarg1; 
  arg2 = (AkAudioDeviceState)jarg2; 
  if (arg1) (arg1)->deviceStateMask = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AkDeviceDescription_deviceStateMask_get(void * jarg1) {
  int jresult ;
  AkDeviceDescription *arg1 = (AkDeviceDescription *) 0 ;
  AkAudioDeviceState result;
  
  arg1 = (AkDeviceDescription *)jarg1; 
  result = (AkAudioDeviceState) ((arg1)->deviceStateMask);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkDeviceDescription_isDefaultDevice_set(void * jarg1, unsigned int jarg2) {
  AkDeviceDescription *arg1 = (AkDeviceDescription *) 0 ;
  bool arg2 ;
  
  arg1 = (AkDeviceDescription *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isDefaultDevice = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkDeviceDescription_isDefaultDevice_get(void * jarg1) {
  unsigned int jresult ;
  AkDeviceDescription *arg1 = (AkDeviceDescription *) 0 ;
  bool result;
  
  arg1 = (AkDeviceDescription *)jarg1; 
  result = (bool) ((arg1)->isDefaultDevice);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkDeviceDescription_Clear(void * jarg1) {
  AkDeviceDescription *arg1 = (AkDeviceDescription *) 0 ;
  
  arg1 = (AkDeviceDescription *)jarg1; 
  AkDeviceDescription_Clear(arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_AkDeviceDescription_GetSizeOf() {
  int jresult ;
  int result;
  
  result = (int)AkDeviceDescription_GetSizeOf();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkDeviceDescription_Clone(void * jarg1, void * jarg2) {
  AkDeviceDescription *arg1 = (AkDeviceDescription *) 0 ;
  AkDeviceDescription *arg2 = 0 ;
  
  arg1 = (AkDeviceDescription *)jarg1; 
  arg2 = (AkDeviceDescription *)jarg2;
  if (!arg2) {
    return ;
  } 
  AkDeviceDescription_Clone(arg1,(AkDeviceDescription const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AkDeviceDescription() {
  void * jresult ;
  AkDeviceDescription *result = 0 ;
  
  {
    result = (AkDeviceDescription *)new AkDeviceDescription();
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AkDeviceDescription(void * jarg1) {
  AkDeviceDescription *arg1 = (AkDeviceDescription *) 0 ;
  
  arg1 = (AkDeviceDescription *)jarg1; 
  {
    delete arg1;
  }
}


SWIGEXPORT AkVector* SWIGSTDCALL CSharp_AkTransform_Position(void * jarg1) {
  AkVector* jresult ;
  AkTransform *arg1 = (AkTransform *) 0 ;
  AkVector *result = 0 ;
  
  arg1 = (AkTransform *)jarg1; 
  result = (AkVector *) &((AkTransform const *)arg1)->Position();
  jresult = result; 
  return jresult;
}


SWIGEXPORT AkVector* SWIGSTDCALL CSharp_AkTransform_OrientationFront(void * jarg1) {
  AkVector* jresult ;
  AkTransform *arg1 = (AkTransform *) 0 ;
  AkVector *result = 0 ;
  
  arg1 = (AkTransform *)jarg1; 
  result = (AkVector *) &((AkTransform const *)arg1)->OrientationFront();
  jresult = result; 
  return jresult;
}


SWIGEXPORT AkVector* SWIGSTDCALL CSharp_AkTransform_OrientationTop(void * jarg1) {
  AkVector* jresult ;
  AkTransform *arg1 = (AkTransform *) 0 ;
  AkVector *result = 0 ;
  
  arg1 = (AkTransform *)jarg1; 
  result = (AkVector *) &((AkTransform const *)arg1)->OrientationTop();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkTransform_Set__SWIG_0(void * jarg1, AkVector jarg2, AkVector jarg3, AkVector jarg4) {
  AkTransform *arg1 = (AkTransform *) 0 ;
  AkVector *arg2 = 0 ;
  AkVector *arg3 = 0 ;
  AkVector *arg4 = 0 ;
  
  arg1 = (AkTransform *)jarg1; 
  arg2 = &jarg2; 
  arg3 = &jarg3; 
  arg4 = &jarg4; 
  (arg1)->Set((AkVector const &)*arg2,(AkVector const &)*arg3,(AkVector const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkTransform_Set__SWIG_1(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7, float jarg8, float jarg9, float jarg10) {
  AkTransform *arg1 = (AkTransform *) 0 ;
  AkReal32 arg2 ;
  AkReal32 arg3 ;
  AkReal32 arg4 ;
  AkReal32 arg5 ;
  AkReal32 arg6 ;
  AkReal32 arg7 ;
  AkReal32 arg8 ;
  AkReal32 arg9 ;
  AkReal32 arg10 ;
  
  arg1 = (AkTransform *)jarg1; 
  arg2 = (AkReal32)jarg2; 
  arg3 = (AkReal32)jarg3; 
  arg4 = (AkReal32)jarg4; 
  arg5 = (AkReal32)jarg5; 
  arg6 = (AkReal32)jarg6; 
  arg7 = (AkReal32)jarg7; 
  arg8 = (AkReal32)jarg8; 
  arg9 = (AkReal32)jarg9; 
  arg10 = (AkReal32)jarg10; 
  (arg1)->Set(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkTransform_SetPosition__SWIG_0(void * jarg1, AkVector jarg2) {
  AkTransform *arg1 = (AkTransform *) 0 ;
  AkVector *arg2 = 0 ;
  
  arg1 = (AkTransform *)jarg1; 
  arg2 = &jarg2; 
  (arg1)->SetPosition((AkVector const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkTransform_SetPosition__SWIG_1(void * jarg1, float jarg2, float jarg3, float jarg4) {
  AkTransform *arg1 = (AkTransform *) 0 ;
  AkReal32 arg2 ;
  AkReal32 arg3 ;
  AkReal32 arg4 ;
  
  arg1 = (AkTransform *)jarg1; 
  arg2 = (AkReal32)jarg2; 
  arg3 = (AkReal32)jarg3; 
  arg4 = (AkReal32)jarg4; 
  (arg1)->SetPosition(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkTransform_SetOrientation__SWIG_0(void * jarg1, AkVector jarg2, AkVector jarg3) {
  AkTransform *arg1 = (AkTransform *) 0 ;
  AkVector *arg2 = 0 ;
  AkVector *arg3 = 0 ;
  
  arg1 = (AkTransform *)jarg1; 
  arg2 = &jarg2; 
  arg3 = &jarg3; 
  (arg1)->SetOrientation((AkVector const &)*arg2,(AkVector const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkTransform_SetOrientation__SWIG_1(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7) {
  AkTransform *arg1 = (AkTransform *) 0 ;
  AkReal32 arg2 ;
  AkReal32 arg3 ;
  AkReal32 arg4 ;
  AkReal32 arg5 ;
  AkReal32 arg6 ;
  AkReal32 arg7 ;
  
  arg1 = (AkTransform *)jarg1; 
  arg2 = (AkReal32)jarg2; 
  arg3 = (AkReal32)jarg3; 
  arg4 = (AkReal32)jarg4; 
  arg5 = (AkReal32)jarg5; 
  arg6 = (AkReal32)jarg6; 
  arg7 = (AkReal32)jarg7; 
  (arg1)->SetOrientation(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AkTransform() {
  void * jresult ;
  AkTransform *result = 0 ;
  
  {
    result = (AkTransform *)new AkTransform();
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AkTransform(void * jarg1) {
  AkTransform *arg1 = (AkTransform *) 0 ;
  
  arg1 = (AkTransform *)jarg1; 
  {
    delete arg1;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkObstructionOcclusionValues_occlusion_set(void * jarg1, float jarg2) {
  AkObstructionOcclusionValues *arg1 = (AkObstructionOcclusionValues *) 0 ;
  AkReal32 arg2 ;
  
  arg1 = (AkObstructionOcclusionValues *)jarg1; 
  arg2 = (AkReal32)jarg2; 
  if (arg1) (arg1)->occlusion = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AkObstructionOcclusionValues_occlusion_get(void * jarg1) {
  float jresult ;
  AkObstructionOcclusionValues *arg1 = (AkObstructionOcclusionValues *) 0 ;
  AkReal32 result;
  
  arg1 = (AkObstructionOcclusionValues *)jarg1; 
  result = (AkReal32) ((arg1)->occlusion);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkObstructionOcclusionValues_obstruction_set(void * jarg1, float jarg2) {
  AkObstructionOcclusionValues *arg1 = (AkObstructionOcclusionValues *) 0 ;
  AkReal32 arg2 ;
  
  arg1 = (AkObstructionOcclusionValues *)jarg1; 
  arg2 = (AkReal32)jarg2; 
  if (arg1) (arg1)->obstruction = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AkObstructionOcclusionValues_obstruction_get(void * jarg1) {
  float jresult ;
  AkObstructionOcclusionValues *arg1 = (AkObstructionOcclusionValues *) 0 ;
  AkReal32 result;
  
  arg1 = (AkObstructionOcclusionValues *)jarg1; 
  result = (AkReal32) ((arg1)->obstruction);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkObstructionOcclusionValues_Clear(void * jarg1) {
  AkObstructionOcclusionValues *arg1 = (AkObstructionOcclusionValues *) 0 ;
  
  arg1 = (AkObstructionOcclusionValues *)jarg1; 
  AkObstructionOcclusionValues_Clear(arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_AkObstructionOcclusionValues_GetSizeOf() {
  int jresult ;
  int result;
  
  result = (int)AkObstructionOcclusionValues_GetSizeOf();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkObstructionOcclusionValues_Clone(void * jarg1, void * jarg2) {
  AkObstructionOcclusionValues *arg1 = (AkObstructionOcclusionValues *) 0 ;
  AkObstructionOcclusionValues *arg2 = 0 ;
  
  arg1 = (AkObstructionOcclusionValues *)jarg1; 
  arg2 = (AkObstructionOcclusionValues *)jarg2;
  if (!arg2) {
    return ;
  } 
  AkObstructionOcclusionValues_Clone(arg1,(AkObstructionOcclusionValues const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AkObstructionOcclusionValues() {
  void * jresult ;
  AkObstructionOcclusionValues *result = 0 ;
  
  {
    result = (AkObstructionOcclusionValues *)new AkObstructionOcclusionValues();
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AkObstructionOcclusionValues(void * jarg1) {
  AkObstructionOcclusionValues *arg1 = (AkObstructionOcclusionValues *) 0 ;
  
  arg1 = (AkObstructionOcclusionValues *)jarg1; 
  {
    delete arg1;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkChannelEmitter_position_set(void * jarg1, void * jarg2) {
  AkChannelEmitter *arg1 = (AkChannelEmitter *) 0 ;
  AkTransform *arg2 = (AkTransform *) 0 ;
  
  arg1 = (AkChannelEmitter *)jarg1; 
  arg2 = (AkTransform *)jarg2; 
  if (arg1) (arg1)->position = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AkChannelEmitter_position_get(void * jarg1) {
  void * jresult ;
  AkChannelEmitter *arg1 = (AkChannelEmitter *) 0 ;
  AkTransform *result = 0 ;
  
  arg1 = (AkChannelEmitter *)jarg1; 
  result = (AkTransform *)& ((arg1)->position);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkChannelEmitter_uInputChannels_set(void * jarg1, unsigned int jarg2) {
  AkChannelEmitter *arg1 = (AkChannelEmitter *) 0 ;
  AkChannelMask arg2 ;
  
  arg1 = (AkChannelEmitter *)jarg1; 
  arg2 = (AkChannelMask)jarg2; 
  if (arg1) (arg1)->uInputChannels = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkChannelEmitter_uInputChannels_get(void * jarg1) {
  unsigned int jresult ;
  AkChannelEmitter *arg1 = (AkChannelEmitter *) 0 ;
  AkChannelMask result;
  
  arg1 = (AkChannelEmitter *)jarg1; 
  result = (AkChannelMask) ((arg1)->uInputChannels);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AkChannelEmitter(void * jarg1) {
  AkChannelEmitter *arg1 = (AkChannelEmitter *) 0 ;
  
  arg1 = (AkChannelEmitter *)jarg1; 
  {
    delete arg1;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkAuxSendValue_listenerID_set(void * jarg1, AkGameObjectID jarg2) {
  AkAuxSendValue *arg1 = (AkAuxSendValue *) 0 ;
  AkGameObjectID arg2 ;
  
  arg1 = (AkAuxSendValue *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->listenerID = arg2;
}


SWIGEXPORT AkGameObjectID SWIGSTDCALL CSharp_AkAuxSendValue_listenerID_get(void * jarg1) {
  AkGameObjectID jresult ;
  AkAuxSendValue *arg1 = (AkAuxSendValue *) 0 ;
  AkGameObjectID result;
  
  arg1 = (AkAuxSendValue *)jarg1; 
  result = (AkGameObjectID) ((arg1)->listenerID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkAuxSendValue_auxBusID_set(void * jarg1, unsigned int jarg2) {
  AkAuxSendValue *arg1 = (AkAuxSendValue *) 0 ;
  AkAuxBusID arg2 ;
  
  arg1 = (AkAuxSendValue *)jarg1; 
  arg2 = (AkAuxBusID)jarg2; 
  if (arg1) (arg1)->auxBusID = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkAuxSendValue_auxBusID_get(void * jarg1) {
  unsigned int jresult ;
  AkAuxSendValue *arg1 = (AkAuxSendValue *) 0 ;
  AkAuxBusID result;
  
  arg1 = (AkAuxSendValue *)jarg1; 
  result = (AkAuxBusID) ((arg1)->auxBusID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkAuxSendValue_fControlValue_set(void * jarg1, float jarg2) {
  AkAuxSendValue *arg1 = (AkAuxSendValue *) 0 ;
  AkReal32 arg2 ;
  
  arg1 = (AkAuxSendValue *)jarg1; 
  arg2 = (AkReal32)jarg2; 
  if (arg1) (arg1)->fControlValue = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AkAuxSendValue_fControlValue_get(void * jarg1) {
  float jresult ;
  AkAuxSendValue *arg1 = (AkAuxSendValue *) 0 ;
  AkReal32 result;
  
  arg1 = (AkAuxSendValue *)jarg1; 
  result = (AkReal32) ((arg1)->fControlValue);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkAuxSendValue_Set(void * jarg1, AkGameObjectID jarg2, unsigned int jarg3, float jarg4) {
  AkAuxSendValue *arg1 = (AkAuxSendValue *) 0 ;
  AkGameObjectID arg2 ;
  AkAuxBusID arg3 ;
  AkReal32 arg4 ;
  
  arg1 = (AkAuxSendValue *)jarg1; 
  arg2 = jarg2; 
  arg3 = (AkAuxBusID)jarg3; 
  arg4 = (AkReal32)jarg4; 
  AkAuxSendValue_Set(arg1,arg2,arg3,arg4);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkAuxSendValue_IsSame(void * jarg1, AkGameObjectID jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  AkAuxSendValue *arg1 = (AkAuxSendValue *) 0 ;
  AkGameObjectID arg2 ;
  AkAuxBusID arg3 ;
  bool result;
  
  arg1 = (AkAuxSendValue *)jarg1; 
  arg2 = jarg2; 
  arg3 = (AkAuxBusID)jarg3; 
  result = (bool)AkAuxSendValue_IsSame(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AkAuxSendValue_GetSizeOf() {
  int jresult ;
  int result;
  
  result = (int)AkAuxSendValue_GetSizeOf();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AkAuxSendValue(void * jarg1) {
  AkAuxSendValue *arg1 = (AkAuxSendValue *) 0 ;
  
  arg1 = (AkAuxSendValue *)jarg1; 
  {
    delete arg1;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AkRamp__SWIG_0() {
  void * jresult ;
  AkRamp *result = 0 ;
  
  result = (AkRamp *)new AkRamp();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AkRamp__SWIG_1(float jarg1, float jarg2) {
  void * jresult ;
  AkReal32 arg1 ;
  AkReal32 arg2 ;
  AkRamp *result = 0 ;
  
  arg1 = (AkReal32)jarg1; 
  arg2 = (AkReal32)jarg2; 
  result = (AkRamp *)new AkRamp(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkRamp_fPrev_set(void * jarg1, float jarg2) {
  AkRamp *arg1 = (AkRamp *) 0 ;
  AkReal32 arg2 ;
  
  arg1 = (AkRamp *)jarg1; 
  arg2 = (AkReal32)jarg2; 
  if (arg1) (arg1)->fPrev = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AkRamp_fPrev_get(void * jarg1) {
  float jresult ;
  AkRamp *arg1 = (AkRamp *) 0 ;
  AkReal32 result;
  
  arg1 = (AkRamp *)jarg1; 
  result = (AkReal32) ((arg1)->fPrev);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkRamp_fNext_set(void * jarg1, float jarg2) {
  AkRamp *arg1 = (AkRamp *) 0 ;
  AkReal32 arg2 ;
  
  arg1 = (AkRamp *)jarg1; 
  arg2 = (AkReal32)jarg2; 
  if (arg1) (arg1)->fNext = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AkRamp_fNext_get(void * jarg1) {
  float jresult ;
  AkRamp *arg1 = (AkRamp *) 0 ;
  AkReal32 result;
  
  arg1 = (AkRamp *)jarg1; 
  result = (AkReal32) ((arg1)->fNext);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AkRamp(void * jarg1) {
  AkRamp *arg1 = (AkRamp *) 0 ;
  
  arg1 = (AkRamp *)jarg1; 
  {
    delete arg1;
  }
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_AK_INT_get() {
  unsigned short jresult ;
  AkDataTypeID result;
  
  result = (AkDataTypeID)(AkDataTypeID)AK_INT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_AK_FLOAT_get() {
  unsigned short jresult ;
  AkDataTypeID result;
  
  result = (AkDataTypeID)(AkDataTypeID)AK_FLOAT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_AK_INTERLEAVED_get() {
  unsigned char jresult ;
  AkDataInterleaveID result;
  
  result = (AkDataInterleaveID)(AkDataInterleaveID)AK_INTERLEAVED;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_AK_NONINTERLEAVED_get() {
  unsigned char jresult ;
  AkDataInterleaveID result;
  
  result = (AkDataInterleaveID)(AkDataInterleaveID)AK_NONINTERLEAVED;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AK_LE_NATIVE_BITSPERSAMPLE_get() {
  unsigned int jresult ;
  AkUInt32 result;
  
  result = (AkUInt32)(AkUInt32)AK_LE_NATIVE_BITSPERSAMPLE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AK_LE_NATIVE_SAMPLETYPE_get() {
  unsigned int jresult ;
  AkUInt32 result;
  
  result = (AkUInt32)(AkUInt32)AK_LE_NATIVE_SAMPLETYPE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AK_LE_NATIVE_INTERLEAVE_get() {
  unsigned int jresult ;
  AkUInt32 result;
  
  result = (AkUInt32)(AkUInt32)AK_LE_NATIVE_INTERLEAVE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkAudioFormat_uSampleRate_set(void * jarg1, unsigned int jarg2) {
  AkAudioFormat *arg1 = (AkAudioFormat *) 0 ;
  AkUInt32 arg2 ;
  
  arg1 = (AkAudioFormat *)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  if (arg1) (arg1)->uSampleRate = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkAudioFormat_uSampleRate_get(void * jarg1) {
  unsigned int jresult ;
  AkAudioFormat *arg1 = (AkAudioFormat *) 0 ;
  AkUInt32 result;
  
  arg1 = (AkAudioFormat *)jarg1; 
  result = (AkUInt32) ((arg1)->uSampleRate);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkAudioFormat_channelConfig_set(void * jarg1, void * jarg2) {
  AkAudioFormat *arg1 = (AkAudioFormat *) 0 ;
  AkChannelConfig *arg2 = (AkChannelConfig *) 0 ;
  
  arg1 = (AkAudioFormat *)jarg1; 
  arg2 = (AkChannelConfig *)jarg2; 
  if (arg1) (arg1)->channelConfig = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AkAudioFormat_channelConfig_get(void * jarg1) {
  void * jresult ;
  AkAudioFormat *arg1 = (AkAudioFormat *) 0 ;
  AkChannelConfig *result = 0 ;
  
  arg1 = (AkAudioFormat *)jarg1; 
  result = (AkChannelConfig *)& ((arg1)->channelConfig);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkAudioFormat_uBitsPerSample_set(void * jarg1, unsigned int jarg2) {
  AkAudioFormat *arg1 = (AkAudioFormat *) 0 ;
  AkUInt32 arg2 ;
  
  arg1 = (AkAudioFormat *)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  if (arg1) (arg1)->uBitsPerSample = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkAudioFormat_uBitsPerSample_get(void * jarg1) {
  unsigned int jresult ;
  AkAudioFormat *arg1 = (AkAudioFormat *) 0 ;
  AkUInt32 result;
  
  arg1 = (AkAudioFormat *)jarg1; 
  result = (AkUInt32) ((arg1)->uBitsPerSample);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkAudioFormat_uBlockAlign_set(void * jarg1, unsigned int jarg2) {
  AkAudioFormat *arg1 = (AkAudioFormat *) 0 ;
  AkUInt32 arg2 ;
  
  arg1 = (AkAudioFormat *)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  if (arg1) (arg1)->uBlockAlign = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkAudioFormat_uBlockAlign_get(void * jarg1) {
  unsigned int jresult ;
  AkAudioFormat *arg1 = (AkAudioFormat *) 0 ;
  AkUInt32 result;
  
  arg1 = (AkAudioFormat *)jarg1; 
  result = (AkUInt32) ((arg1)->uBlockAlign);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkAudioFormat_uTypeID_set(void * jarg1, unsigned int jarg2) {
  AkAudioFormat *arg1 = (AkAudioFormat *) 0 ;
  AkUInt32 arg2 ;
  
  arg1 = (AkAudioFormat *)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  if (arg1) (arg1)->uTypeID = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkAudioFormat_uTypeID_get(void * jarg1) {
  unsigned int jresult ;
  AkAudioFormat *arg1 = (AkAudioFormat *) 0 ;
  AkUInt32 result;
  
  arg1 = (AkAudioFormat *)jarg1; 
  result = (AkUInt32) ((arg1)->uTypeID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkAudioFormat_uInterleaveID_set(void * jarg1, unsigned int jarg2) {
  AkAudioFormat *arg1 = (AkAudioFormat *) 0 ;
  AkUInt32 arg2 ;
  
  arg1 = (AkAudioFormat *)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  if (arg1) (arg1)->uInterleaveID = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkAudioFormat_uInterleaveID_get(void * jarg1) {
  unsigned int jresult ;
  AkAudioFormat *arg1 = (AkAudioFormat *) 0 ;
  AkUInt32 result;
  
  arg1 = (AkAudioFormat *)jarg1; 
  result = (AkUInt32) ((arg1)->uInterleaveID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkAudioFormat_GetNumChannels(void * jarg1) {
  unsigned int jresult ;
  AkAudioFormat *arg1 = (AkAudioFormat *) 0 ;
  AkUInt32 result;
  
  arg1 = (AkAudioFormat *)jarg1; 
  result = (AkUInt32)((AkAudioFormat const *)arg1)->GetNumChannels();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkAudioFormat_GetBitsPerSample(void * jarg1) {
  unsigned int jresult ;
  AkAudioFormat *arg1 = (AkAudioFormat *) 0 ;
  AkUInt32 result;
  
  arg1 = (AkAudioFormat *)jarg1; 
  result = (AkUInt32)((AkAudioFormat const *)arg1)->GetBitsPerSample();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkAudioFormat_GetBlockAlign(void * jarg1) {
  unsigned int jresult ;
  AkAudioFormat *arg1 = (AkAudioFormat *) 0 ;
  AkUInt32 result;
  
  arg1 = (AkAudioFormat *)jarg1; 
  result = (AkUInt32)((AkAudioFormat const *)arg1)->GetBlockAlign();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkAudioFormat_GetTypeID(void * jarg1) {
  unsigned int jresult ;
  AkAudioFormat *arg1 = (AkAudioFormat *) 0 ;
  AkUInt32 result;
  
  arg1 = (AkAudioFormat *)jarg1; 
  result = (AkUInt32)((AkAudioFormat const *)arg1)->GetTypeID();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkAudioFormat_GetInterleaveID(void * jarg1) {
  unsigned int jresult ;
  AkAudioFormat *arg1 = (AkAudioFormat *) 0 ;
  AkUInt32 result;
  
  arg1 = (AkAudioFormat *)jarg1; 
  result = (AkUInt32)((AkAudioFormat const *)arg1)->GetInterleaveID();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkAudioFormat_SetAll(void * jarg1, unsigned int jarg2, void * jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7) {
  AkAudioFormat *arg1 = (AkAudioFormat *) 0 ;
  AkUInt32 arg2 ;
  AkChannelConfig arg3 ;
  AkUInt32 arg4 ;
  AkUInt32 arg5 ;
  AkUInt32 arg6 ;
  AkUInt32 arg7 ;
  AkChannelConfig *argp3 ;
  
  arg1 = (AkAudioFormat *)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  argp3 = (AkChannelConfig *)jarg3; 
  if (!argp3) {
    return ;
  }
  arg3 = *argp3; 
  arg4 = (AkUInt32)jarg4; 
  arg5 = (AkUInt32)jarg5; 
  arg6 = (AkUInt32)jarg6; 
  arg7 = (AkUInt32)jarg7; 
  (arg1)->SetAll(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AkAudioFormat() {
  void * jresult ;
  AkAudioFormat *result = 0 ;
  
  {
    result = (AkAudioFormat *)new AkAudioFormat();
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AkAudioFormat(void * jarg1) {
  AkAudioFormat *arg1 = (AkAudioFormat *) 0 ;
  
  arg1 = (AkAudioFormat *)jarg1; 
  {
    delete arg1;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Ak3dData() {
  void * jresult ;
  Ak3dData *result = 0 ;
  
  result = (Ak3dData *)new Ak3dData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Ak3dData_xform_set(void * jarg1, void * jarg2) {
  Ak3dData *arg1 = (Ak3dData *) 0 ;
  AkTransform *arg2 = (AkTransform *) 0 ;
  
  arg1 = (Ak3dData *)jarg1; 
  arg2 = (AkTransform *)jarg2; 
  if (arg1) (arg1)->xform = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Ak3dData_xform_get(void * jarg1) {
  void * jresult ;
  Ak3dData *arg1 = (Ak3dData *) 0 ;
  AkTransform *result = 0 ;
  
  arg1 = (Ak3dData *)jarg1; 
  result = (AkTransform *)& ((arg1)->xform);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Ak3dData_spread_set(void * jarg1, float jarg2) {
  Ak3dData *arg1 = (Ak3dData *) 0 ;
  AkReal32 arg2 ;
  
  arg1 = (Ak3dData *)jarg1; 
  arg2 = (AkReal32)jarg2; 
  if (arg1) (arg1)->spread = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Ak3dData_spread_get(void * jarg1) {
  float jresult ;
  Ak3dData *arg1 = (Ak3dData *) 0 ;
  AkReal32 result;
  
  arg1 = (Ak3dData *)jarg1; 
  result = (AkReal32) ((arg1)->spread);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Ak3dData_focus_set(void * jarg1, float jarg2) {
  Ak3dData *arg1 = (Ak3dData *) 0 ;
  AkReal32 arg2 ;
  
  arg1 = (Ak3dData *)jarg1; 
  arg2 = (AkReal32)jarg2; 
  if (arg1) (arg1)->focus = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Ak3dData_focus_get(void * jarg1) {
  float jresult ;
  Ak3dData *arg1 = (Ak3dData *) 0 ;
  AkReal32 result;
  
  arg1 = (Ak3dData *)jarg1; 
  result = (AkReal32) ((arg1)->focus);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Ak3dData_uEmitterChannelMask_set(void * jarg1, unsigned int jarg2) {
  Ak3dData *arg1 = (Ak3dData *) 0 ;
  AkChannelMask arg2 ;
  
  arg1 = (Ak3dData *)jarg1; 
  arg2 = (AkChannelMask)jarg2; 
  if (arg1) (arg1)->uEmitterChannelMask = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Ak3dData_uEmitterChannelMask_get(void * jarg1) {
  unsigned int jresult ;
  Ak3dData *arg1 = (Ak3dData *) 0 ;
  AkChannelMask result;
  
  arg1 = (Ak3dData *)jarg1; 
  result = (AkChannelMask) ((arg1)->uEmitterChannelMask);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Ak3dData(void * jarg1) {
  Ak3dData *arg1 = (Ak3dData *) 0 ;
  
  arg1 = (Ak3dData *)jarg1; 
  {
    delete arg1;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AkBehavioralPositioningData() {
  void * jresult ;
  AkBehavioralPositioningData *result = 0 ;
  
  result = (AkBehavioralPositioningData *)new AkBehavioralPositioningData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkBehavioralPositioningData_center_set(void * jarg1, float jarg2) {
  AkBehavioralPositioningData *arg1 = (AkBehavioralPositioningData *) 0 ;
  AkReal32 arg2 ;
  
  arg1 = (AkBehavioralPositioningData *)jarg1; 
  arg2 = (AkReal32)jarg2; 
  if (arg1) (arg1)->center = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AkBehavioralPositioningData_center_get(void * jarg1) {
  float jresult ;
  AkBehavioralPositioningData *arg1 = (AkBehavioralPositioningData *) 0 ;
  AkReal32 result;
  
  arg1 = (AkBehavioralPositioningData *)jarg1; 
  result = (AkReal32) ((arg1)->center);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkBehavioralPositioningData_panLR_set(void * jarg1, float jarg2) {
  AkBehavioralPositioningData *arg1 = (AkBehavioralPositioningData *) 0 ;
  AkReal32 arg2 ;
  
  arg1 = (AkBehavioralPositioningData *)jarg1; 
  arg2 = (AkReal32)jarg2; 
  if (arg1) (arg1)->panLR = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AkBehavioralPositioningData_panLR_get(void * jarg1) {
  float jresult ;
  AkBehavioralPositioningData *arg1 = (AkBehavioralPositioningData *) 0 ;
  AkReal32 result;
  
  arg1 = (AkBehavioralPositioningData *)jarg1; 
  result = (AkReal32) ((arg1)->panLR);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkBehavioralPositioningData_panBF_set(void * jarg1, float jarg2) {
  AkBehavioralPositioningData *arg1 = (AkBehavioralPositioningData *) 0 ;
  AkReal32 arg2 ;
  
  arg1 = (AkBehavioralPositioningData *)jarg1; 
  arg2 = (AkReal32)jarg2; 
  if (arg1) (arg1)->panBF = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AkBehavioralPositioningData_panBF_get(void * jarg1) {
  float jresult ;
  AkBehavioralPositioningData *arg1 = (AkBehavioralPositioningData *) 0 ;
  AkReal32 result;
  
  arg1 = (AkBehavioralPositioningData *)jarg1; 
  result = (AkReal32) ((arg1)->panBF);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkBehavioralPositioningData_panDU_set(void * jarg1, float jarg2) {
  AkBehavioralPositioningData *arg1 = (AkBehavioralPositioningData *) 0 ;
  AkReal32 arg2 ;
  
  arg1 = (AkBehavioralPositioningData *)jarg1; 
  arg2 = (AkReal32)jarg2; 
  if (arg1) (arg1)->panDU = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AkBehavioralPositioningData_panDU_get(void * jarg1) {
  float jresult ;
  AkBehavioralPositioningData *arg1 = (AkBehavioralPositioningData *) 0 ;
  AkReal32 result;
  
  arg1 = (AkBehavioralPositioningData *)jarg1; 
  result = (AkReal32) ((arg1)->panDU);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkBehavioralPositioningData_panSpatMix_set(void * jarg1, float jarg2) {
  AkBehavioralPositioningData *arg1 = (AkBehavioralPositioningData *) 0 ;
  AkReal32 arg2 ;
  
  arg1 = (AkBehavioralPositioningData *)jarg1; 
  arg2 = (AkReal32)jarg2; 
  if (arg1) (arg1)->panSpatMix = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AkBehavioralPositioningData_panSpatMix_get(void * jarg1) {
  float jresult ;
  AkBehavioralPositioningData *arg1 = (AkBehavioralPositioningData *) 0 ;
  AkReal32 result;
  
  arg1 = (AkBehavioralPositioningData *)jarg1; 
  result = (AkReal32) ((arg1)->panSpatMix);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkBehavioralPositioningData_spatMode_set(void * jarg1, int jarg2) {
  AkBehavioralPositioningData *arg1 = (AkBehavioralPositioningData *) 0 ;
  Ak3DSpatializationMode arg2 ;
  
  arg1 = (AkBehavioralPositioningData *)jarg1; 
  arg2 = (Ak3DSpatializationMode)jarg2; 
  if (arg1) (arg1)->spatMode = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AkBehavioralPositioningData_spatMode_get(void * jarg1) {
  int jresult ;
  AkBehavioralPositioningData *arg1 = (AkBehavioralPositioningData *) 0 ;
  Ak3DSpatializationMode result;
  
  arg1 = (AkBehavioralPositioningData *)jarg1; 
  result = (Ak3DSpatializationMode) ((arg1)->spatMode);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkBehavioralPositioningData_panType_set(void * jarg1, int jarg2) {
  AkBehavioralPositioningData *arg1 = (AkBehavioralPositioningData *) 0 ;
  AkSpeakerPanningType arg2 ;
  
  arg1 = (AkBehavioralPositioningData *)jarg1; 
  arg2 = (AkSpeakerPanningType)jarg2; 
  if (arg1) (arg1)->panType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AkBehavioralPositioningData_panType_get(void * jarg1) {
  int jresult ;
  AkBehavioralPositioningData *arg1 = (AkBehavioralPositioningData *) 0 ;
  AkSpeakerPanningType result;
  
  arg1 = (AkBehavioralPositioningData *)jarg1; 
  result = (AkSpeakerPanningType) ((arg1)->panType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkBehavioralPositioningData_enableHeightSpread_set(void * jarg1, unsigned int jarg2) {
  AkBehavioralPositioningData *arg1 = (AkBehavioralPositioningData *) 0 ;
  bool arg2 ;
  
  arg1 = (AkBehavioralPositioningData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->enableHeightSpread = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkBehavioralPositioningData_enableHeightSpread_get(void * jarg1) {
  unsigned int jresult ;
  AkBehavioralPositioningData *arg1 = (AkBehavioralPositioningData *) 0 ;
  bool result;
  
  arg1 = (AkBehavioralPositioningData *)jarg1; 
  result = (bool) ((arg1)->enableHeightSpread);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AkBehavioralPositioningData(void * jarg1) {
  AkBehavioralPositioningData *arg1 = (AkBehavioralPositioningData *) 0 ;
  
  arg1 = (AkBehavioralPositioningData *)jarg1; 
  {
    delete arg1;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkPositioningData_threeD_set(void * jarg1, void * jarg2) {
  AkPositioningData *arg1 = (AkPositioningData *) 0 ;
  Ak3dData *arg2 = (Ak3dData *) 0 ;
  
  arg1 = (AkPositioningData *)jarg1; 
  arg2 = (Ak3dData *)jarg2; 
  if (arg1) (arg1)->threeD = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AkPositioningData_threeD_get(void * jarg1) {
  void * jresult ;
  AkPositioningData *arg1 = (AkPositioningData *) 0 ;
  Ak3dData *result = 0 ;
  
  arg1 = (AkPositioningData *)jarg1; 
  result = (Ak3dData *)& ((arg1)->threeD);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkPositioningData_behavioral_set(void * jarg1, void * jarg2) {
  AkPositioningData *arg1 = (AkPositioningData *) 0 ;
  AkBehavioralPositioningData *arg2 = (AkBehavioralPositioningData *) 0 ;
  
  arg1 = (AkPositioningData *)jarg1; 
  arg2 = (AkBehavioralPositioningData *)jarg2; 
  if (arg1) (arg1)->behavioral = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AkPositioningData_behavioral_get(void * jarg1) {
  void * jresult ;
  AkPositioningData *arg1 = (AkPositioningData *) 0 ;
  AkBehavioralPositioningData *result = 0 ;
  
  arg1 = (AkPositioningData *)jarg1; 
  result = (AkBehavioralPositioningData *)& ((arg1)->behavioral);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AkPositioningData() {
  void * jresult ;
  AkPositioningData *result = 0 ;
  
  {
    result = (AkPositioningData *)new AkPositioningData();
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AkPositioningData(void * jarg1) {
  AkPositioningData *arg1 = (AkPositioningData *) 0 ;
  
  arg1 = (AkPositioningData *)jarg1; 
  {
    delete arg1;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Ak3DAudioSinkCapabilities_channelConfig_set(void * jarg1, void * jarg2) {
  Ak3DAudioSinkCapabilities *arg1 = (Ak3DAudioSinkCapabilities *) 0 ;
  AkChannelConfig *arg2 = (AkChannelConfig *) 0 ;
  
  arg1 = (Ak3DAudioSinkCapabilities *)jarg1; 
  arg2 = (AkChannelConfig *)jarg2; 
  if (arg1) (arg1)->channelConfig = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Ak3DAudioSinkCapabilities_channelConfig_get(void * jarg1) {
  void * jresult ;
  Ak3DAudioSinkCapabilities *arg1 = (Ak3DAudioSinkCapabilities *) 0 ;
  AkChannelConfig *result = 0 ;
  
  arg1 = (Ak3DAudioSinkCapabilities *)jarg1; 
  result = (AkChannelConfig *)& ((arg1)->channelConfig);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Ak3DAudioSinkCapabilities_uMaxSystemAudioObjects_set(void * jarg1, unsigned int jarg2) {
  Ak3DAudioSinkCapabilities *arg1 = (Ak3DAudioSinkCapabilities *) 0 ;
  AkUInt32 arg2 ;
  
  arg1 = (Ak3DAudioSinkCapabilities *)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  if (arg1) (arg1)->uMaxSystemAudioObjects = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Ak3DAudioSinkCapabilities_uMaxSystemAudioObjects_get(void * jarg1) {
  unsigned int jresult ;
  Ak3DAudioSinkCapabilities *arg1 = (Ak3DAudioSinkCapabilities *) 0 ;
  AkUInt32 result;
  
  arg1 = (Ak3DAudioSinkCapabilities *)jarg1; 
  result = (AkUInt32) ((arg1)->uMaxSystemAudioObjects);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Ak3DAudioSinkCapabilities_uAvailableSystemAudioObjects_set(void * jarg1, unsigned int jarg2) {
  Ak3DAudioSinkCapabilities *arg1 = (Ak3DAudioSinkCapabilities *) 0 ;
  AkUInt32 arg2 ;
  
  arg1 = (Ak3DAudioSinkCapabilities *)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  if (arg1) (arg1)->uAvailableSystemAudioObjects = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Ak3DAudioSinkCapabilities_uAvailableSystemAudioObjects_get(void * jarg1) {
  unsigned int jresult ;
  Ak3DAudioSinkCapabilities *arg1 = (Ak3DAudioSinkCapabilities *) 0 ;
  AkUInt32 result;
  
  arg1 = (Ak3DAudioSinkCapabilities *)jarg1; 
  result = (AkUInt32) ((arg1)->uAvailableSystemAudioObjects);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Ak3DAudioSinkCapabilities_bPassthrough_set(void * jarg1, unsigned int jarg2) {
  Ak3DAudioSinkCapabilities *arg1 = (Ak3DAudioSinkCapabilities *) 0 ;
  bool arg2 ;
  
  arg1 = (Ak3DAudioSinkCapabilities *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bPassthrough = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Ak3DAudioSinkCapabilities_bPassthrough_get(void * jarg1) {
  unsigned int jresult ;
  Ak3DAudioSinkCapabilities *arg1 = (Ak3DAudioSinkCapabilities *) 0 ;
  bool result;
  
  arg1 = (Ak3DAudioSinkCapabilities *)jarg1; 
  result = (bool) ((arg1)->bPassthrough);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Ak3DAudioSinkCapabilities_bMultiChannelObjects_set(void * jarg1, unsigned int jarg2) {
  Ak3DAudioSinkCapabilities *arg1 = (Ak3DAudioSinkCapabilities *) 0 ;
  bool arg2 ;
  
  arg1 = (Ak3DAudioSinkCapabilities *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bMultiChannelObjects = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Ak3DAudioSinkCapabilities_bMultiChannelObjects_get(void * jarg1) {
  unsigned int jresult ;
  Ak3DAudioSinkCapabilities *arg1 = (Ak3DAudioSinkCapabilities *) 0 ;
  bool result;
  
  arg1 = (Ak3DAudioSinkCapabilities *)jarg1; 
  result = (bool) ((arg1)->bMultiChannelObjects);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Ak3DAudioSinkCapabilities() {
  void * jresult ;
  Ak3DAudioSinkCapabilities *result = 0 ;
  
  {
    result = (Ak3DAudioSinkCapabilities *)new Ak3DAudioSinkCapabilities();
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Ak3DAudioSinkCapabilities(void * jarg1) {
  Ak3DAudioSinkCapabilities *arg1 = (Ak3DAudioSinkCapabilities *) 0 ;
  
  arg1 = (Ak3DAudioSinkCapabilities *)jarg1; 
  {
    delete arg1;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkIterator_pItem_set(void * jarg1, void * jarg2) {
  AkIterator *arg1 = (AkIterator *) 0 ;
  AK::SoundEngine::DynamicSequence::PlaylistItem *arg2 = (AK::SoundEngine::DynamicSequence::PlaylistItem *) 0 ;
  
  arg1 = (AkIterator *)jarg1; 
  arg2 = (AK::SoundEngine::DynamicSequence::PlaylistItem *)jarg2; 
  if (arg1) (arg1)->pItem = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AkIterator_pItem_get(void * jarg1) {
  void * jresult ;
  AkIterator *arg1 = (AkIterator *) 0 ;
  AK::SoundEngine::DynamicSequence::PlaylistItem *result = 0 ;
  
  arg1 = (AkIterator *)jarg1; 
  result = (AK::SoundEngine::DynamicSequence::PlaylistItem *) ((arg1)->pItem);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AkIterator_NextIter(void * jarg1) {
  void * jresult ;
  AkIterator *arg1 = (AkIterator *) 0 ;
  AkIterator *result = 0 ;
  
  arg1 = (AkIterator *)jarg1; 
  {
    result = (AkIterator *) &(arg1)->operator ++();
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AkIterator_PrevIter(void * jarg1) {
  void * jresult ;
  AkIterator *arg1 = (AkIterator *) 0 ;
  AkIterator *result = 0 ;
  
  arg1 = (AkIterator *)jarg1; 
  {
    result = (AkIterator *) &(arg1)->operator --();
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AkIterator_GetItem(void * jarg1) {
  void * jresult ;
  AkIterator *arg1 = (AkIterator *) 0 ;
  AK::SoundEngine::DynamicSequence::PlaylistItem *result = 0 ;
  
  arg1 = (AkIterator *)jarg1; 
  {
    result = (AK::SoundEngine::DynamicSequence::PlaylistItem *) &(arg1)->operator *();
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkIterator_IsEqualTo(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  AkIterator *arg1 = (AkIterator *) 0 ;
  AkIterator *arg2 = 0 ;
  bool result;
  
  arg1 = (AkIterator *)jarg1; 
  arg2 = (AkIterator *)jarg2;
  if (!arg2) {
    return 0;
  } 
  {
    result = (bool)((AkIterator const *)arg1)->operator ==((AkIterator const &)*arg2);
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkIterator_IsDifferentFrom(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  AkIterator *arg1 = (AkIterator *) 0 ;
  AkIterator *arg2 = 0 ;
  bool result;
  
  arg1 = (AkIterator *)jarg1; 
  arg2 = (AkIterator *)jarg2;
  if (!arg2) {
    return 0;
  } 
  {
    result = (bool)((AkIterator const *)arg1)->operator !=((AkIterator const &)*arg2);
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AkIterator() {
  void * jresult ;
  AkIterator *result = 0 ;
  
  {
    result = (AkIterator *)new AkIterator();
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AkIterator(void * jarg1) {
  AkIterator *arg1 = (AkIterator *) 0 ;
  
  arg1 = (AkIterator *)jarg1; 
  {
    delete arg1;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AkPlaylistItem__SWIG_0() {
  void * jresult ;
  AK::SoundEngine::DynamicSequence::PlaylistItem *result = 0 ;
  
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AK::SoundEngine::DynamicSequence::PlaylistItem *)new AK::SoundEngine::DynamicSequence::PlaylistItem();  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::DynamicSequence::PlaylistItem::PlaylistItem(): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return 0; 	
    } 
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AkPlaylistItem__SWIG_1(void * jarg1) {
  void * jresult ;
  AK::SoundEngine::DynamicSequence::PlaylistItem *arg1 = 0 ;
  AK::SoundEngine::DynamicSequence::PlaylistItem *result = 0 ;
  
  arg1 = (AK::SoundEngine::DynamicSequence::PlaylistItem *)jarg1;
  if (!arg1) {
    return 0;
  } 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AK::SoundEngine::DynamicSequence::PlaylistItem *)new AK::SoundEngine::DynamicSequence::PlaylistItem((AK::SoundEngine::DynamicSequence::PlaylistItem const &)*arg1);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::DynamicSequence::PlaylistItem::PlaylistItem(AK::SoundEngine::DynamicSequence::PlaylistItem const &): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return 0; 	
    } 
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AkPlaylistItem(void * jarg1) {
  AK::SoundEngine::DynamicSequence::PlaylistItem *arg1 = (AK::SoundEngine::DynamicSequence::PlaylistItem *) 0 ;
  
  arg1 = (AK::SoundEngine::DynamicSequence::PlaylistItem *)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      delete arg1;  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::DynamicSequence::PlaylistItem::~PlaylistItem(): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return ; 	
    } 
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AkPlaylistItem_Assign(void * jarg1, void * jarg2) {
  void * jresult ;
  AK::SoundEngine::DynamicSequence::PlaylistItem *arg1 = (AK::SoundEngine::DynamicSequence::PlaylistItem *) 0 ;
  AK::SoundEngine::DynamicSequence::PlaylistItem *arg2 = 0 ;
  AK::SoundEngine::DynamicSequence::PlaylistItem *result = 0 ;
  
  arg1 = (AK::SoundEngine::DynamicSequence::PlaylistItem *)jarg1; 
  arg2 = (AK::SoundEngine::DynamicSequence::PlaylistItem *)jarg2;
  if (!arg2) {
    return 0;
  } 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AK::SoundEngine::DynamicSequence::PlaylistItem *) &(arg1)->operator =((AK::SoundEngine::DynamicSequence::PlaylistItem const &)*arg2);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::DynamicSequence::PlaylistItem::operator =(AK::SoundEngine::DynamicSequence::PlaylistItem const &): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return 0; 	
    } 
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkPlaylistItem_IsEqualTo(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  AK::SoundEngine::DynamicSequence::PlaylistItem *arg1 = (AK::SoundEngine::DynamicSequence::PlaylistItem *) 0 ;
  AK::SoundEngine::DynamicSequence::PlaylistItem *arg2 = 0 ;
  bool result;
  
  arg1 = (AK::SoundEngine::DynamicSequence::PlaylistItem *)jarg1; 
  arg2 = (AK::SoundEngine::DynamicSequence::PlaylistItem *)jarg2;
  if (!arg2) {
    return 0;
  } 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (bool)(arg1)->operator ==((AK::SoundEngine::DynamicSequence::PlaylistItem const &)*arg2);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::DynamicSequence::PlaylistItem::operator ==(AK::SoundEngine::DynamicSequence::PlaylistItem const &): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return 0; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AkPlaylistItem_SetExternalSources(void * jarg1, unsigned int jarg2, void * jarg3) {
  int jresult ;
  AK::SoundEngine::DynamicSequence::PlaylistItem *arg1 = (AK::SoundEngine::DynamicSequence::PlaylistItem *) 0 ;
  AkUInt32 arg2 ;
  AkExternalSourceInfo *arg3 = (AkExternalSourceInfo *) 0 ;
  AKRESULT result;
  
  arg1 = (AK::SoundEngine::DynamicSequence::PlaylistItem *)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  arg3 = (AkExternalSourceInfo *)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)(arg1)->SetExternalSources(arg2,arg3);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::DynamicSequence::PlaylistItem::SetExternalSources(AkUInt32,AkExternalSourceInfo *): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkPlaylistItem_audioNodeID_set(void * jarg1, unsigned int jarg2) {
  AK::SoundEngine::DynamicSequence::PlaylistItem *arg1 = (AK::SoundEngine::DynamicSequence::PlaylistItem *) 0 ;
  AkUniqueID arg2 ;
  
  arg1 = (AK::SoundEngine::DynamicSequence::PlaylistItem *)jarg1; 
  arg2 = (AkUniqueID)jarg2; 
  if (arg1) (arg1)->audioNodeID = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkPlaylistItem_audioNodeID_get(void * jarg1) {
  unsigned int jresult ;
  AK::SoundEngine::DynamicSequence::PlaylistItem *arg1 = (AK::SoundEngine::DynamicSequence::PlaylistItem *) 0 ;
  AkUniqueID result;
  
  arg1 = (AK::SoundEngine::DynamicSequence::PlaylistItem *)jarg1; 
  result = (AkUniqueID) ((arg1)->audioNodeID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkPlaylistItem_msDelay_set(void * jarg1, int jarg2) {
  AK::SoundEngine::DynamicSequence::PlaylistItem *arg1 = (AK::SoundEngine::DynamicSequence::PlaylistItem *) 0 ;
  AkTimeMs arg2 ;
  
  arg1 = (AK::SoundEngine::DynamicSequence::PlaylistItem *)jarg1; 
  arg2 = (AkTimeMs)jarg2; 
  if (arg1) (arg1)->msDelay = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AkPlaylistItem_msDelay_get(void * jarg1) {
  int jresult ;
  AK::SoundEngine::DynamicSequence::PlaylistItem *arg1 = (AK::SoundEngine::DynamicSequence::PlaylistItem *) 0 ;
  AkTimeMs result;
  
  arg1 = (AK::SoundEngine::DynamicSequence::PlaylistItem *)jarg1; 
  result = (AkTimeMs) ((arg1)->msDelay);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkPlaylistItem_pCustomInfo_set(void * jarg1, void * jarg2) {
  AK::SoundEngine::DynamicSequence::PlaylistItem *arg1 = (AK::SoundEngine::DynamicSequence::PlaylistItem *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (AK::SoundEngine::DynamicSequence::PlaylistItem *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->pCustomInfo = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AkPlaylistItem_pCustomInfo_get(void * jarg1) {
  void * jresult ;
  AK::SoundEngine::DynamicSequence::PlaylistItem *arg1 = (AK::SoundEngine::DynamicSequence::PlaylistItem *) 0 ;
  void *result = 0 ;
  
  arg1 = (AK::SoundEngine::DynamicSequence::PlaylistItem *)jarg1; 
  result = (void *) ((arg1)->pCustomInfo);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AkPlaylistArray() {
  void * jresult ;
  AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional > *result = 0 ;
  
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional > *)new AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional >();  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional >::AkArray(): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return 0; 	
    } 
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AkPlaylistArray(void * jarg1) {
  AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional > *arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional > *) 0 ;
  
  arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional > *)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      delete arg1;  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional >::~AkArray(): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return ; 	
    } 
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AkPlaylistArray_Begin(void * jarg1) {
  void * jresult ;
  AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional > *arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional > *) 0 ;
  AkIterator result;
  
  arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional > *)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = ((AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional > const *)arg1)->Begin();  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional >::Begin() const: AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return 0; 	
    } 
  }
  jresult = new AkIterator((const AkIterator &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AkPlaylistArray_End(void * jarg1) {
  void * jresult ;
  AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional > *arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional > *) 0 ;
  AkIterator result;
  
  arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional > *)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = ((AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional > const *)arg1)->End();  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional >::End() const: AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return 0; 	
    } 
  }
  jresult = new AkIterator((const AkIterator &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AkPlaylistArray_FindEx(void * jarg1, void * jarg2) {
  void * jresult ;
  AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional > *arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional > *) 0 ;
  AK::SoundEngine::DynamicSequence::PlaylistItem *arg2 = 0 ;
  AkIterator result;
  
  arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional > *)jarg1; 
  arg2 = (AK::SoundEngine::DynamicSequence::PlaylistItem *)jarg2;
  if (!arg2) {
    return 0;
  } 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = ((AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional > const *)arg1)->FindEx((AK::SoundEngine::DynamicSequence::PlaylistItem const &)*arg2);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional >::FindEx(AK::SoundEngine::DynamicSequence::PlaylistItem const &) const: AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return 0; 	
    } 
  }
  jresult = new AkIterator((const AkIterator &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AkPlaylistArray_Erase__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional > *arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional > *) 0 ;
  AkIterator *arg2 = 0 ;
  AkIterator result;
  
  arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional > *)jarg1; 
  arg2 = (AkIterator *)jarg2;
  if (!arg2) {
    return 0;
  } 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (arg1)->Erase(*arg2);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional >::Erase(AkIterator &): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return 0; 	
    } 
  }
  jresult = new AkIterator((const AkIterator &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkPlaylistArray_Erase__SWIG_1(void * jarg1, unsigned int jarg2) {
  AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional > *arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      (arg1)->Erase(arg2);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional >::Erase(unsigned int): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return ; 	
    } 
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AkPlaylistArray_EraseSwap__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional > *arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional > *) 0 ;
  AkIterator *arg2 = 0 ;
  AkIterator result;
  
  arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional > *)jarg1; 
  arg2 = (AkIterator *)jarg2;
  if (!arg2) {
    return 0;
  } 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (arg1)->EraseSwap(*arg2);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional >::EraseSwap(AkIterator &): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return 0; 	
    } 
  }
  jresult = new AkIterator((const AkIterator &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkPlaylistArray_EraseSwap__SWIG_1(void * jarg1, unsigned int jarg2) {
  AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional > *arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      (arg1)->EraseSwap(arg2);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional >::EraseSwap(unsigned int): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return ; 	
    } 
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkPlaylistArray_IsGrowingAllowed(void * jarg1) {
  unsigned int jresult ;
  AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional > *arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional > *) 0 ;
  bool result;
  
  arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional > *)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (bool)(arg1)->IsGrowingAllowed();  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional >::IsGrowingAllowed(): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return 0; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AkPlaylistArray_Reserve(void * jarg1, unsigned int jarg2) {
  int jresult ;
  AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional > *arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional > *) 0 ;
  AkUInt32 arg2 ;
  AKRESULT result;
  
  arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional > *)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)(arg1)->Reserve(arg2);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional >::Reserve(AkUInt32): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkPlaylistArray_Reserved(void * jarg1) {
  unsigned int jresult ;
  AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional > *arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional > *) 0 ;
  AkUInt32 result;
  
  arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional > *)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AkUInt32)((AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional > const *)arg1)->Reserved();  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional >::Reserved() const: AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return 0; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkPlaylistArray_Term(void * jarg1) {
  AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional > *arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional > *) 0 ;
  
  arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional > *)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      (arg1)->Term();  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional >::Term(): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return ; 	
    } 
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkPlaylistArray_Length(void * jarg1) {
  unsigned int jresult ;
  AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional > *arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional > *) 0 ;
  AkUInt32 result;
  
  arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional > *)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AkUInt32)((AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional > const *)arg1)->Length();  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional >::Length() const: AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return 0; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AkPlaylistArray_Data(void * jarg1) {
  void * jresult ;
  AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional > *arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional > *) 0 ;
  AK::SoundEngine::DynamicSequence::PlaylistItem *result = 0 ;
  
  arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional > *)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AK::SoundEngine::DynamicSequence::PlaylistItem *)((AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional > const *)arg1)->Data();  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional >::Data() const: AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return 0; 	
    } 
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkPlaylistArray_IsEmpty(void * jarg1) {
  unsigned int jresult ;
  AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional > *arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional > *) 0 ;
  bool result;
  
  arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional > *)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (bool)((AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional > const *)arg1)->IsEmpty();  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional >::IsEmpty() const: AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return 0; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AkPlaylistArray_Exists(void * jarg1, void * jarg2) {
  void * jresult ;
  AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional > *arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional > *) 0 ;
  AK::SoundEngine::DynamicSequence::PlaylistItem *arg2 = 0 ;
  AK::SoundEngine::DynamicSequence::PlaylistItem *result = 0 ;
  
  arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional > *)jarg1; 
  arg2 = (AK::SoundEngine::DynamicSequence::PlaylistItem *)jarg2;
  if (!arg2) {
    return 0;
  } 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AK::SoundEngine::DynamicSequence::PlaylistItem *)((AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional > const *)arg1)->Exists((AK::SoundEngine::DynamicSequence::PlaylistItem const &)*arg2);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional >::Exists(AK::SoundEngine::DynamicSequence::PlaylistItem const &) const: AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return 0; 	
    } 
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AkPlaylistArray_AddLast__SWIG_0(void * jarg1) {
  void * jresult ;
  AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional > *arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional > *) 0 ;
  AK::SoundEngine::DynamicSequence::PlaylistItem *result = 0 ;
  
  arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional > *)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AK::SoundEngine::DynamicSequence::PlaylistItem *)(arg1)->AddLast();  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional >::AddLast(): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return 0; 	
    } 
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AkPlaylistArray_AddLast__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional > *arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional > *) 0 ;
  AK::SoundEngine::DynamicSequence::PlaylistItem *arg2 = 0 ;
  AK::SoundEngine::DynamicSequence::PlaylistItem *result = 0 ;
  
  arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional > *)jarg1; 
  arg2 = (AK::SoundEngine::DynamicSequence::PlaylistItem *)jarg2;
  if (!arg2) {
    return 0;
  } 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AK::SoundEngine::DynamicSequence::PlaylistItem *)(arg1)->AddLast((AK::SoundEngine::DynamicSequence::PlaylistItem const &)*arg2);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional >::AddLast(AK::SoundEngine::DynamicSequence::PlaylistItem const &): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return 0; 	
    } 
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AkPlaylistArray_Last(void * jarg1) {
  void * jresult ;
  AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional > *arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional > *) 0 ;
  AK::SoundEngine::DynamicSequence::PlaylistItem *result = 0 ;
  
  arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional > *)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AK::SoundEngine::DynamicSequence::PlaylistItem *) &(arg1)->Last();  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional >::Last(): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return 0; 	
    } 
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkPlaylistArray_RemoveLast(void * jarg1) {
  AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional > *arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional > *) 0 ;
  
  arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional > *)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      (arg1)->RemoveLast();  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional >::RemoveLast(): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return ; 	
    } 
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_AkPlaylistArray_Remove(void * jarg1, void * jarg2) {
  int jresult ;
  AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional > *arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional > *) 0 ;
  AK::SoundEngine::DynamicSequence::PlaylistItem *arg2 = 0 ;
  AKRESULT result;
  
  arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional > *)jarg1; 
  arg2 = (AK::SoundEngine::DynamicSequence::PlaylistItem *)jarg2;
  if (!arg2) {
    return AK_Fail;
  } 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)(arg1)->Remove((AK::SoundEngine::DynamicSequence::PlaylistItem const &)*arg2);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional >::Remove(AK::SoundEngine::DynamicSequence::PlaylistItem const &): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AkPlaylistArray_RemoveSwap(void * jarg1, void * jarg2) {
  int jresult ;
  AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional > *arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional > *) 0 ;
  AK::SoundEngine::DynamicSequence::PlaylistItem *arg2 = 0 ;
  AKRESULT result;
  
  arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional > *)jarg1; 
  arg2 = (AK::SoundEngine::DynamicSequence::PlaylistItem *)jarg2;
  if (!arg2) {
    return AK_Fail;
  } 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)(arg1)->RemoveSwap((AK::SoundEngine::DynamicSequence::PlaylistItem const &)*arg2);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional >::RemoveSwap(AK::SoundEngine::DynamicSequence::PlaylistItem const &): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkPlaylistArray_RemoveAll(void * jarg1) {
  AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional > *arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional > *) 0 ;
  
  arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional > *)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      (arg1)->RemoveAll();  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional >::RemoveAll(): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return ; 	
    } 
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AkPlaylistArray_ItemAtIndex(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional > *arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional > *) 0 ;
  unsigned int arg2 ;
  AK::SoundEngine::DynamicSequence::PlaylistItem *result = 0 ;
  
  arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AK::SoundEngine::DynamicSequence::PlaylistItem *) &((AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional > const *)arg1)->operator [](arg2);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional >::operator [](unsigned int) const: AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return 0; 	
    } 
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AkPlaylistArray_Insert(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional > *arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional > *) 0 ;
  unsigned int arg2 ;
  AK::SoundEngine::DynamicSequence::PlaylistItem *result = 0 ;
  
  arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AK::SoundEngine::DynamicSequence::PlaylistItem *)(arg1)->Insert(arg2);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional >::Insert(unsigned int): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return 0; 	
    } 
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkPlaylistArray_GrowArray__SWIG_0(void * jarg1) {
  unsigned int jresult ;
  AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional > *arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional > *) 0 ;
  bool result;
  
  arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional > *)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (bool)(arg1)->GrowArray();  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional >::GrowArray(): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return 0; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkPlaylistArray_GrowArray__SWIG_1(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional > *arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional > *) 0 ;
  AkUInt32 arg2 ;
  bool result;
  
  arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional > *)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (bool)(arg1)->GrowArray(arg2);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional >::GrowArray(AkUInt32): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return 0; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkPlaylistArray_Resize(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional > *arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional > *) 0 ;
  AkUInt32 arg2 ;
  bool result;
  
  arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional > *)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (bool)(arg1)->Resize(arg2);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional >::Resize(AkUInt32): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return 0; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkPlaylistArray_Transfer(void * jarg1, void * jarg2) {
  AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional > *arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional > *) 0 ;
  AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,AkArrayAllocatorNoAlign< AkMemID_Object >,AkGrowByPolicy_Proportional,AkAssignmentMovePolicy< AK::SoundEngine::DynamicSequence::PlaylistItem > > *arg2 = 0 ;
  
  arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional > *)jarg1; 
  arg2 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,AkArrayAllocatorNoAlign< AkMemID_Object >,AkGrowByPolicy_Proportional,AkAssignmentMovePolicy< AK::SoundEngine::DynamicSequence::PlaylistItem > > *)jarg2;
  if (!arg2) {
    return ;
  } 
  {
    if (AK::SoundEngine::IsInitialized()) {
      (arg1)->Transfer(*arg2);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional >::Transfer(AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,AkArrayAllocatorNoAlign< AkMemID_Object >,AkGrowByPolicy_Proportional,AkAssignmentMovePolicy< AK::SoundEngine::DynamicSequence::PlaylistItem > > &): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return ; 	
    } 
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_AkPlaylistArray_Copy(void * jarg1, void * jarg2) {
  int jresult ;
  AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional > *arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional > *) 0 ;
  AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,AkArrayAllocatorNoAlign< AkMemID_Object >,AkGrowByPolicy_Proportional,AkAssignmentMovePolicy< AK::SoundEngine::DynamicSequence::PlaylistItem > > *arg2 = 0 ;
  AKRESULT result;
  
  arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional > *)jarg1; 
  arg2 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,AkArrayAllocatorNoAlign< AkMemID_Object >,AkGrowByPolicy_Proportional,AkAssignmentMovePolicy< AK::SoundEngine::DynamicSequence::PlaylistItem > > *)jarg2;
  if (!arg2) {
    return AK_Fail;
  } 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)(arg1)->Copy((AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,AkArrayAllocatorNoAlign< AkMemID_Object >,AkGrowByPolicy_Proportional,AkAssignmentMovePolicy< AK::SoundEngine::DynamicSequence::PlaylistItem > > const &)*arg2);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional >::Copy(AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,AkArrayAllocatorNoAlign< AkMemID_Object >,AkGrowByPolicy_Proportional,AkAssignmentMovePolicy< AK::SoundEngine::DynamicSequence::PlaylistItem > > const &): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AkPlaylist_Enqueue__SWIG_0(void * jarg1, unsigned int jarg2, int jarg3, void * jarg4, unsigned int jarg5, void * jarg6) {
  int jresult ;
  AK::SoundEngine::DynamicSequence::Playlist *arg1 = (AK::SoundEngine::DynamicSequence::Playlist *) 0 ;
  AkUniqueID arg2 ;
  AkTimeMs arg3 ;
  void *arg4 = (void *) 0 ;
  AkUInt32 arg5 ;
  AkExternalSourceInfo *arg6 = (AkExternalSourceInfo *) 0 ;
  AKRESULT result;
  
  arg1 = (AK::SoundEngine::DynamicSequence::Playlist *)jarg1; 
  arg2 = (AkUniqueID)jarg2; 
  arg3 = (AkTimeMs)jarg3; 
  arg4 = jarg4; 
  arg5 = (AkUInt32)jarg5; 
  arg6 = (AkExternalSourceInfo *)jarg6; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)(arg1)->Enqueue(arg2,arg3,arg4,arg5,arg6);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::DynamicSequence::Playlist::Enqueue(AkUniqueID,AkTimeMs,void *,AkUInt32,AkExternalSourceInfo *): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AkPlaylist_Enqueue__SWIG_1(void * jarg1, unsigned int jarg2, int jarg3, void * jarg4, unsigned int jarg5) {
  int jresult ;
  AK::SoundEngine::DynamicSequence::Playlist *arg1 = (AK::SoundEngine::DynamicSequence::Playlist *) 0 ;
  AkUniqueID arg2 ;
  AkTimeMs arg3 ;
  void *arg4 = (void *) 0 ;
  AkUInt32 arg5 ;
  AKRESULT result;
  
  arg1 = (AK::SoundEngine::DynamicSequence::Playlist *)jarg1; 
  arg2 = (AkUniqueID)jarg2; 
  arg3 = (AkTimeMs)jarg3; 
  arg4 = jarg4; 
  arg5 = (AkUInt32)jarg5; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)(arg1)->Enqueue(arg2,arg3,arg4,arg5);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::DynamicSequence::Playlist::Enqueue(AkUniqueID,AkTimeMs,void *,AkUInt32): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AkPlaylist_Enqueue__SWIG_2(void * jarg1, unsigned int jarg2, int jarg3, void * jarg4) {
  int jresult ;
  AK::SoundEngine::DynamicSequence::Playlist *arg1 = (AK::SoundEngine::DynamicSequence::Playlist *) 0 ;
  AkUniqueID arg2 ;
  AkTimeMs arg3 ;
  void *arg4 = (void *) 0 ;
  AKRESULT result;
  
  arg1 = (AK::SoundEngine::DynamicSequence::Playlist *)jarg1; 
  arg2 = (AkUniqueID)jarg2; 
  arg3 = (AkTimeMs)jarg3; 
  arg4 = jarg4; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)(arg1)->Enqueue(arg2,arg3,arg4);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::DynamicSequence::Playlist::Enqueue(AkUniqueID,AkTimeMs,void *): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AkPlaylist_Enqueue__SWIG_3(void * jarg1, unsigned int jarg2, int jarg3) {
  int jresult ;
  AK::SoundEngine::DynamicSequence::Playlist *arg1 = (AK::SoundEngine::DynamicSequence::Playlist *) 0 ;
  AkUniqueID arg2 ;
  AkTimeMs arg3 ;
  AKRESULT result;
  
  arg1 = (AK::SoundEngine::DynamicSequence::Playlist *)jarg1; 
  arg2 = (AkUniqueID)jarg2; 
  arg3 = (AkTimeMs)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)(arg1)->Enqueue(arg2,arg3);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::DynamicSequence::Playlist::Enqueue(AkUniqueID,AkTimeMs): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AkPlaylist_Enqueue__SWIG_4(void * jarg1, unsigned int jarg2) {
  int jresult ;
  AK::SoundEngine::DynamicSequence::Playlist *arg1 = (AK::SoundEngine::DynamicSequence::Playlist *) 0 ;
  AkUniqueID arg2 ;
  AKRESULT result;
  
  arg1 = (AK::SoundEngine::DynamicSequence::Playlist *)jarg1; 
  arg2 = (AkUniqueID)jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)(arg1)->Enqueue(arg2);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::DynamicSequence::Playlist::Enqueue(AkUniqueID): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AkPlaylist() {
  void * jresult ;
  AK::SoundEngine::DynamicSequence::Playlist *result = 0 ;
  
  {
    result = (AK::SoundEngine::DynamicSequence::Playlist *)new AK::SoundEngine::DynamicSequence::Playlist();
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AkPlaylist(void * jarg1) {
  AK::SoundEngine::DynamicSequence::Playlist *arg1 = (AK::SoundEngine::DynamicSequence::Playlist *) 0 ;
  
  arg1 = (AK::SoundEngine::DynamicSequence::Playlist *)jarg1; 
  {
    delete arg1;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DynamicSequenceOpen__SWIG_0(AkGameObjectID jarg1, unsigned int jarg2, void * jarg3, void * jarg4, int jarg5) {
  unsigned int jresult ;
  AkGameObjectID arg1 ;
  AkUInt32 arg2 ;
  AkCallbackFunc arg3 = (AkCallbackFunc) 0 ;
  void *arg4 = (void *) 0 ;
  AK::SoundEngine::DynamicSequence::DynamicSequenceType arg5 ;
  AkPlayingID result;
  
  arg1 = jarg1; 
  arg2 = (AkUInt32)jarg2; 
  arg3 = jarg3 != NULL ? AkCallbackSerializer::EventCallback : NULL; 
  arg4 = jarg4; 
  arg5 = (AK::SoundEngine::DynamicSequence::DynamicSequenceType)jarg5; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AkPlayingID)AK::SoundEngine::DynamicSequence::Open(arg1,arg2,arg3,arg4,arg5);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::DynamicSequence::Open(AkGameObjectID,AkUInt32,AkCallbackFunc,void *,AK::SoundEngine::DynamicSequence::DynamicSequenceType): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_INVALID_PLAYING_ID; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DynamicSequenceOpen__SWIG_1(AkGameObjectID jarg1, unsigned int jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  AkGameObjectID arg1 ;
  AkUInt32 arg2 ;
  AkCallbackFunc arg3 = (AkCallbackFunc) 0 ;
  void *arg4 = (void *) 0 ;
  AkPlayingID result;
  
  arg1 = jarg1; 
  arg2 = (AkUInt32)jarg2; 
  arg3 = jarg3 != NULL ? AkCallbackSerializer::EventCallback : NULL; 
  arg4 = jarg4; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AkPlayingID)AK::SoundEngine::DynamicSequence::Open(arg1,arg2,arg3,arg4);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::DynamicSequence::Open(AkGameObjectID,AkUInt32,AkCallbackFunc,void *): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_INVALID_PLAYING_ID; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DynamicSequenceOpen__SWIG_2(AkGameObjectID jarg1) {
  unsigned int jresult ;
  AkGameObjectID arg1 ;
  AkPlayingID result;
  
  arg1 = jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AkPlayingID)AK::SoundEngine::DynamicSequence::Open(arg1);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::DynamicSequence::Open(AkGameObjectID): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_INVALID_PLAYING_ID; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DynamicSequenceClose(unsigned int jarg1) {
  int jresult ;
  AkPlayingID arg1 ;
  AKRESULT result;
  
  arg1 = (AkPlayingID)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::DynamicSequence::Close(arg1);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::DynamicSequence::Close(AkPlayingID): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DynamicSequencePlay__SWIG_0(unsigned int jarg1, int jarg2, int jarg3) {
  int jresult ;
  AkPlayingID arg1 ;
  AkTimeMs arg2 ;
  AkCurveInterpolation arg3 ;
  AKRESULT result;
  
  arg1 = (AkPlayingID)jarg1; 
  arg2 = (AkTimeMs)jarg2; 
  arg3 = (AkCurveInterpolation)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::DynamicSequence::Play(arg1,arg2,arg3);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::DynamicSequence::Play(AkPlayingID,AkTimeMs,AkCurveInterpolation): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DynamicSequencePlay__SWIG_1(unsigned int jarg1, int jarg2) {
  int jresult ;
  AkPlayingID arg1 ;
  AkTimeMs arg2 ;
  AKRESULT result;
  
  arg1 = (AkPlayingID)jarg1; 
  arg2 = (AkTimeMs)jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::DynamicSequence::Play(arg1,arg2);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::DynamicSequence::Play(AkPlayingID,AkTimeMs): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DynamicSequencePlay__SWIG_2(unsigned int jarg1) {
  int jresult ;
  AkPlayingID arg1 ;
  AKRESULT result;
  
  arg1 = (AkPlayingID)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::DynamicSequence::Play(arg1);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::DynamicSequence::Play(AkPlayingID): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DynamicSequencePause__SWIG_0(unsigned int jarg1, int jarg2, int jarg3) {
  int jresult ;
  AkPlayingID arg1 ;
  AkTimeMs arg2 ;
  AkCurveInterpolation arg3 ;
  AKRESULT result;
  
  arg1 = (AkPlayingID)jarg1; 
  arg2 = (AkTimeMs)jarg2; 
  arg3 = (AkCurveInterpolation)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::DynamicSequence::Pause(arg1,arg2,arg3);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::DynamicSequence::Pause(AkPlayingID,AkTimeMs,AkCurveInterpolation): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DynamicSequencePause__SWIG_1(unsigned int jarg1, int jarg2) {
  int jresult ;
  AkPlayingID arg1 ;
  AkTimeMs arg2 ;
  AKRESULT result;
  
  arg1 = (AkPlayingID)jarg1; 
  arg2 = (AkTimeMs)jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::DynamicSequence::Pause(arg1,arg2);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::DynamicSequence::Pause(AkPlayingID,AkTimeMs): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DynamicSequencePause__SWIG_2(unsigned int jarg1) {
  int jresult ;
  AkPlayingID arg1 ;
  AKRESULT result;
  
  arg1 = (AkPlayingID)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::DynamicSequence::Pause(arg1);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::DynamicSequence::Pause(AkPlayingID): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DynamicSequenceResume__SWIG_0(unsigned int jarg1, int jarg2, int jarg3) {
  int jresult ;
  AkPlayingID arg1 ;
  AkTimeMs arg2 ;
  AkCurveInterpolation arg3 ;
  AKRESULT result;
  
  arg1 = (AkPlayingID)jarg1; 
  arg2 = (AkTimeMs)jarg2; 
  arg3 = (AkCurveInterpolation)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::DynamicSequence::Resume(arg1,arg2,arg3);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::DynamicSequence::Resume(AkPlayingID,AkTimeMs,AkCurveInterpolation): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DynamicSequenceResume__SWIG_1(unsigned int jarg1, int jarg2) {
  int jresult ;
  AkPlayingID arg1 ;
  AkTimeMs arg2 ;
  AKRESULT result;
  
  arg1 = (AkPlayingID)jarg1; 
  arg2 = (AkTimeMs)jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::DynamicSequence::Resume(arg1,arg2);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::DynamicSequence::Resume(AkPlayingID,AkTimeMs): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DynamicSequenceResume__SWIG_2(unsigned int jarg1) {
  int jresult ;
  AkPlayingID arg1 ;
  AKRESULT result;
  
  arg1 = (AkPlayingID)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::DynamicSequence::Resume(arg1);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::DynamicSequence::Resume(AkPlayingID): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DynamicSequenceStop__SWIG_0(unsigned int jarg1, int jarg2, int jarg3) {
  int jresult ;
  AkPlayingID arg1 ;
  AkTimeMs arg2 ;
  AkCurveInterpolation arg3 ;
  AKRESULT result;
  
  arg1 = (AkPlayingID)jarg1; 
  arg2 = (AkTimeMs)jarg2; 
  arg3 = (AkCurveInterpolation)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::DynamicSequence::Stop(arg1,arg2,arg3);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::DynamicSequence::Stop(AkPlayingID,AkTimeMs,AkCurveInterpolation): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DynamicSequenceStop__SWIG_1(unsigned int jarg1, int jarg2) {
  int jresult ;
  AkPlayingID arg1 ;
  AkTimeMs arg2 ;
  AKRESULT result;
  
  arg1 = (AkPlayingID)jarg1; 
  arg2 = (AkTimeMs)jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::DynamicSequence::Stop(arg1,arg2);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::DynamicSequence::Stop(AkPlayingID,AkTimeMs): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DynamicSequenceStop__SWIG_2(unsigned int jarg1) {
  int jresult ;
  AkPlayingID arg1 ;
  AKRESULT result;
  
  arg1 = (AkPlayingID)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::DynamicSequence::Stop(arg1);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::DynamicSequence::Stop(AkPlayingID): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DynamicSequenceBreak(unsigned int jarg1) {
  int jresult ;
  AkPlayingID arg1 ;
  AKRESULT result;
  
  arg1 = (AkPlayingID)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::DynamicSequence::Break(arg1);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::DynamicSequence::Break(AkPlayingID): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Seek__SWIG_0(unsigned int jarg1, int jarg2, unsigned int jarg3) {
  int jresult ;
  AkPlayingID arg1 ;
  AkTimeMs arg2 ;
  bool arg3 ;
  AKRESULT result;
  
  arg1 = (AkPlayingID)jarg1; 
  arg2 = (AkTimeMs)jarg2; 
  arg3 = jarg3 ? true : false; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::DynamicSequence::Seek(arg1,arg2,arg3);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::DynamicSequence::Seek(AkPlayingID,AkTimeMs,bool): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Seek__SWIG_1(unsigned int jarg1, float jarg2, unsigned int jarg3) {
  int jresult ;
  AkPlayingID arg1 ;
  AkReal32 arg2 ;
  bool arg3 ;
  AKRESULT result;
  
  arg1 = (AkPlayingID)jarg1; 
  arg2 = (AkReal32)jarg2; 
  arg3 = jarg3 ? true : false; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::DynamicSequence::Seek(arg1,arg2,arg3);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::DynamicSequence::Seek(AkPlayingID,AkReal32,bool): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DynamicSequenceGetPauseTimes(unsigned int jarg1, unsigned int * jarg2, unsigned int * jarg3) {
  int jresult ;
  AkPlayingID arg1 ;
  AkUInt32 *arg2 = 0 ;
  AkUInt32 *arg3 = 0 ;
  AKRESULT result;
  
  arg1 = (AkPlayingID)jarg1; 
  arg2 = (AkUInt32 *)jarg2; 
  arg3 = (AkUInt32 *)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::DynamicSequence::GetPauseTimes(arg1,*arg2,*arg3);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::DynamicSequence::GetPauseTimes(AkPlayingID,AkUInt32 &,AkUInt32 &): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DynamicSequenceLockPlaylist(unsigned int jarg1) {
  void * jresult ;
  AkPlayingID arg1 ;
  AK::SoundEngine::DynamicSequence::Playlist *result = 0 ;
  
  arg1 = (AkPlayingID)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AK::SoundEngine::DynamicSequence::Playlist *)AK::SoundEngine::DynamicSequence::LockPlaylist(arg1);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::DynamicSequence::LockPlaylist(AkPlayingID): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return 0; 	
    } 
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DynamicSequenceUnlockPlaylist(unsigned int jarg1) {
  int jresult ;
  AkPlayingID arg1 ;
  AKRESULT result;
  
  arg1 = (AkPlayingID)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::DynamicSequence::UnlockPlaylist(arg1);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::DynamicSequence::UnlockPlaylist(AkPlayingID): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AkOutputSettings__SWIG_0() {
  void * jresult ;
  AkOutputSettings *result = 0 ;
  
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AkOutputSettings *)new AkOutputSettings();  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AkOutputSettings::AkOutputSettings(): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return 0; 	
    } 
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AkOutputSettings__SWIG_1(char * jarg1, unsigned int jarg2, void * jarg3, int jarg4) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  AkUniqueID arg2 ;
  AkChannelConfig arg3 ;
  AkPanningRule arg4 ;
  AkChannelConfig *argp3 ;
  AkOutputSettings *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (AkUniqueID)jarg2; 
  argp3 = (AkChannelConfig *)jarg3; 
  if (!argp3) {
    return 0;
  }
  arg3 = *argp3; 
  arg4 = (AkPanningRule)jarg4; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AkOutputSettings *)new AkOutputSettings((char const *)arg1,arg2,arg3,arg4);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AkOutputSettings::AkOutputSettings(char const *,AkUniqueID,AkChannelConfig,AkPanningRule): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return 0; 	
    } 
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AkOutputSettings__SWIG_2(char * jarg1, unsigned int jarg2, void * jarg3) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  AkUniqueID arg2 ;
  AkChannelConfig arg3 ;
  AkChannelConfig *argp3 ;
  AkOutputSettings *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (AkUniqueID)jarg2; 
  argp3 = (AkChannelConfig *)jarg3; 
  if (!argp3) {
    return 0;
  }
  arg3 = *argp3; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AkOutputSettings *)new AkOutputSettings((char const *)arg1,arg2,arg3);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AkOutputSettings::AkOutputSettings(char const *,AkUniqueID,AkChannelConfig): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return 0; 	
    } 
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AkOutputSettings__SWIG_3(char * jarg1, unsigned int jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  AkUniqueID arg2 ;
  AkOutputSettings *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (AkUniqueID)jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AkOutputSettings *)new AkOutputSettings((char const *)arg1,arg2);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AkOutputSettings::AkOutputSettings(char const *,AkUniqueID): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return 0; 	
    } 
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AkOutputSettings__SWIG_4(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  AkOutputSettings *result = 0 ;
  
  arg1 = (char *)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AkOutputSettings *)new AkOutputSettings((char const *)arg1);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AkOutputSettings::AkOutputSettings(char const *): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return 0; 	
    } 
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkOutputSettings_audioDeviceShareset_set(void * jarg1, unsigned int jarg2) {
  AkOutputSettings *arg1 = (AkOutputSettings *) 0 ;
  AkUniqueID arg2 ;
  
  arg1 = (AkOutputSettings *)jarg1; 
  arg2 = (AkUniqueID)jarg2; 
  if (arg1) (arg1)->audioDeviceShareset = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkOutputSettings_audioDeviceShareset_get(void * jarg1) {
  unsigned int jresult ;
  AkOutputSettings *arg1 = (AkOutputSettings *) 0 ;
  AkUniqueID result;
  
  arg1 = (AkOutputSettings *)jarg1; 
  result = (AkUniqueID) ((arg1)->audioDeviceShareset);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkOutputSettings_idDevice_set(void * jarg1, unsigned int jarg2) {
  AkOutputSettings *arg1 = (AkOutputSettings *) 0 ;
  AkUInt32 arg2 ;
  
  arg1 = (AkOutputSettings *)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  if (arg1) (arg1)->idDevice = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkOutputSettings_idDevice_get(void * jarg1) {
  unsigned int jresult ;
  AkOutputSettings *arg1 = (AkOutputSettings *) 0 ;
  AkUInt32 result;
  
  arg1 = (AkOutputSettings *)jarg1; 
  result = (AkUInt32) ((arg1)->idDevice);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkOutputSettings_ePanningRule_set(void * jarg1, int jarg2) {
  AkOutputSettings *arg1 = (AkOutputSettings *) 0 ;
  AkPanningRule arg2 ;
  
  arg1 = (AkOutputSettings *)jarg1; 
  arg2 = (AkPanningRule)jarg2; 
  if (arg1) (arg1)->ePanningRule = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AkOutputSettings_ePanningRule_get(void * jarg1) {
  int jresult ;
  AkOutputSettings *arg1 = (AkOutputSettings *) 0 ;
  AkPanningRule result;
  
  arg1 = (AkOutputSettings *)jarg1; 
  result = (AkPanningRule) ((arg1)->ePanningRule);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkOutputSettings_channelConfig_set(void * jarg1, void * jarg2) {
  AkOutputSettings *arg1 = (AkOutputSettings *) 0 ;
  AkChannelConfig *arg2 = (AkChannelConfig *) 0 ;
  
  arg1 = (AkOutputSettings *)jarg1; 
  arg2 = (AkChannelConfig *)jarg2; 
  if (arg1) (arg1)->channelConfig = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AkOutputSettings_channelConfig_get(void * jarg1) {
  void * jresult ;
  AkOutputSettings *arg1 = (AkOutputSettings *) 0 ;
  AkChannelConfig *result = 0 ;
  
  arg1 = (AkOutputSettings *)jarg1; 
  result = (AkChannelConfig *)& ((arg1)->channelConfig);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AkOutputSettings(void * jarg1) {
  AkOutputSettings *arg1 = (AkOutputSettings *) 0 ;
  
  arg1 = (AkOutputSettings *)jarg1; 
  {
    delete arg1;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkTaskContext_uIdxThread_set(void * jarg1, unsigned int jarg2) {
  AkTaskContext *arg1 = (AkTaskContext *) 0 ;
  AkUInt32 arg2 ;
  
  arg1 = (AkTaskContext *)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  if (arg1) (arg1)->uIdxThread = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkTaskContext_uIdxThread_get(void * jarg1) {
  unsigned int jresult ;
  AkTaskContext *arg1 = (AkTaskContext *) 0 ;
  AkUInt32 result;
  
  arg1 = (AkTaskContext *)jarg1; 
  result = (AkUInt32) ((arg1)->uIdxThread);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AkTaskContext() {
  void * jresult ;
  AkTaskContext *result = 0 ;
  
  {
    result = (AkTaskContext *)new AkTaskContext();
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AkTaskContext(void * jarg1) {
  AkTaskContext *arg1 = (AkTaskContext *) 0 ;
  
  arg1 = (AkTaskContext *)jarg1; 
  {
    delete arg1;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkInitSettings_uMaxNumPaths_set(void * jarg1, unsigned int jarg2) {
  AkInitSettings *arg1 = (AkInitSettings *) 0 ;
  AkUInt32 arg2 ;
  
  arg1 = (AkInitSettings *)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  if (arg1) (arg1)->uMaxNumPaths = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkInitSettings_uMaxNumPaths_get(void * jarg1) {
  unsigned int jresult ;
  AkInitSettings *arg1 = (AkInitSettings *) 0 ;
  AkUInt32 result;
  
  arg1 = (AkInitSettings *)jarg1; 
  result = (AkUInt32) ((arg1)->uMaxNumPaths);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkInitSettings_uCommandQueueSize_set(void * jarg1, unsigned int jarg2) {
  AkInitSettings *arg1 = (AkInitSettings *) 0 ;
  AkUInt32 arg2 ;
  
  arg1 = (AkInitSettings *)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  if (arg1) (arg1)->uCommandQueueSize = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkInitSettings_uCommandQueueSize_get(void * jarg1) {
  unsigned int jresult ;
  AkInitSettings *arg1 = (AkInitSettings *) 0 ;
  AkUInt32 result;
  
  arg1 = (AkInitSettings *)jarg1; 
  result = (AkUInt32) ((arg1)->uCommandQueueSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkInitSettings_bEnableGameSyncPreparation_set(void * jarg1, unsigned int jarg2) {
  AkInitSettings *arg1 = (AkInitSettings *) 0 ;
  bool arg2 ;
  
  arg1 = (AkInitSettings *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bEnableGameSyncPreparation = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkInitSettings_bEnableGameSyncPreparation_get(void * jarg1) {
  unsigned int jresult ;
  AkInitSettings *arg1 = (AkInitSettings *) 0 ;
  bool result;
  
  arg1 = (AkInitSettings *)jarg1; 
  result = (bool) ((arg1)->bEnableGameSyncPreparation);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkInitSettings_uContinuousPlaybackLookAhead_set(void * jarg1, unsigned int jarg2) {
  AkInitSettings *arg1 = (AkInitSettings *) 0 ;
  AkUInt32 arg2 ;
  
  arg1 = (AkInitSettings *)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  if (arg1) (arg1)->uContinuousPlaybackLookAhead = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkInitSettings_uContinuousPlaybackLookAhead_get(void * jarg1) {
  unsigned int jresult ;
  AkInitSettings *arg1 = (AkInitSettings *) 0 ;
  AkUInt32 result;
  
  arg1 = (AkInitSettings *)jarg1; 
  result = (AkUInt32) ((arg1)->uContinuousPlaybackLookAhead);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkInitSettings_uNumSamplesPerFrame_set(void * jarg1, unsigned int jarg2) {
  AkInitSettings *arg1 = (AkInitSettings *) 0 ;
  AkUInt32 arg2 ;
  
  arg1 = (AkInitSettings *)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  if (arg1) (arg1)->uNumSamplesPerFrame = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkInitSettings_uNumSamplesPerFrame_get(void * jarg1) {
  unsigned int jresult ;
  AkInitSettings *arg1 = (AkInitSettings *) 0 ;
  AkUInt32 result;
  
  arg1 = (AkInitSettings *)jarg1; 
  result = (AkUInt32) ((arg1)->uNumSamplesPerFrame);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkInitSettings_uMonitorQueuePoolSize_set(void * jarg1, unsigned int jarg2) {
  AkInitSettings *arg1 = (AkInitSettings *) 0 ;
  AkUInt32 arg2 ;
  
  arg1 = (AkInitSettings *)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  if (arg1) (arg1)->uMonitorQueuePoolSize = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkInitSettings_uMonitorQueuePoolSize_get(void * jarg1) {
  unsigned int jresult ;
  AkInitSettings *arg1 = (AkInitSettings *) 0 ;
  AkUInt32 result;
  
  arg1 = (AkInitSettings *)jarg1; 
  result = (AkUInt32) ((arg1)->uMonitorQueuePoolSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkInitSettings_settingsMainOutput_set(void * jarg1, void * jarg2) {
  AkInitSettings *arg1 = (AkInitSettings *) 0 ;
  AkOutputSettings *arg2 = (AkOutputSettings *) 0 ;
  
  arg1 = (AkInitSettings *)jarg1; 
  arg2 = (AkOutputSettings *)jarg2; 
  if (arg1) (arg1)->settingsMainOutput = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AkInitSettings_settingsMainOutput_get(void * jarg1) {
  void * jresult ;
  AkInitSettings *arg1 = (AkInitSettings *) 0 ;
  AkOutputSettings *result = 0 ;
  
  arg1 = (AkInitSettings *)jarg1; 
  result = (AkOutputSettings *)& ((arg1)->settingsMainOutput);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkInitSettings_uMaxHardwareTimeoutMs_set(void * jarg1, unsigned int jarg2) {
  AkInitSettings *arg1 = (AkInitSettings *) 0 ;
  AkUInt32 arg2 ;
  
  arg1 = (AkInitSettings *)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  if (arg1) (arg1)->uMaxHardwareTimeoutMs = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkInitSettings_uMaxHardwareTimeoutMs_get(void * jarg1) {
  unsigned int jresult ;
  AkInitSettings *arg1 = (AkInitSettings *) 0 ;
  AkUInt32 result;
  
  arg1 = (AkInitSettings *)jarg1; 
  result = (AkUInt32) ((arg1)->uMaxHardwareTimeoutMs);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkInitSettings_bUseSoundBankMgrThread_set(void * jarg1, unsigned int jarg2) {
  AkInitSettings *arg1 = (AkInitSettings *) 0 ;
  bool arg2 ;
  
  arg1 = (AkInitSettings *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bUseSoundBankMgrThread = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkInitSettings_bUseSoundBankMgrThread_get(void * jarg1) {
  unsigned int jresult ;
  AkInitSettings *arg1 = (AkInitSettings *) 0 ;
  bool result;
  
  arg1 = (AkInitSettings *)jarg1; 
  result = (bool) ((arg1)->bUseSoundBankMgrThread);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkInitSettings_bUseLEngineThread_set(void * jarg1, unsigned int jarg2) {
  AkInitSettings *arg1 = (AkInitSettings *) 0 ;
  bool arg2 ;
  
  arg1 = (AkInitSettings *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bUseLEngineThread = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkInitSettings_bUseLEngineThread_get(void * jarg1) {
  unsigned int jresult ;
  AkInitSettings *arg1 = (AkInitSettings *) 0 ;
  bool result;
  
  arg1 = (AkInitSettings *)jarg1; 
  result = (bool) ((arg1)->bUseLEngineThread);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkInitSettings_szPluginDLLPath_set(void * jarg1, wchar_t* jarg2) {
  AkInitSettings *arg1 = (AkInitSettings *) 0 ;
  AkOSChar *arg2 = (AkOSChar *) 0 ;
  
  arg1 = (AkInitSettings *)jarg1; 
  arg2 = (AkOSChar *)jarg2; 
  {
    delete [] arg1->szPluginDLLPath;
    if (arg2) {
      arg1->szPluginDLLPath = (AkOSChar *) (new wchar_t[wcslen((const wchar_t *)arg2)+1]);
      wcscpy((wchar_t *)arg1->szPluginDLLPath, (const wchar_t *)arg2);
    } else {
      arg1->szPluginDLLPath = 0;
    }
  }
}


SWIGEXPORT wchar_t* SWIGSTDCALL CSharp_AkInitSettings_szPluginDLLPath_get(void * jarg1) {
  wchar_t* jresult ;
  AkInitSettings *arg1 = (AkInitSettings *) 0 ;
  AkOSChar *result = 0 ;
  
  arg1 = (AkInitSettings *)jarg1; 
  result = (AkOSChar *) ((arg1)->szPluginDLLPath);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkInitSettings_eFloorPlane_set(void * jarg1, int jarg2) {
  AkInitSettings *arg1 = (AkInitSettings *) 0 ;
  AkFloorPlane arg2 ;
  
  arg1 = (AkInitSettings *)jarg1; 
  arg2 = (AkFloorPlane)jarg2; 
  if (arg1) (arg1)->eFloorPlane = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AkInitSettings_eFloorPlane_get(void * jarg1) {
  int jresult ;
  AkInitSettings *arg1 = (AkInitSettings *) 0 ;
  AkFloorPlane result;
  
  arg1 = (AkInitSettings *)jarg1; 
  result = (AkFloorPlane) ((arg1)->eFloorPlane);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkInitSettings_fGameUnitsToMeters_set(void * jarg1, float jarg2) {
  AkInitSettings *arg1 = (AkInitSettings *) 0 ;
  AkReal32 arg2 ;
  
  arg1 = (AkInitSettings *)jarg1; 
  arg2 = (AkReal32)jarg2; 
  if (arg1) (arg1)->fGameUnitsToMeters = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AkInitSettings_fGameUnitsToMeters_get(void * jarg1) {
  float jresult ;
  AkInitSettings *arg1 = (AkInitSettings *) 0 ;
  AkReal32 result;
  
  arg1 = (AkInitSettings *)jarg1; 
  result = (AkReal32) ((arg1)->fGameUnitsToMeters);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkInitSettings_uBankReadBufferSize_set(void * jarg1, unsigned int jarg2) {
  AkInitSettings *arg1 = (AkInitSettings *) 0 ;
  AkUInt32 arg2 ;
  
  arg1 = (AkInitSettings *)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  if (arg1) (arg1)->uBankReadBufferSize = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkInitSettings_uBankReadBufferSize_get(void * jarg1) {
  unsigned int jresult ;
  AkInitSettings *arg1 = (AkInitSettings *) 0 ;
  AkUInt32 result;
  
  arg1 = (AkInitSettings *)jarg1; 
  result = (AkUInt32) ((arg1)->uBankReadBufferSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkInitSettings_fDebugOutOfRangeLimit_set(void * jarg1, float jarg2) {
  AkInitSettings *arg1 = (AkInitSettings *) 0 ;
  AkReal32 arg2 ;
  
  arg1 = (AkInitSettings *)jarg1; 
  arg2 = (AkReal32)jarg2; 
  if (arg1) (arg1)->fDebugOutOfRangeLimit = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AkInitSettings_fDebugOutOfRangeLimit_get(void * jarg1) {
  float jresult ;
  AkInitSettings *arg1 = (AkInitSettings *) 0 ;
  AkReal32 result;
  
  arg1 = (AkInitSettings *)jarg1; 
  result = (AkReal32) ((arg1)->fDebugOutOfRangeLimit);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkInitSettings_bDebugOutOfRangeCheckEnabled_set(void * jarg1, unsigned int jarg2) {
  AkInitSettings *arg1 = (AkInitSettings *) 0 ;
  bool arg2 ;
  
  arg1 = (AkInitSettings *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bDebugOutOfRangeCheckEnabled = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkInitSettings_bDebugOutOfRangeCheckEnabled_get(void * jarg1) {
  unsigned int jresult ;
  AkInitSettings *arg1 = (AkInitSettings *) 0 ;
  bool result;
  
  arg1 = (AkInitSettings *)jarg1; 
  result = (bool) ((arg1)->bDebugOutOfRangeCheckEnabled);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AkInitSettings(void * jarg1) {
  AkInitSettings *arg1 = (AkInitSettings *) 0 ;
  
  arg1 = (AkInitSettings *)jarg1; 
  {
    delete arg1;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkSourceSettings_sourceID_set(void * jarg1, unsigned int jarg2) {
  AkSourceSettings *arg1 = (AkSourceSettings *) 0 ;
  AkUniqueID arg2 ;
  
  arg1 = (AkSourceSettings *)jarg1; 
  arg2 = (AkUniqueID)jarg2; 
  if (arg1) (arg1)->sourceID = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkSourceSettings_sourceID_get(void * jarg1) {
  unsigned int jresult ;
  AkSourceSettings *arg1 = (AkSourceSettings *) 0 ;
  AkUniqueID result;
  
  arg1 = (AkSourceSettings *)jarg1; 
  result = (AkUniqueID) ((arg1)->sourceID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkSourceSettings_pMediaMemory_set(void * jarg1, AkUInt8 * jarg2) {
  AkSourceSettings *arg1 = (AkSourceSettings *) 0 ;
  AkUInt8 *arg2 = (AkUInt8 *) 0 ;
  
  arg1 = (AkSourceSettings *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->pMediaMemory = arg2;
}


SWIGEXPORT AkUInt8 * SWIGSTDCALL CSharp_AkSourceSettings_pMediaMemory_get(void * jarg1) {
  AkUInt8 * jresult ;
  AkSourceSettings *arg1 = (AkSourceSettings *) 0 ;
  AkUInt8 *result = 0 ;
  
  arg1 = (AkSourceSettings *)jarg1; 
  result = (AkUInt8 *) ((arg1)->pMediaMemory);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkSourceSettings_uMediaSize_set(void * jarg1, unsigned int jarg2) {
  AkSourceSettings *arg1 = (AkSourceSettings *) 0 ;
  AkUInt32 arg2 ;
  
  arg1 = (AkSourceSettings *)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  if (arg1) (arg1)->uMediaSize = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkSourceSettings_uMediaSize_get(void * jarg1) {
  unsigned int jresult ;
  AkSourceSettings *arg1 = (AkSourceSettings *) 0 ;
  AkUInt32 result;
  
  arg1 = (AkSourceSettings *)jarg1; 
  result = (AkUInt32) ((arg1)->uMediaSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkSourceSettings_Clear(void * jarg1) {
  AkSourceSettings *arg1 = (AkSourceSettings *) 0 ;
  
  arg1 = (AkSourceSettings *)jarg1; 
  AkSourceSettings_Clear(arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_AkSourceSettings_GetSizeOf() {
  int jresult ;
  int result;
  
  result = (int)AkSourceSettings_GetSizeOf();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkSourceSettings_Clone(void * jarg1, void * jarg2) {
  AkSourceSettings *arg1 = (AkSourceSettings *) 0 ;
  AkSourceSettings *arg2 = 0 ;
  
  arg1 = (AkSourceSettings *)jarg1; 
  arg2 = (AkSourceSettings *)jarg2;
  if (!arg2) {
    return ;
  } 
  AkSourceSettings_Clone(arg1,(AkSourceSettings const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AkSourceSettings() {
  void * jresult ;
  AkSourceSettings *result = 0 ;
  
  {
    result = (AkSourceSettings *)new AkSourceSettings();
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AkSourceSettings(void * jarg1) {
  AkSourceSettings *arg1 = (AkSourceSettings *) 0 ;
  
  arg1 = (AkSourceSettings *)jarg1; 
  {
    delete arg1;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IsInitialized() {
  unsigned int jresult ;
  bool result;
  
  {
    result = (bool)AK::SoundEngine::IsInitialized();
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetAudioSettings(void * jarg1) {
  int jresult ;
  AkAudioSettings *arg1 = 0 ;
  AKRESULT result;
  
  arg1 = (AkAudioSettings *)jarg1;
  if (!arg1) {
    return AK_Fail;
  } 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::GetAudioSettings(*arg1);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::GetAudioSettings(AkAudioSettings &): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GetSpeakerConfiguration__SWIG_0(unsigned long long jarg1) {
  void * jresult ;
  AkOutputDeviceID arg1 ;
  AkChannelConfig result;
  
  arg1 = (AkOutputDeviceID)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = AK::SoundEngine::GetSpeakerConfiguration(arg1);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::GetSpeakerConfiguration(AkOutputDeviceID): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return 0; 	
    } 
  }
  jresult = new AkChannelConfig((const AkChannelConfig &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GetSpeakerConfiguration__SWIG_1() {
  void * jresult ;
  AkChannelConfig result;
  
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = AK::SoundEngine::GetSpeakerConfiguration();  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::GetSpeakerConfiguration(): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return 0; 	
    } 
  }
  jresult = new AkChannelConfig((const AkChannelConfig &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetOutputDeviceConfiguration(unsigned long long jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  AkOutputDeviceID arg1 ;
  AkChannelConfig *arg2 = 0 ;
  Ak3DAudioSinkCapabilities *arg3 = 0 ;
  AKRESULT result;
  
  arg1 = (AkOutputDeviceID)jarg1; 
  arg2 = (AkChannelConfig *)jarg2;
  if (!arg2) {
    return AK_Fail;
  } 
  arg3 = (Ak3DAudioSinkCapabilities *)jarg3;
  if (!arg3) {
    return AK_Fail;
  } 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::GetOutputDeviceConfiguration(arg1,*arg2,*arg3);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::GetOutputDeviceConfiguration(AkOutputDeviceID,AkChannelConfig &,Ak3DAudioSinkCapabilities &): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetPanningRule__SWIG_0(int * jarg1, unsigned long long jarg2) {
  int jresult ;
  AkPanningRule *arg1 = 0 ;
  AkOutputDeviceID arg2 ;
  AKRESULT result;
  
  arg1 = (AkPanningRule *)jarg1; 
  arg2 = (AkOutputDeviceID)jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::GetPanningRule(*arg1,arg2);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::GetPanningRule(AkPanningRule &,AkOutputDeviceID): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetPanningRule__SWIG_1(int * jarg1) {
  int jresult ;
  AkPanningRule *arg1 = 0 ;
  AKRESULT result;
  
  arg1 = (AkPanningRule *)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::GetPanningRule(*arg1);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::GetPanningRule(AkPanningRule &): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetPanningRule__SWIG_0(int jarg1, unsigned long long jarg2) {
  int jresult ;
  AkPanningRule arg1 ;
  AkOutputDeviceID arg2 ;
  AKRESULT result;
  
  arg1 = (AkPanningRule)jarg1; 
  arg2 = (AkOutputDeviceID)jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::SetPanningRule(arg1,arg2);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::SetPanningRule(AkPanningRule,AkOutputDeviceID): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetPanningRule__SWIG_1(int jarg1) {
  int jresult ;
  AkPanningRule arg1 ;
  AKRESULT result;
  
  arg1 = (AkPanningRule)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::SetPanningRule(arg1);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::SetPanningRule(AkPanningRule): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetSpeakerAngles__SWIG_0(float* jarg1, unsigned int * jarg2, float * jarg3, unsigned long long jarg4) {
  int jresult ;
  AkReal32 *arg1 = (AkReal32 *) 0 ;
  AkUInt32 *arg2 = 0 ;
  AkReal32 *arg3 = 0 ;
  AkOutputDeviceID arg4 ;
  AKRESULT result;
  
  arg1 = jarg1;
  arg2 = (AkUInt32 *)jarg2; 
  arg3 = (AkReal32 *)jarg3; 
  arg4 = (AkOutputDeviceID)jarg4; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::GetSpeakerAngles(arg1,*arg2,*arg3,arg4);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::GetSpeakerAngles(AkReal32 *,AkUInt32 &,AkReal32 &,AkOutputDeviceID): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetSpeakerAngles__SWIG_1(float* jarg1, unsigned int * jarg2, float * jarg3) {
  int jresult ;
  AkReal32 *arg1 = (AkReal32 *) 0 ;
  AkUInt32 *arg2 = 0 ;
  AkReal32 *arg3 = 0 ;
  AKRESULT result;
  
  arg1 = jarg1;
  arg2 = (AkUInt32 *)jarg2; 
  arg3 = (AkReal32 *)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::GetSpeakerAngles(arg1,*arg2,*arg3);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::GetSpeakerAngles(AkReal32 *,AkUInt32 &,AkReal32 &): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetSpeakerAngles__SWIG_0(float* jarg1, unsigned int jarg2, float jarg3, unsigned long long jarg4) {
  int jresult ;
  AkReal32 *arg1 = (AkReal32 *) 0 ;
  AkUInt32 arg2 ;
  AkReal32 arg3 ;
  AkOutputDeviceID arg4 ;
  AKRESULT result;
  
  arg1 = jarg1;
  arg2 = (AkUInt32)jarg2; 
  arg3 = (AkReal32)jarg3; 
  arg4 = (AkOutputDeviceID)jarg4; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::SetSpeakerAngles((float const *)arg1,arg2,arg3,arg4);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::SetSpeakerAngles(AkReal32 const *,AkUInt32,AkReal32,AkOutputDeviceID): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetSpeakerAngles__SWIG_1(float* jarg1, unsigned int jarg2, float jarg3) {
  int jresult ;
  AkReal32 *arg1 = (AkReal32 *) 0 ;
  AkUInt32 arg2 ;
  AkReal32 arg3 ;
  AKRESULT result;
  
  arg1 = jarg1;
  arg2 = (AkUInt32)jarg2; 
  arg3 = (AkReal32)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::SetSpeakerAngles((float const *)arg1,arg2,arg3);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::SetSpeakerAngles(AkReal32 const *,AkUInt32,AkReal32): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetVolumeThreshold(float jarg1) {
  int jresult ;
  AkReal32 arg1 ;
  AKRESULT result;
  
  arg1 = (AkReal32)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::SetVolumeThreshold(arg1);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::SetVolumeThreshold(AkReal32): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetMaxNumVoicesLimit(unsigned short jarg1) {
  int jresult ;
  AkUInt16 arg1 ;
  AKRESULT result;
  
  arg1 = (AkUInt16)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::SetMaxNumVoicesLimit(arg1);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::SetMaxNumVoicesLimit(AkUInt16): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RenderAudio__SWIG_0(unsigned int jarg1) {
  int jresult ;
  bool arg1 ;
  AKRESULT result;
  
  arg1 = jarg1 ? true : false; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::RenderAudio(arg1);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::RenderAudio(bool): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RenderAudio__SWIG_1() {
  int jresult ;
  AKRESULT result;
  
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::RenderAudio();  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::RenderAudio(): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RegisterPluginDLL__SWIG_0(wchar_t* jarg1, wchar_t* jarg2) {
  int jresult ;
  AkOSChar *arg1 = (AkOSChar *) 0 ;
  AkOSChar *arg2 = (AkOSChar *) 0 ;
  AKRESULT result;
  
  arg1 = (AkOSChar *)jarg1; 
  arg2 = (AkOSChar *)jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::RegisterPluginDLL((wchar_t const *)arg1,(wchar_t const *)arg2);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::RegisterPluginDLL(AkOSChar const *,AkOSChar const *): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RegisterPluginDLL__SWIG_1(wchar_t* jarg1) {
  int jresult ;
  AkOSChar *arg1 = (AkOSChar *) 0 ;
  AKRESULT result;
  
  arg1 = (AkOSChar *)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::RegisterPluginDLL((wchar_t const *)arg1);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::RegisterPluginDLL(AkOSChar const *): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GetIDFromString__SWIG_0(wchar_t* jarg1) {
  unsigned int jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  AkUInt32 result;
  
  arg1 = (wchar_t *)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AkUInt32)AK::SoundEngine::GetIDFromString((wchar_t const *)arg1);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::GetIDFromString(wchar_t const *): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return 0; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PostEvent__SWIG_0(unsigned int jarg1, AkGameObjectID jarg2, unsigned int jarg3, void * jarg4, void * jarg5, unsigned int jarg6, void * jarg7, unsigned int jarg8) {
  unsigned int jresult ;
  AkUniqueID arg1 ;
  AkGameObjectID arg2 ;
  AkUInt32 arg3 ;
  AkCallbackFunc arg4 = (AkCallbackFunc) 0 ;
  void *arg5 = (void *) 0 ;
  AkUInt32 arg6 ;
  AkExternalSourceInfo *arg7 = (AkExternalSourceInfo *) 0 ;
  AkPlayingID arg8 ;
  AkPlayingID result;
  
  arg1 = (AkUniqueID)jarg1; 
  arg2 = jarg2; 
  arg3 = (AkUInt32)jarg3; 
  arg4 = jarg4 != NULL ? AkCallbackSerializer::EventCallback : NULL; 
  arg5 = jarg5; 
  arg6 = (AkUInt32)jarg6; 
  arg7 = (AkExternalSourceInfo *)jarg7; 
  arg8 = (AkPlayingID)jarg8; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AkPlayingID)AK::SoundEngine::PostEvent(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::PostEvent(AkUniqueID,AkGameObjectID,AkUInt32,AkCallbackFunc,void *,AkUInt32,AkExternalSourceInfo *,AkPlayingID): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_INVALID_PLAYING_ID; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PostEvent__SWIG_1(unsigned int jarg1, AkGameObjectID jarg2, unsigned int jarg3, void * jarg4, void * jarg5, unsigned int jarg6, void * jarg7) {
  unsigned int jresult ;
  AkUniqueID arg1 ;
  AkGameObjectID arg2 ;
  AkUInt32 arg3 ;
  AkCallbackFunc arg4 = (AkCallbackFunc) 0 ;
  void *arg5 = (void *) 0 ;
  AkUInt32 arg6 ;
  AkExternalSourceInfo *arg7 = (AkExternalSourceInfo *) 0 ;
  AkPlayingID result;
  
  arg1 = (AkUniqueID)jarg1; 
  arg2 = jarg2; 
  arg3 = (AkUInt32)jarg3; 
  arg4 = jarg4 != NULL ? AkCallbackSerializer::EventCallback : NULL; 
  arg5 = jarg5; 
  arg6 = (AkUInt32)jarg6; 
  arg7 = (AkExternalSourceInfo *)jarg7; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AkPlayingID)AK::SoundEngine::PostEvent(arg1,arg2,arg3,arg4,arg5,arg6,arg7);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::PostEvent(AkUniqueID,AkGameObjectID,AkUInt32,AkCallbackFunc,void *,AkUInt32,AkExternalSourceInfo *): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_INVALID_PLAYING_ID; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PostEvent__SWIG_2(unsigned int jarg1, AkGameObjectID jarg2, unsigned int jarg3, void * jarg4, void * jarg5) {
  unsigned int jresult ;
  AkUniqueID arg1 ;
  AkGameObjectID arg2 ;
  AkUInt32 arg3 ;
  AkCallbackFunc arg4 = (AkCallbackFunc) 0 ;
  void *arg5 = (void *) 0 ;
  AkPlayingID result;
  
  arg1 = (AkUniqueID)jarg1; 
  arg2 = jarg2; 
  arg3 = (AkUInt32)jarg3; 
  arg4 = jarg4 != NULL ? AkCallbackSerializer::EventCallback : NULL; 
  arg5 = jarg5; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AkPlayingID)AK::SoundEngine::PostEvent(arg1,arg2,arg3,arg4,arg5);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::PostEvent(AkUniqueID,AkGameObjectID,AkUInt32,AkCallbackFunc,void *): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_INVALID_PLAYING_ID; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PostEvent__SWIG_3(unsigned int jarg1, AkGameObjectID jarg2) {
  unsigned int jresult ;
  AkUniqueID arg1 ;
  AkGameObjectID arg2 ;
  AkPlayingID result;
  
  arg1 = (AkUniqueID)jarg1; 
  arg2 = jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AkPlayingID)AK::SoundEngine::PostEvent(arg1,arg2);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::PostEvent(AkUniqueID,AkGameObjectID): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_INVALID_PLAYING_ID; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PostEvent__SWIG_4(wchar_t* jarg1, AkGameObjectID jarg2, unsigned int jarg3, void * jarg4, void * jarg5, unsigned int jarg6, void * jarg7, unsigned int jarg8) {
  unsigned int jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  AkGameObjectID arg2 ;
  AkUInt32 arg3 ;
  AkCallbackFunc arg4 = (AkCallbackFunc) 0 ;
  void *arg5 = (void *) 0 ;
  AkUInt32 arg6 ;
  AkExternalSourceInfo *arg7 = (AkExternalSourceInfo *) 0 ;
  AkPlayingID arg8 ;
  AkPlayingID result;
  
  arg1 = (wchar_t *)jarg1; 
  arg2 = jarg2; 
  arg3 = (AkUInt32)jarg3; 
  arg4 = jarg4 != NULL ? AkCallbackSerializer::EventCallback : NULL; 
  arg5 = jarg5; 
  arg6 = (AkUInt32)jarg6; 
  arg7 = (AkExternalSourceInfo *)jarg7; 
  arg8 = (AkPlayingID)jarg8; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AkPlayingID)AK::SoundEngine::PostEvent((wchar_t const *)arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::PostEvent(wchar_t const *,AkGameObjectID,AkUInt32,AkCallbackFunc,void *,AkUInt32,AkExternalSourceInfo *,AkPlayingID): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_INVALID_PLAYING_ID; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PostEvent__SWIG_5(wchar_t* jarg1, AkGameObjectID jarg2, unsigned int jarg3, void * jarg4, void * jarg5, unsigned int jarg6, void * jarg7) {
  unsigned int jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  AkGameObjectID arg2 ;
  AkUInt32 arg3 ;
  AkCallbackFunc arg4 = (AkCallbackFunc) 0 ;
  void *arg5 = (void *) 0 ;
  AkUInt32 arg6 ;
  AkExternalSourceInfo *arg7 = (AkExternalSourceInfo *) 0 ;
  AkPlayingID result;
  
  arg1 = (wchar_t *)jarg1; 
  arg2 = jarg2; 
  arg3 = (AkUInt32)jarg3; 
  arg4 = jarg4 != NULL ? AkCallbackSerializer::EventCallback : NULL; 
  arg5 = jarg5; 
  arg6 = (AkUInt32)jarg6; 
  arg7 = (AkExternalSourceInfo *)jarg7; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AkPlayingID)AK::SoundEngine::PostEvent((wchar_t const *)arg1,arg2,arg3,arg4,arg5,arg6,arg7);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::PostEvent(wchar_t const *,AkGameObjectID,AkUInt32,AkCallbackFunc,void *,AkUInt32,AkExternalSourceInfo *): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_INVALID_PLAYING_ID; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PostEvent__SWIG_6(wchar_t* jarg1, AkGameObjectID jarg2, unsigned int jarg3, void * jarg4, void * jarg5) {
  unsigned int jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  AkGameObjectID arg2 ;
  AkUInt32 arg3 ;
  AkCallbackFunc arg4 = (AkCallbackFunc) 0 ;
  void *arg5 = (void *) 0 ;
  AkPlayingID result;
  
  arg1 = (wchar_t *)jarg1; 
  arg2 = jarg2; 
  arg3 = (AkUInt32)jarg3; 
  arg4 = jarg4 != NULL ? AkCallbackSerializer::EventCallback : NULL; 
  arg5 = jarg5; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AkPlayingID)AK::SoundEngine::PostEvent((wchar_t const *)arg1,arg2,arg3,arg4,arg5);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::PostEvent(wchar_t const *,AkGameObjectID,AkUInt32,AkCallbackFunc,void *): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_INVALID_PLAYING_ID; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PostEvent__SWIG_7(wchar_t* jarg1, AkGameObjectID jarg2) {
  unsigned int jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  AkGameObjectID arg2 ;
  AkPlayingID result;
  
  arg1 = (wchar_t *)jarg1; 
  arg2 = jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AkPlayingID)AK::SoundEngine::PostEvent((wchar_t const *)arg1,arg2);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::PostEvent(wchar_t const *,AkGameObjectID): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_INVALID_PLAYING_ID; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ExecuteActionOnEvent__SWIG_0(unsigned int jarg1, int jarg2, AkGameObjectID jarg3, int jarg4, int jarg5, unsigned int jarg6) {
  int jresult ;
  AkUniqueID arg1 ;
  AK::SoundEngine::AkActionOnEventType arg2 ;
  AkGameObjectID arg3 ;
  AkTimeMs arg4 ;
  AkCurveInterpolation arg5 ;
  AkPlayingID arg6 ;
  AKRESULT result;
  
  arg1 = (AkUniqueID)jarg1; 
  arg2 = (AK::SoundEngine::AkActionOnEventType)jarg2; 
  arg3 = jarg3; 
  arg4 = (AkTimeMs)jarg4; 
  arg5 = (AkCurveInterpolation)jarg5; 
  arg6 = (AkPlayingID)jarg6; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::ExecuteActionOnEvent(arg1,arg2,arg3,arg4,arg5,arg6);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::ExecuteActionOnEvent(AkUniqueID,AK::SoundEngine::AkActionOnEventType,AkGameObjectID,AkTimeMs,AkCurveInterpolation,AkPlayingID): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ExecuteActionOnEvent__SWIG_1(unsigned int jarg1, int jarg2, AkGameObjectID jarg3, int jarg4, int jarg5) {
  int jresult ;
  AkUniqueID arg1 ;
  AK::SoundEngine::AkActionOnEventType arg2 ;
  AkGameObjectID arg3 ;
  AkTimeMs arg4 ;
  AkCurveInterpolation arg5 ;
  AKRESULT result;
  
  arg1 = (AkUniqueID)jarg1; 
  arg2 = (AK::SoundEngine::AkActionOnEventType)jarg2; 
  arg3 = jarg3; 
  arg4 = (AkTimeMs)jarg4; 
  arg5 = (AkCurveInterpolation)jarg5; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::ExecuteActionOnEvent(arg1,arg2,arg3,arg4,arg5);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::ExecuteActionOnEvent(AkUniqueID,AK::SoundEngine::AkActionOnEventType,AkGameObjectID,AkTimeMs,AkCurveInterpolation): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ExecuteActionOnEvent__SWIG_2(unsigned int jarg1, int jarg2, AkGameObjectID jarg3, int jarg4) {
  int jresult ;
  AkUniqueID arg1 ;
  AK::SoundEngine::AkActionOnEventType arg2 ;
  AkGameObjectID arg3 ;
  AkTimeMs arg4 ;
  AKRESULT result;
  
  arg1 = (AkUniqueID)jarg1; 
  arg2 = (AK::SoundEngine::AkActionOnEventType)jarg2; 
  arg3 = jarg3; 
  arg4 = (AkTimeMs)jarg4; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::ExecuteActionOnEvent(arg1,arg2,arg3,arg4);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::ExecuteActionOnEvent(AkUniqueID,AK::SoundEngine::AkActionOnEventType,AkGameObjectID,AkTimeMs): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ExecuteActionOnEvent__SWIG_3(unsigned int jarg1, int jarg2, AkGameObjectID jarg3) {
  int jresult ;
  AkUniqueID arg1 ;
  AK::SoundEngine::AkActionOnEventType arg2 ;
  AkGameObjectID arg3 ;
  AKRESULT result;
  
  arg1 = (AkUniqueID)jarg1; 
  arg2 = (AK::SoundEngine::AkActionOnEventType)jarg2; 
  arg3 = jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::ExecuteActionOnEvent(arg1,arg2,arg3);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::ExecuteActionOnEvent(AkUniqueID,AK::SoundEngine::AkActionOnEventType,AkGameObjectID): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ExecuteActionOnEvent__SWIG_4(unsigned int jarg1, int jarg2) {
  int jresult ;
  AkUniqueID arg1 ;
  AK::SoundEngine::AkActionOnEventType arg2 ;
  AKRESULT result;
  
  arg1 = (AkUniqueID)jarg1; 
  arg2 = (AK::SoundEngine::AkActionOnEventType)jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::ExecuteActionOnEvent(arg1,arg2);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::ExecuteActionOnEvent(AkUniqueID,AK::SoundEngine::AkActionOnEventType): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ExecuteActionOnEvent__SWIG_5(wchar_t* jarg1, int jarg2, AkGameObjectID jarg3, int jarg4, int jarg5, unsigned int jarg6) {
  int jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  AK::SoundEngine::AkActionOnEventType arg2 ;
  AkGameObjectID arg3 ;
  AkTimeMs arg4 ;
  AkCurveInterpolation arg5 ;
  AkPlayingID arg6 ;
  AKRESULT result;
  
  arg1 = (wchar_t *)jarg1; 
  arg2 = (AK::SoundEngine::AkActionOnEventType)jarg2; 
  arg3 = jarg3; 
  arg4 = (AkTimeMs)jarg4; 
  arg5 = (AkCurveInterpolation)jarg5; 
  arg6 = (AkPlayingID)jarg6; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::ExecuteActionOnEvent((wchar_t const *)arg1,arg2,arg3,arg4,arg5,arg6);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::ExecuteActionOnEvent(wchar_t const *,AK::SoundEngine::AkActionOnEventType,AkGameObjectID,AkTimeMs,AkCurveInterpolation,AkPlayingID): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ExecuteActionOnEvent__SWIG_6(wchar_t* jarg1, int jarg2, AkGameObjectID jarg3, int jarg4, int jarg5) {
  int jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  AK::SoundEngine::AkActionOnEventType arg2 ;
  AkGameObjectID arg3 ;
  AkTimeMs arg4 ;
  AkCurveInterpolation arg5 ;
  AKRESULT result;
  
  arg1 = (wchar_t *)jarg1; 
  arg2 = (AK::SoundEngine::AkActionOnEventType)jarg2; 
  arg3 = jarg3; 
  arg4 = (AkTimeMs)jarg4; 
  arg5 = (AkCurveInterpolation)jarg5; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::ExecuteActionOnEvent((wchar_t const *)arg1,arg2,arg3,arg4,arg5);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::ExecuteActionOnEvent(wchar_t const *,AK::SoundEngine::AkActionOnEventType,AkGameObjectID,AkTimeMs,AkCurveInterpolation): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ExecuteActionOnEvent__SWIG_7(wchar_t* jarg1, int jarg2, AkGameObjectID jarg3, int jarg4) {
  int jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  AK::SoundEngine::AkActionOnEventType arg2 ;
  AkGameObjectID arg3 ;
  AkTimeMs arg4 ;
  AKRESULT result;
  
  arg1 = (wchar_t *)jarg1; 
  arg2 = (AK::SoundEngine::AkActionOnEventType)jarg2; 
  arg3 = jarg3; 
  arg4 = (AkTimeMs)jarg4; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::ExecuteActionOnEvent((wchar_t const *)arg1,arg2,arg3,arg4);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::ExecuteActionOnEvent(wchar_t const *,AK::SoundEngine::AkActionOnEventType,AkGameObjectID,AkTimeMs): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ExecuteActionOnEvent__SWIG_8(wchar_t* jarg1, int jarg2, AkGameObjectID jarg3) {
  int jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  AK::SoundEngine::AkActionOnEventType arg2 ;
  AkGameObjectID arg3 ;
  AKRESULT result;
  
  arg1 = (wchar_t *)jarg1; 
  arg2 = (AK::SoundEngine::AkActionOnEventType)jarg2; 
  arg3 = jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::ExecuteActionOnEvent((wchar_t const *)arg1,arg2,arg3);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::ExecuteActionOnEvent(wchar_t const *,AK::SoundEngine::AkActionOnEventType,AkGameObjectID): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ExecuteActionOnEvent__SWIG_9(wchar_t* jarg1, int jarg2) {
  int jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  AK::SoundEngine::AkActionOnEventType arg2 ;
  AKRESULT result;
  
  arg1 = (wchar_t *)jarg1; 
  arg2 = (AK::SoundEngine::AkActionOnEventType)jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::ExecuteActionOnEvent((wchar_t const *)arg1,arg2);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::ExecuteActionOnEvent(wchar_t const *,AK::SoundEngine::AkActionOnEventType): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PostMIDIOnEvent__SWIG_0(unsigned int jarg1, AkGameObjectID jarg2, void * jarg3, unsigned short jarg4, unsigned int jarg5, unsigned int jarg6, void * jarg7, void * jarg8, unsigned int jarg9) {
  unsigned int jresult ;
  AkUniqueID arg1 ;
  AkGameObjectID arg2 ;
  AkMIDIPost *arg3 = (AkMIDIPost *) 0 ;
  AkUInt16 arg4 ;
  bool arg5 ;
  AkUInt32 arg6 ;
  AkCallbackFunc arg7 = (AkCallbackFunc) 0 ;
  void *arg8 = (void *) 0 ;
  AkPlayingID arg9 ;
  AkPlayingID result;
  
  arg1 = (AkUniqueID)jarg1; 
  arg2 = jarg2; 
  arg3 = (AkMIDIPost *)jarg3; 
  arg4 = (AkUInt16)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = (AkUInt32)jarg6; 
  arg7 = jarg7 != NULL ? AkCallbackSerializer::EventCallback : NULL; 
  arg8 = jarg8; 
  arg9 = (AkPlayingID)jarg9; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AkPlayingID)AK::SoundEngine::PostMIDIOnEvent(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::PostMIDIOnEvent(AkUniqueID,AkGameObjectID,AkMIDIPost *,AkUInt16,bool,AkUInt32,AkCallbackFunc,void *,AkPlayingID): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_INVALID_PLAYING_ID; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PostMIDIOnEvent__SWIG_1(unsigned int jarg1, AkGameObjectID jarg2, void * jarg3, unsigned short jarg4, unsigned int jarg5, unsigned int jarg6, void * jarg7, void * jarg8) {
  unsigned int jresult ;
  AkUniqueID arg1 ;
  AkGameObjectID arg2 ;
  AkMIDIPost *arg3 = (AkMIDIPost *) 0 ;
  AkUInt16 arg4 ;
  bool arg5 ;
  AkUInt32 arg6 ;
  AkCallbackFunc arg7 = (AkCallbackFunc) 0 ;
  void *arg8 = (void *) 0 ;
  AkPlayingID result;
  
  arg1 = (AkUniqueID)jarg1; 
  arg2 = jarg2; 
  arg3 = (AkMIDIPost *)jarg3; 
  arg4 = (AkUInt16)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = (AkUInt32)jarg6; 
  arg7 = jarg7 != NULL ? AkCallbackSerializer::EventCallback : NULL; 
  arg8 = jarg8; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AkPlayingID)AK::SoundEngine::PostMIDIOnEvent(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::PostMIDIOnEvent(AkUniqueID,AkGameObjectID,AkMIDIPost *,AkUInt16,bool,AkUInt32,AkCallbackFunc,void *): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_INVALID_PLAYING_ID; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PostMIDIOnEvent__SWIG_2(unsigned int jarg1, AkGameObjectID jarg2, void * jarg3, unsigned short jarg4, unsigned int jarg5) {
  unsigned int jresult ;
  AkUniqueID arg1 ;
  AkGameObjectID arg2 ;
  AkMIDIPost *arg3 = (AkMIDIPost *) 0 ;
  AkUInt16 arg4 ;
  bool arg5 ;
  AkPlayingID result;
  
  arg1 = (AkUniqueID)jarg1; 
  arg2 = jarg2; 
  arg3 = (AkMIDIPost *)jarg3; 
  arg4 = (AkUInt16)jarg4; 
  arg5 = jarg5 ? true : false; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AkPlayingID)AK::SoundEngine::PostMIDIOnEvent(arg1,arg2,arg3,arg4,arg5);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::PostMIDIOnEvent(AkUniqueID,AkGameObjectID,AkMIDIPost *,AkUInt16,bool): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_INVALID_PLAYING_ID; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PostMIDIOnEvent__SWIG_3(unsigned int jarg1, AkGameObjectID jarg2, void * jarg3, unsigned short jarg4) {
  unsigned int jresult ;
  AkUniqueID arg1 ;
  AkGameObjectID arg2 ;
  AkMIDIPost *arg3 = (AkMIDIPost *) 0 ;
  AkUInt16 arg4 ;
  AkPlayingID result;
  
  arg1 = (AkUniqueID)jarg1; 
  arg2 = jarg2; 
  arg3 = (AkMIDIPost *)jarg3; 
  arg4 = (AkUInt16)jarg4; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AkPlayingID)AK::SoundEngine::PostMIDIOnEvent(arg1,arg2,arg3,arg4);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::PostMIDIOnEvent(AkUniqueID,AkGameObjectID,AkMIDIPost *,AkUInt16): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_INVALID_PLAYING_ID; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StopMIDIOnEvent__SWIG_0(unsigned int jarg1, AkGameObjectID jarg2, unsigned int jarg3) {
  int jresult ;
  AkUniqueID arg1 ;
  AkGameObjectID arg2 ;
  AkPlayingID arg3 ;
  AKRESULT result;
  
  arg1 = (AkUniqueID)jarg1; 
  arg2 = jarg2; 
  arg3 = (AkPlayingID)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::StopMIDIOnEvent(arg1,arg2,arg3);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::StopMIDIOnEvent(AkUniqueID,AkGameObjectID,AkPlayingID): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StopMIDIOnEvent__SWIG_1(unsigned int jarg1, AkGameObjectID jarg2) {
  int jresult ;
  AkUniqueID arg1 ;
  AkGameObjectID arg2 ;
  AKRESULT result;
  
  arg1 = (AkUniqueID)jarg1; 
  arg2 = jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::StopMIDIOnEvent(arg1,arg2);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::StopMIDIOnEvent(AkUniqueID,AkGameObjectID): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StopMIDIOnEvent__SWIG_2(unsigned int jarg1) {
  int jresult ;
  AkUniqueID arg1 ;
  AKRESULT result;
  
  arg1 = (AkUniqueID)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::StopMIDIOnEvent(arg1);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::StopMIDIOnEvent(AkUniqueID): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StopMIDIOnEvent__SWIG_3() {
  int jresult ;
  AKRESULT result;
  
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::StopMIDIOnEvent();  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::StopMIDIOnEvent(): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PinEventInStreamCache__SWIG_0(unsigned int jarg1, signed char jarg2, signed char jarg3) {
  int jresult ;
  AkUniqueID arg1 ;
  AkPriority arg2 ;
  AkPriority arg3 ;
  AKRESULT result;
  
  arg1 = (AkUniqueID)jarg1; 
  arg2 = (AkPriority)jarg2; 
  arg3 = (AkPriority)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::PinEventInStreamCache(arg1,arg2,arg3);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::PinEventInStreamCache(AkUniqueID,AkPriority,AkPriority): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PinEventInStreamCache__SWIG_1(wchar_t* jarg1, signed char jarg2, signed char jarg3) {
  int jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  AkPriority arg2 ;
  AkPriority arg3 ;
  AKRESULT result;
  
  arg1 = (wchar_t *)jarg1; 
  arg2 = (AkPriority)jarg2; 
  arg3 = (AkPriority)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::PinEventInStreamCache((wchar_t const *)arg1,arg2,arg3);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::PinEventInStreamCache(wchar_t const *,AkPriority,AkPriority): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnpinEventInStreamCache__SWIG_0(unsigned int jarg1) {
  int jresult ;
  AkUniqueID arg1 ;
  AKRESULT result;
  
  arg1 = (AkUniqueID)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::UnpinEventInStreamCache(arg1);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::UnpinEventInStreamCache(AkUniqueID): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnpinEventInStreamCache__SWIG_1(wchar_t* jarg1) {
  int jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  AKRESULT result;
  
  arg1 = (wchar_t *)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::UnpinEventInStreamCache((wchar_t const *)arg1);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::UnpinEventInStreamCache(wchar_t const *): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetBufferStatusForPinnedEvent__SWIG_0(unsigned int jarg1, float * jarg2, int * jarg3) {
  int jresult ;
  AkUniqueID arg1 ;
  AkReal32 *arg2 = 0 ;
  bool *arg3 = 0 ;
  AKRESULT result;
  
  arg1 = (AkUniqueID)jarg1; 
  arg2 = (AkReal32 *)jarg2; 
  arg3 = (bool *)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::GetBufferStatusForPinnedEvent(arg1,*arg2,*arg3);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::GetBufferStatusForPinnedEvent(AkUniqueID,AkReal32 &,bool &): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetBufferStatusForPinnedEvent__SWIG_1(char * jarg1, float * jarg2, int * jarg3) {
  int jresult ;
  char *arg1 = (char *) 0 ;
  AkReal32 *arg2 = 0 ;
  bool *arg3 = 0 ;
  AKRESULT result;
  
  arg1 = (char *)jarg1; 
  arg2 = (AkReal32 *)jarg2; 
  arg3 = (bool *)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::GetBufferStatusForPinnedEvent((char const *)arg1,*arg2,*arg3);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::GetBufferStatusForPinnedEvent(char const *,AkReal32 &,bool &): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SeekOnEvent__SWIG_0(unsigned int jarg1, AkGameObjectID jarg2, int jarg3, unsigned int jarg4, unsigned int jarg5) {
  int jresult ;
  AkUniqueID arg1 ;
  AkGameObjectID arg2 ;
  AkTimeMs arg3 ;
  bool arg4 ;
  AkPlayingID arg5 ;
  AKRESULT result;
  
  arg1 = (AkUniqueID)jarg1; 
  arg2 = jarg2; 
  arg3 = (AkTimeMs)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (AkPlayingID)jarg5; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::SeekOnEvent(arg1,arg2,arg3,arg4,arg5);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::SeekOnEvent(AkUniqueID,AkGameObjectID,AkTimeMs,bool,AkPlayingID): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SeekOnEvent__SWIG_1(unsigned int jarg1, AkGameObjectID jarg2, int jarg3, unsigned int jarg4) {
  int jresult ;
  AkUniqueID arg1 ;
  AkGameObjectID arg2 ;
  AkTimeMs arg3 ;
  bool arg4 ;
  AKRESULT result;
  
  arg1 = (AkUniqueID)jarg1; 
  arg2 = jarg2; 
  arg3 = (AkTimeMs)jarg3; 
  arg4 = jarg4 ? true : false; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::SeekOnEvent(arg1,arg2,arg3,arg4);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::SeekOnEvent(AkUniqueID,AkGameObjectID,AkTimeMs,bool): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SeekOnEvent__SWIG_2(unsigned int jarg1, AkGameObjectID jarg2, int jarg3) {
  int jresult ;
  AkUniqueID arg1 ;
  AkGameObjectID arg2 ;
  AkTimeMs arg3 ;
  AKRESULT result;
  
  arg1 = (AkUniqueID)jarg1; 
  arg2 = jarg2; 
  arg3 = (AkTimeMs)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::SeekOnEvent(arg1,arg2,arg3);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::SeekOnEvent(AkUniqueID,AkGameObjectID,AkTimeMs): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SeekOnEvent__SWIG_3(wchar_t* jarg1, AkGameObjectID jarg2, int jarg3, unsigned int jarg4, unsigned int jarg5) {
  int jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  AkGameObjectID arg2 ;
  AkTimeMs arg3 ;
  bool arg4 ;
  AkPlayingID arg5 ;
  AKRESULT result;
  
  arg1 = (wchar_t *)jarg1; 
  arg2 = jarg2; 
  arg3 = (AkTimeMs)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (AkPlayingID)jarg5; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::SeekOnEvent((wchar_t const *)arg1,arg2,arg3,arg4,arg5);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::SeekOnEvent(wchar_t const *,AkGameObjectID,AkTimeMs,bool,AkPlayingID): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SeekOnEvent__SWIG_4(wchar_t* jarg1, AkGameObjectID jarg2, int jarg3, unsigned int jarg4) {
  int jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  AkGameObjectID arg2 ;
  AkTimeMs arg3 ;
  bool arg4 ;
  AKRESULT result;
  
  arg1 = (wchar_t *)jarg1; 
  arg2 = jarg2; 
  arg3 = (AkTimeMs)jarg3; 
  arg4 = jarg4 ? true : false; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::SeekOnEvent((wchar_t const *)arg1,arg2,arg3,arg4);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::SeekOnEvent(wchar_t const *,AkGameObjectID,AkTimeMs,bool): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SeekOnEvent__SWIG_5(wchar_t* jarg1, AkGameObjectID jarg2, int jarg3) {
  int jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  AkGameObjectID arg2 ;
  AkTimeMs arg3 ;
  AKRESULT result;
  
  arg1 = (wchar_t *)jarg1; 
  arg2 = jarg2; 
  arg3 = (AkTimeMs)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::SeekOnEvent((wchar_t const *)arg1,arg2,arg3);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::SeekOnEvent(wchar_t const *,AkGameObjectID,AkTimeMs): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SeekOnEvent__SWIG_9(unsigned int jarg1, AkGameObjectID jarg2, float jarg3, unsigned int jarg4, unsigned int jarg5) {
  int jresult ;
  AkUniqueID arg1 ;
  AkGameObjectID arg2 ;
  AkReal32 arg3 ;
  bool arg4 ;
  AkPlayingID arg5 ;
  AKRESULT result;
  
  arg1 = (AkUniqueID)jarg1; 
  arg2 = jarg2; 
  arg3 = (AkReal32)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (AkPlayingID)jarg5; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::SeekOnEvent(arg1,arg2,arg3,arg4,arg5);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::SeekOnEvent(AkUniqueID,AkGameObjectID,AkReal32,bool,AkPlayingID): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SeekOnEvent__SWIG_10(unsigned int jarg1, AkGameObjectID jarg2, float jarg3, unsigned int jarg4) {
  int jresult ;
  AkUniqueID arg1 ;
  AkGameObjectID arg2 ;
  AkReal32 arg3 ;
  bool arg4 ;
  AKRESULT result;
  
  arg1 = (AkUniqueID)jarg1; 
  arg2 = jarg2; 
  arg3 = (AkReal32)jarg3; 
  arg4 = jarg4 ? true : false; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::SeekOnEvent(arg1,arg2,arg3,arg4);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::SeekOnEvent(AkUniqueID,AkGameObjectID,AkReal32,bool): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SeekOnEvent__SWIG_11(unsigned int jarg1, AkGameObjectID jarg2, float jarg3) {
  int jresult ;
  AkUniqueID arg1 ;
  AkGameObjectID arg2 ;
  AkReal32 arg3 ;
  AKRESULT result;
  
  arg1 = (AkUniqueID)jarg1; 
  arg2 = jarg2; 
  arg3 = (AkReal32)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::SeekOnEvent(arg1,arg2,arg3);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::SeekOnEvent(AkUniqueID,AkGameObjectID,AkReal32): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SeekOnEvent__SWIG_12(wchar_t* jarg1, AkGameObjectID jarg2, float jarg3, unsigned int jarg4, unsigned int jarg5) {
  int jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  AkGameObjectID arg2 ;
  AkReal32 arg3 ;
  bool arg4 ;
  AkPlayingID arg5 ;
  AKRESULT result;
  
  arg1 = (wchar_t *)jarg1; 
  arg2 = jarg2; 
  arg3 = (AkReal32)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (AkPlayingID)jarg5; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::SeekOnEvent((wchar_t const *)arg1,arg2,arg3,arg4,arg5);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::SeekOnEvent(wchar_t const *,AkGameObjectID,AkReal32,bool,AkPlayingID): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SeekOnEvent__SWIG_13(wchar_t* jarg1, AkGameObjectID jarg2, float jarg3, unsigned int jarg4) {
  int jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  AkGameObjectID arg2 ;
  AkReal32 arg3 ;
  bool arg4 ;
  AKRESULT result;
  
  arg1 = (wchar_t *)jarg1; 
  arg2 = jarg2; 
  arg3 = (AkReal32)jarg3; 
  arg4 = jarg4 ? true : false; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::SeekOnEvent((wchar_t const *)arg1,arg2,arg3,arg4);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::SeekOnEvent(wchar_t const *,AkGameObjectID,AkReal32,bool): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SeekOnEvent__SWIG_14(wchar_t* jarg1, AkGameObjectID jarg2, float jarg3) {
  int jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  AkGameObjectID arg2 ;
  AkReal32 arg3 ;
  AKRESULT result;
  
  arg1 = (wchar_t *)jarg1; 
  arg2 = jarg2; 
  arg3 = (AkReal32)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::SeekOnEvent((wchar_t const *)arg1,arg2,arg3);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::SeekOnEvent(wchar_t const *,AkGameObjectID,AkReal32): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CancelEventCallbackCookie(void * jarg1) {
  void *arg1 = (void *) 0 ;
  
  arg1 = jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      AK::SoundEngine::CancelEventCallbackCookie(arg1);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::CancelEventCallbackCookie(void *): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return ; 	
    } 
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_CancelEventCallbackGameObject(AkGameObjectID jarg1) {
  AkGameObjectID arg1 ;
  
  arg1 = jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      AK::SoundEngine::CancelEventCallbackGameObject(arg1);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::CancelEventCallbackGameObject(AkGameObjectID): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return ; 	
    } 
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_CancelEventCallback(unsigned int jarg1) {
  AkPlayingID arg1 ;
  
  arg1 = (AkPlayingID)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      AK::SoundEngine::CancelEventCallback(arg1);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::CancelEventCallback(AkPlayingID): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return ; 	
    } 
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetSourcePlayPosition__SWIG_0(unsigned int jarg1, int * jarg2, unsigned int jarg3) {
  int jresult ;
  AkPlayingID arg1 ;
  AkTimeMs *arg2 = (AkTimeMs *) 0 ;
  bool arg3 ;
  AKRESULT result;
  
  arg1 = (AkPlayingID)jarg1; 
  arg2 = (AkTimeMs *)jarg2; 
  arg3 = jarg3 ? true : false; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::GetSourcePlayPosition(arg1,arg2,arg3);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::GetSourcePlayPosition(AkPlayingID,AkTimeMs *,bool): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetSourcePlayPosition__SWIG_1(unsigned int jarg1, int * jarg2) {
  int jresult ;
  AkPlayingID arg1 ;
  AkTimeMs *arg2 = (AkTimeMs *) 0 ;
  AKRESULT result;
  
  arg1 = (AkPlayingID)jarg1; 
  arg2 = (AkTimeMs *)jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::GetSourcePlayPosition(arg1,arg2);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::GetSourcePlayPosition(AkPlayingID,AkTimeMs *): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetSourceStreamBuffering(unsigned int jarg1, int * jarg2, int * jarg3) {
  int jresult ;
  AkPlayingID arg1 ;
  AkTimeMs *arg2 = 0 ;
  bool *arg3 = 0 ;
  AKRESULT result;
  
  arg1 = (AkPlayingID)jarg1; 
  arg2 = (AkTimeMs *)jarg2; 
  arg3 = (bool *)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::GetSourceStreamBuffering(arg1,*arg2,*arg3);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::GetSourceStreamBuffering(AkPlayingID,AkTimeMs &,bool &): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StopAll__SWIG_0(AkGameObjectID jarg1) {
  AkGameObjectID arg1 ;
  
  arg1 = jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      AK::SoundEngine::StopAll(arg1);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::StopAll(AkGameObjectID): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return ; 	
    } 
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_StopAll__SWIG_1() {
  {
    if (AK::SoundEngine::IsInitialized()) {
      AK::SoundEngine::StopAll();  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::StopAll(): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return ; 	
    } 
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_StopPlayingID__SWIG_0(unsigned int jarg1, int jarg2, int jarg3) {
  AkPlayingID arg1 ;
  AkTimeMs arg2 ;
  AkCurveInterpolation arg3 ;
  
  arg1 = (AkPlayingID)jarg1; 
  arg2 = (AkTimeMs)jarg2; 
  arg3 = (AkCurveInterpolation)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      AK::SoundEngine::StopPlayingID(arg1,arg2,arg3);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::StopPlayingID(AkPlayingID,AkTimeMs,AkCurveInterpolation): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return ; 	
    } 
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_StopPlayingID__SWIG_1(unsigned int jarg1, int jarg2) {
  AkPlayingID arg1 ;
  AkTimeMs arg2 ;
  
  arg1 = (AkPlayingID)jarg1; 
  arg2 = (AkTimeMs)jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      AK::SoundEngine::StopPlayingID(arg1,arg2);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::StopPlayingID(AkPlayingID,AkTimeMs): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return ; 	
    } 
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_StopPlayingID__SWIG_2(unsigned int jarg1) {
  AkPlayingID arg1 ;
  
  arg1 = (AkPlayingID)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      AK::SoundEngine::StopPlayingID(arg1);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::StopPlayingID(AkPlayingID): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return ; 	
    } 
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ExecuteActionOnPlayingID__SWIG_0(int jarg1, unsigned int jarg2, int jarg3, int jarg4) {
  AK::SoundEngine::AkActionOnEventType arg1 ;
  AkPlayingID arg2 ;
  AkTimeMs arg3 ;
  AkCurveInterpolation arg4 ;
  
  arg1 = (AK::SoundEngine::AkActionOnEventType)jarg1; 
  arg2 = (AkPlayingID)jarg2; 
  arg3 = (AkTimeMs)jarg3; 
  arg4 = (AkCurveInterpolation)jarg4; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      AK::SoundEngine::ExecuteActionOnPlayingID(arg1,arg2,arg3,arg4);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::ExecuteActionOnPlayingID(AK::SoundEngine::AkActionOnEventType,AkPlayingID,AkTimeMs,AkCurveInterpolation): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return ; 	
    } 
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ExecuteActionOnPlayingID__SWIG_1(int jarg1, unsigned int jarg2, int jarg3) {
  AK::SoundEngine::AkActionOnEventType arg1 ;
  AkPlayingID arg2 ;
  AkTimeMs arg3 ;
  
  arg1 = (AK::SoundEngine::AkActionOnEventType)jarg1; 
  arg2 = (AkPlayingID)jarg2; 
  arg3 = (AkTimeMs)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      AK::SoundEngine::ExecuteActionOnPlayingID(arg1,arg2,arg3);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::ExecuteActionOnPlayingID(AK::SoundEngine::AkActionOnEventType,AkPlayingID,AkTimeMs): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return ; 	
    } 
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ExecuteActionOnPlayingID__SWIG_2(int jarg1, unsigned int jarg2) {
  AK::SoundEngine::AkActionOnEventType arg1 ;
  AkPlayingID arg2 ;
  
  arg1 = (AK::SoundEngine::AkActionOnEventType)jarg1; 
  arg2 = (AkPlayingID)jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      AK::SoundEngine::ExecuteActionOnPlayingID(arg1,arg2);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::ExecuteActionOnPlayingID(AK::SoundEngine::AkActionOnEventType,AkPlayingID): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return ; 	
    } 
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetRandomSeed(unsigned int jarg1) {
  AkUInt32 arg1 ;
  
  arg1 = (AkUInt32)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      AK::SoundEngine::SetRandomSeed(arg1);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::SetRandomSeed(AkUInt32): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return ; 	
    } 
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MuteBackgroundMusic(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      AK::SoundEngine::MuteBackgroundMusic(arg1);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::MuteBackgroundMusic(bool): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return ; 	
    } 
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GetBackgroundMusicMute() {
  unsigned int jresult ;
  bool result;
  
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (bool)AK::SoundEngine::GetBackgroundMusicMute();  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::GetBackgroundMusicMute(): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return 0; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SendPluginCustomGameData(unsigned int jarg1, AkGameObjectID jarg2, int jarg3, unsigned int jarg4, unsigned int jarg5, void * jarg6, unsigned int jarg7) {
  int jresult ;
  AkUniqueID arg1 ;
  AkGameObjectID arg2 ;
  AkPluginType arg3 ;
  AkUInt32 arg4 ;
  AkUInt32 arg5 ;
  void *arg6 = (void *) 0 ;
  AkUInt32 arg7 ;
  AKRESULT result;
  
  arg1 = (AkUniqueID)jarg1; 
  arg2 = jarg2; 
  arg3 = (AkPluginType)jarg3; 
  arg4 = (AkUInt32)jarg4; 
  arg5 = (AkUInt32)jarg5; 
  arg6 = jarg6; 
  arg7 = (AkUInt32)jarg7; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::SendPluginCustomGameData(arg1,arg2,arg3,arg4,arg5,(void const *)arg6,arg7);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::SendPluginCustomGameData(AkUniqueID,AkGameObjectID,AkPluginType,AkUInt32,AkUInt32,void const *,AkUInt32): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnregisterAllGameObj() {
  int jresult ;
  AKRESULT result;
  
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::UnregisterAllGameObj();  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::UnregisterAllGameObj(): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetMultiplePositions__SWIG_0(AkGameObjectID jarg1, void * jarg2, unsigned short jarg3, int jarg4) {
  int jresult ;
  AkGameObjectID arg1 ;
  AkSoundPosition *arg2 = (AkSoundPosition *) 0 ;
  AkUInt16 arg3 ;
  AK::SoundEngine::MultiPositionType arg4 ;
  AKRESULT result;
  
  arg1 = jarg1; 
  arg2 = (AkSoundPosition *)jarg2; 
  arg3 = (AkUInt16)jarg3; 
  arg4 = (AK::SoundEngine::MultiPositionType)jarg4; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::SetMultiplePositions(arg1,(AkTransform const *)arg2,arg3,arg4);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::SetMultiplePositions(AkGameObjectID,AkSoundPosition const *,AkUInt16,AK::SoundEngine::MultiPositionType): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetMultiplePositions__SWIG_1(AkGameObjectID jarg1, void * jarg2, unsigned short jarg3) {
  int jresult ;
  AkGameObjectID arg1 ;
  AkSoundPosition *arg2 = (AkSoundPosition *) 0 ;
  AkUInt16 arg3 ;
  AKRESULT result;
  
  arg1 = jarg1; 
  arg2 = (AkSoundPosition *)jarg2; 
  arg3 = (AkUInt16)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::SetMultiplePositions(arg1,(AkTransform const *)arg2,arg3);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::SetMultiplePositions(AkGameObjectID,AkSoundPosition const *,AkUInt16): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetMultiplePositions__SWIG_2(AkGameObjectID jarg1, void * jarg2, unsigned short jarg3, int jarg4) {
  int jresult ;
  AkGameObjectID arg1 ;
  AkChannelEmitter *arg2 = (AkChannelEmitter *) 0 ;
  AkUInt16 arg3 ;
  AK::SoundEngine::MultiPositionType arg4 ;
  AKRESULT result;
  
  arg1 = jarg1; 
  arg2 = (AkChannelEmitter *)jarg2; 
  arg3 = (AkUInt16)jarg3; 
  arg4 = (AK::SoundEngine::MultiPositionType)jarg4; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::SetMultiplePositions(arg1,(AkChannelEmitter const *)arg2,arg3,arg4);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::SetMultiplePositions(AkGameObjectID,AkChannelEmitter const *,AkUInt16,AK::SoundEngine::MultiPositionType): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetMultiplePositions__SWIG_3(AkGameObjectID jarg1, void * jarg2, unsigned short jarg3) {
  int jresult ;
  AkGameObjectID arg1 ;
  AkChannelEmitter *arg2 = (AkChannelEmitter *) 0 ;
  AkUInt16 arg3 ;
  AKRESULT result;
  
  arg1 = jarg1; 
  arg2 = (AkChannelEmitter *)jarg2; 
  arg3 = (AkUInt16)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::SetMultiplePositions(arg1,(AkChannelEmitter const *)arg2,arg3);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::SetMultiplePositions(AkGameObjectID,AkChannelEmitter const *,AkUInt16): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetScalingFactor(AkGameObjectID jarg1, float jarg2) {
  int jresult ;
  AkGameObjectID arg1 ;
  AkReal32 arg2 ;
  AKRESULT result;
  
  arg1 = jarg1; 
  arg2 = (AkReal32)jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::SetScalingFactor(arg1,arg2);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::SetScalingFactor(AkGameObjectID,AkReal32): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ClearBanks() {
  int jresult ;
  AKRESULT result;
  
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::ClearBanks();  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::ClearBanks(): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetBankLoadIOSettings(float jarg1, signed char jarg2) {
  int jresult ;
  AkReal32 arg1 ;
  AkPriority arg2 ;
  AKRESULT result;
  
  arg1 = (AkReal32)jarg1; 
  arg2 = (AkPriority)jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::SetBankLoadIOSettings(arg1,arg2);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::SetBankLoadIOSettings(AkReal32,AkPriority): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LoadBank__SWIG_0(wchar_t* jarg1, unsigned int * jarg2) {
  int jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  AkBankID *arg2 = 0 ;
  AKRESULT result;
  
  arg1 = (wchar_t *)jarg1; 
  arg2 = (AkBankID *)jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::LoadBank((wchar_t const *)arg1,*arg2);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::LoadBank(wchar_t const *,AkBankID &): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LoadBank__SWIG_2(unsigned int jarg1) {
  int jresult ;
  AkBankID arg1 ;
  AKRESULT result;
  
  arg1 = (AkBankID)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::LoadBank(arg1);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::LoadBank(AkBankID): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LoadBankMemoryView__SWIG_0(void * jarg1, unsigned int jarg2, unsigned int * jarg3) {
  int jresult ;
  void *arg1 = (void *) 0 ;
  AkUInt32 arg2 ;
  AkBankID *arg3 = 0 ;
  AKRESULT result;
  
  arg1 = jarg1; 
  arg2 = (AkUInt32)jarg2; 
  arg3 = (AkBankID *)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::LoadBankMemoryView((void const *)arg1,arg2,*arg3);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::LoadBankMemoryView(void const *,AkUInt32,AkBankID &): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LoadBankMemoryCopy__SWIG_0(void * jarg1, unsigned int jarg2, unsigned int * jarg3) {
  int jresult ;
  void *arg1 = (void *) 0 ;
  AkUInt32 arg2 ;
  AkBankID *arg3 = 0 ;
  AKRESULT result;
  
  arg1 = jarg1; 
  arg2 = (AkUInt32)jarg2; 
  arg3 = (AkBankID *)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::LoadBankMemoryCopy((void const *)arg1,arg2,*arg3);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::LoadBankMemoryCopy(void const *,AkUInt32,AkBankID &): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LoadBank__SWIG_3(wchar_t* jarg1, void * jarg2, void * jarg3, unsigned int * jarg4) {
  int jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  AkBankCallbackFunc arg2 = (AkBankCallbackFunc) 0 ;
  void *arg3 = (void *) 0 ;
  AkBankID *arg4 = 0 ;
  AKRESULT result;
  
  arg1 = (wchar_t *)jarg1; 
  arg2 = (AkBankCallbackFunc) AkCallbackSerializer::BankCallback; 
  arg3 = jarg3; 
  arg4 = (AkBankID *)jarg4; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::LoadBank((wchar_t const *)arg1,arg2,arg3,*arg4);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::LoadBank(wchar_t const *,AkBankCallbackFunc,void *,AkBankID &): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LoadBank__SWIG_5(unsigned int jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  AkBankID arg1 ;
  AkBankCallbackFunc arg2 = (AkBankCallbackFunc) 0 ;
  void *arg3 = (void *) 0 ;
  AKRESULT result;
  
  arg1 = (AkBankID)jarg1; 
  arg2 = (AkBankCallbackFunc) AkCallbackSerializer::BankCallback; 
  arg3 = jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::LoadBank(arg1,arg2,arg3);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::LoadBank(AkBankID,AkBankCallbackFunc,void *): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LoadBankMemoryView__SWIG_1(void * jarg1, unsigned int jarg2, void * jarg3, void * jarg4, unsigned int * jarg5) {
  int jresult ;
  void *arg1 = (void *) 0 ;
  AkUInt32 arg2 ;
  AkBankCallbackFunc arg3 = (AkBankCallbackFunc) 0 ;
  void *arg4 = (void *) 0 ;
  AkBankID *arg5 = 0 ;
  AKRESULT result;
  
  arg1 = jarg1; 
  arg2 = (AkUInt32)jarg2; 
  arg3 = (AkBankCallbackFunc) AkCallbackSerializer::BankCallback; 
  arg4 = jarg4; 
  arg5 = (AkBankID *)jarg5; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::LoadBankMemoryView((void const *)arg1,arg2,arg3,arg4,*arg5);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::LoadBankMemoryView(void const *,AkUInt32,AkBankCallbackFunc,void *,AkBankID &): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LoadBankMemoryCopy__SWIG_1(void * jarg1, unsigned int jarg2, void * jarg3, void * jarg4, unsigned int * jarg5) {
  int jresult ;
  void *arg1 = (void *) 0 ;
  AkUInt32 arg2 ;
  AkBankCallbackFunc arg3 = (AkBankCallbackFunc) 0 ;
  void *arg4 = (void *) 0 ;
  AkBankID *arg5 = 0 ;
  AKRESULT result;
  
  arg1 = jarg1; 
  arg2 = (AkUInt32)jarg2; 
  arg3 = (AkBankCallbackFunc) AkCallbackSerializer::BankCallback; 
  arg4 = jarg4; 
  arg5 = (AkBankID *)jarg5; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::LoadBankMemoryCopy((void const *)arg1,arg2,arg3,arg4,*arg5);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::LoadBankMemoryCopy(void const *,AkUInt32,AkBankCallbackFunc,void *,AkBankID &): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnloadBank__SWIG_0(wchar_t* jarg1, void * jarg2) {
  int jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  void *arg2 = (void *) 0 ;
  AKRESULT result;
  
  arg1 = (wchar_t *)jarg1; 
  arg2 = jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::UnloadBank((wchar_t const *)arg1,(void const *)arg2);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::UnloadBank(wchar_t const *,void const *): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnloadBank__SWIG_2(unsigned int jarg1, void * jarg2) {
  int jresult ;
  AkBankID arg1 ;
  void *arg2 = (void *) 0 ;
  AKRESULT result;
  
  arg1 = (AkBankID)jarg1; 
  arg2 = jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::UnloadBank(arg1,(void const *)arg2);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::UnloadBank(AkBankID,void const *): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnloadBank__SWIG_3(wchar_t* jarg1, void * jarg2, void * jarg3, void * jarg4) {
  int jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  void *arg2 = (void *) 0 ;
  AkBankCallbackFunc arg3 = (AkBankCallbackFunc) 0 ;
  void *arg4 = (void *) 0 ;
  AKRESULT result;
  
  arg1 = (wchar_t *)jarg1; 
  arg2 = jarg2; 
  arg3 = (AkBankCallbackFunc) AkCallbackSerializer::BankCallback; 
  arg4 = jarg4; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::UnloadBank((wchar_t const *)arg1,(void const *)arg2,arg3,arg4);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::UnloadBank(wchar_t const *,void const *,AkBankCallbackFunc,void *): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnloadBank__SWIG_5(unsigned int jarg1, void * jarg2, void * jarg3, void * jarg4) {
  int jresult ;
  AkBankID arg1 ;
  void *arg2 = (void *) 0 ;
  AkBankCallbackFunc arg3 = (AkBankCallbackFunc) 0 ;
  void *arg4 = (void *) 0 ;
  AKRESULT result;
  
  arg1 = (AkBankID)jarg1; 
  arg2 = jarg2; 
  arg3 = (AkBankCallbackFunc) AkCallbackSerializer::BankCallback; 
  arg4 = jarg4; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::UnloadBank(arg1,(void const *)arg2,arg3,arg4);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::UnloadBank(AkBankID,void const *,AkBankCallbackFunc,void *): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CancelBankCallbackCookie(void * jarg1) {
  void *arg1 = (void *) 0 ;
  
  arg1 = jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      AK::SoundEngine::CancelBankCallbackCookie(arg1);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::CancelBankCallbackCookie(void *): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return ; 	
    } 
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_PrepareBank__SWIG_0(int jarg1, wchar_t* jarg2, int jarg3) {
  int jresult ;
  AK::SoundEngine::PreparationType arg1 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  AK::SoundEngine::AkBankContent arg3 ;
  AKRESULT result;
  
  arg1 = (AK::SoundEngine::PreparationType)jarg1; 
  arg2 = (wchar_t *)jarg2; 
  arg3 = (AK::SoundEngine::AkBankContent)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::PrepareBank(arg1,(wchar_t const *)arg2,arg3);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::PrepareBank(AK::SoundEngine::PreparationType,wchar_t const *,AK::SoundEngine::AkBankContent): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PrepareBank__SWIG_1(int jarg1, wchar_t* jarg2) {
  int jresult ;
  AK::SoundEngine::PreparationType arg1 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  AKRESULT result;
  
  arg1 = (AK::SoundEngine::PreparationType)jarg1; 
  arg2 = (wchar_t *)jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::PrepareBank(arg1,(wchar_t const *)arg2);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::PrepareBank(AK::SoundEngine::PreparationType,wchar_t const *): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PrepareBank__SWIG_4(int jarg1, unsigned int jarg2, int jarg3) {
  int jresult ;
  AK::SoundEngine::PreparationType arg1 ;
  AkBankID arg2 ;
  AK::SoundEngine::AkBankContent arg3 ;
  AKRESULT result;
  
  arg1 = (AK::SoundEngine::PreparationType)jarg1; 
  arg2 = (AkBankID)jarg2; 
  arg3 = (AK::SoundEngine::AkBankContent)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::PrepareBank(arg1,arg2,arg3);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::PrepareBank(AK::SoundEngine::PreparationType,AkBankID,AK::SoundEngine::AkBankContent): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PrepareBank__SWIG_5(int jarg1, unsigned int jarg2) {
  int jresult ;
  AK::SoundEngine::PreparationType arg1 ;
  AkBankID arg2 ;
  AKRESULT result;
  
  arg1 = (AK::SoundEngine::PreparationType)jarg1; 
  arg2 = (AkBankID)jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::PrepareBank(arg1,arg2);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::PrepareBank(AK::SoundEngine::PreparationType,AkBankID): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PrepareBank__SWIG_6(int jarg1, wchar_t* jarg2, void * jarg3, void * jarg4, int jarg5) {
  int jresult ;
  AK::SoundEngine::PreparationType arg1 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  AkBankCallbackFunc arg3 = (AkBankCallbackFunc) 0 ;
  void *arg4 = (void *) 0 ;
  AK::SoundEngine::AkBankContent arg5 ;
  AKRESULT result;
  
  arg1 = (AK::SoundEngine::PreparationType)jarg1; 
  arg2 = (wchar_t *)jarg2; 
  arg3 = (AkBankCallbackFunc) AkCallbackSerializer::BankCallback; 
  arg4 = jarg4; 
  arg5 = (AK::SoundEngine::AkBankContent)jarg5; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::PrepareBank(arg1,(wchar_t const *)arg2,arg3,arg4,arg5);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::PrepareBank(AK::SoundEngine::PreparationType,wchar_t const *,AkBankCallbackFunc,void *,AK::SoundEngine::AkBankContent): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PrepareBank__SWIG_7(int jarg1, wchar_t* jarg2, void * jarg3, void * jarg4) {
  int jresult ;
  AK::SoundEngine::PreparationType arg1 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  AkBankCallbackFunc arg3 = (AkBankCallbackFunc) 0 ;
  void *arg4 = (void *) 0 ;
  AKRESULT result;
  
  arg1 = (AK::SoundEngine::PreparationType)jarg1; 
  arg2 = (wchar_t *)jarg2; 
  arg3 = (AkBankCallbackFunc) AkCallbackSerializer::BankCallback; 
  arg4 = jarg4; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::PrepareBank(arg1,(wchar_t const *)arg2,arg3,arg4);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::PrepareBank(AK::SoundEngine::PreparationType,wchar_t const *,AkBankCallbackFunc,void *): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PrepareBank__SWIG_10(int jarg1, unsigned int jarg2, void * jarg3, void * jarg4, int jarg5) {
  int jresult ;
  AK::SoundEngine::PreparationType arg1 ;
  AkBankID arg2 ;
  AkBankCallbackFunc arg3 = (AkBankCallbackFunc) 0 ;
  void *arg4 = (void *) 0 ;
  AK::SoundEngine::AkBankContent arg5 ;
  AKRESULT result;
  
  arg1 = (AK::SoundEngine::PreparationType)jarg1; 
  arg2 = (AkBankID)jarg2; 
  arg3 = (AkBankCallbackFunc) AkCallbackSerializer::BankCallback; 
  arg4 = jarg4; 
  arg5 = (AK::SoundEngine::AkBankContent)jarg5; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::PrepareBank(arg1,arg2,arg3,arg4,arg5);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::PrepareBank(AK::SoundEngine::PreparationType,AkBankID,AkBankCallbackFunc,void *,AK::SoundEngine::AkBankContent): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PrepareBank__SWIG_11(int jarg1, unsigned int jarg2, void * jarg3, void * jarg4) {
  int jresult ;
  AK::SoundEngine::PreparationType arg1 ;
  AkBankID arg2 ;
  AkBankCallbackFunc arg3 = (AkBankCallbackFunc) 0 ;
  void *arg4 = (void *) 0 ;
  AKRESULT result;
  
  arg1 = (AK::SoundEngine::PreparationType)jarg1; 
  arg2 = (AkBankID)jarg2; 
  arg3 = (AkBankCallbackFunc) AkCallbackSerializer::BankCallback; 
  arg4 = jarg4; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::PrepareBank(arg1,arg2,arg3,arg4);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::PrepareBank(AK::SoundEngine::PreparationType,AkBankID,AkBankCallbackFunc,void *): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ClearPreparedEvents() {
  int jresult ;
  AKRESULT result;
  
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::ClearPreparedEvents();  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::ClearPreparedEvents(): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PrepareEvent__SWIG_0(int jarg1, wchar_t const* jarg2, unsigned int jarg3) {
  int jresult ;
  AK::SoundEngine::PreparationType arg1 ;
  wchar_t **arg2 = (wchar_t **) 0 ;
  AkUInt32 arg3 ;
  AKRESULT result;
  
  arg1 = (AK::SoundEngine::PreparationType)jarg1; 
  
  //Create a string array of the proper size
  unsigned short size = *jarg2;
  jarg2++; // skip size word
  arg2 = (wchar_t**)AkAlloca(size*sizeof(wchar_t*));
  unsigned long len = 0;
  //Make all pointers point to the right place.
  for(unsigned long i = 0; i < size; i++)
  {
    arg2[i] = (wchar_t*)jarg2 + len;
    len += (unsigned long)wcslen(arg2[i]) + 1;
  }
  
  arg3 = (AkUInt32)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::PrepareEvent(arg1,(wchar_t const **)arg2,arg3);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::PrepareEvent(AK::SoundEngine::PreparationType,wchar_t const **,AkUInt32): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PrepareEvent__SWIG_1(int jarg1, unsigned int* jarg2, unsigned int jarg3) {
  int jresult ;
  AK::SoundEngine::PreparationType arg1 ;
  AkUniqueID *arg2 = (AkUniqueID *) 0 ;
  AkUInt32 arg3 ;
  AKRESULT result;
  
  arg1 = (AK::SoundEngine::PreparationType)jarg1; 
  arg2 = jarg2;
  arg3 = (AkUInt32)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::PrepareEvent(arg1,arg2,arg3);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::PrepareEvent(AK::SoundEngine::PreparationType,AkUniqueID *,AkUInt32): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PrepareEvent__SWIG_2(int jarg1, wchar_t const* jarg2, unsigned int jarg3, void * jarg4, void * jarg5) {
  int jresult ;
  AK::SoundEngine::PreparationType arg1 ;
  wchar_t **arg2 = (wchar_t **) 0 ;
  AkUInt32 arg3 ;
  AkBankCallbackFunc arg4 = (AkBankCallbackFunc) 0 ;
  void *arg5 = (void *) 0 ;
  AKRESULT result;
  
  arg1 = (AK::SoundEngine::PreparationType)jarg1; 
  
  //Create a string array of the proper size
  unsigned short size = *jarg2;
  jarg2++; // skip size word
  arg2 = (wchar_t**)AkAlloca(size*sizeof(wchar_t*));
  unsigned long len = 0;
  //Make all pointers point to the right place.
  for(unsigned long i = 0; i < size; i++)
  {
    arg2[i] = (wchar_t*)jarg2 + len;
    len += (unsigned long)wcslen(arg2[i]) + 1;
  }
  
  arg3 = (AkUInt32)jarg3; 
  arg4 = (AkBankCallbackFunc) AkCallbackSerializer::BankCallback; 
  arg5 = jarg5; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::PrepareEvent(arg1,(wchar_t const **)arg2,arg3,arg4,arg5);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::PrepareEvent(AK::SoundEngine::PreparationType,wchar_t const **,AkUInt32,AkBankCallbackFunc,void *): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PrepareEvent__SWIG_3(int jarg1, unsigned int* jarg2, unsigned int jarg3, void * jarg4, void * jarg5) {
  int jresult ;
  AK::SoundEngine::PreparationType arg1 ;
  AkUniqueID *arg2 = (AkUniqueID *) 0 ;
  AkUInt32 arg3 ;
  AkBankCallbackFunc arg4 = (AkBankCallbackFunc) 0 ;
  void *arg5 = (void *) 0 ;
  AKRESULT result;
  
  arg1 = (AK::SoundEngine::PreparationType)jarg1; 
  arg2 = jarg2;
  arg3 = (AkUInt32)jarg3; 
  arg4 = (AkBankCallbackFunc) AkCallbackSerializer::BankCallback; 
  arg5 = jarg5; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::PrepareEvent(arg1,arg2,arg3,arg4,arg5);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::PrepareEvent(AK::SoundEngine::PreparationType,AkUniqueID *,AkUInt32,AkBankCallbackFunc,void *): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetMedia(void * jarg1, unsigned int jarg2) {
  int jresult ;
  AkSourceSettings *arg1 = (AkSourceSettings *) 0 ;
  AkUInt32 arg2 ;
  AKRESULT result;
  
  arg1 = (AkSourceSettings *)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::SetMedia(arg1,arg2);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::SetMedia(AkSourceSettings *,AkUInt32): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnsetMedia(void * jarg1, unsigned int jarg2) {
  int jresult ;
  AkSourceSettings *arg1 = (AkSourceSettings *) 0 ;
  AkUInt32 arg2 ;
  AKRESULT result;
  
  arg1 = (AkSourceSettings *)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::UnsetMedia(arg1,arg2);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::UnsetMedia(AkSourceSettings *,AkUInt32): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PrepareGameSyncs__SWIG_0(int jarg1, int jarg2, wchar_t* jarg3, wchar_t const* jarg4, unsigned int jarg5) {
  int jresult ;
  AK::SoundEngine::PreparationType arg1 ;
  AkGroupType arg2 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  wchar_t **arg4 = (wchar_t **) 0 ;
  AkUInt32 arg5 ;
  AKRESULT result;
  
  arg1 = (AK::SoundEngine::PreparationType)jarg1; 
  arg2 = (AkGroupType)jarg2; 
  arg3 = (wchar_t *)jarg3; 
  
  //Create a string array of the proper size
  unsigned short size = *jarg4;
  jarg4++; // skip size word
  arg4 = (wchar_t**)AkAlloca(size*sizeof(wchar_t*));
  unsigned long len = 0;
  //Make all pointers point to the right place.
  for(unsigned long i = 0; i < size; i++)
  {
    arg4[i] = (wchar_t*)jarg4 + len;
    len += (unsigned long)wcslen(arg4[i]) + 1;
  }
  
  arg5 = (AkUInt32)jarg5; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::PrepareGameSyncs(arg1,arg2,(wchar_t const *)arg3,(wchar_t const **)arg4,arg5);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::PrepareGameSyncs(AK::SoundEngine::PreparationType,AkGroupType,wchar_t const *,wchar_t const **,AkUInt32): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PrepareGameSyncs__SWIG_1(int jarg1, int jarg2, unsigned int jarg3, unsigned int* jarg4, unsigned int jarg5) {
  int jresult ;
  AK::SoundEngine::PreparationType arg1 ;
  AkGroupType arg2 ;
  AkUInt32 arg3 ;
  AkUInt32 *arg4 = (AkUInt32 *) 0 ;
  AkUInt32 arg5 ;
  AKRESULT result;
  
  arg1 = (AK::SoundEngine::PreparationType)jarg1; 
  arg2 = (AkGroupType)jarg2; 
  arg3 = (AkUInt32)jarg3; 
  arg4 = jarg4;
  arg5 = (AkUInt32)jarg5; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::PrepareGameSyncs(arg1,arg2,arg3,arg4,arg5);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::PrepareGameSyncs(AK::SoundEngine::PreparationType,AkGroupType,AkUInt32,AkUInt32 *,AkUInt32): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PrepareGameSyncs__SWIG_2(int jarg1, int jarg2, wchar_t* jarg3, wchar_t const* jarg4, unsigned int jarg5, void * jarg6, void * jarg7) {
  int jresult ;
  AK::SoundEngine::PreparationType arg1 ;
  AkGroupType arg2 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  wchar_t **arg4 = (wchar_t **) 0 ;
  AkUInt32 arg5 ;
  AkBankCallbackFunc arg6 = (AkBankCallbackFunc) 0 ;
  void *arg7 = (void *) 0 ;
  AKRESULT result;
  
  arg1 = (AK::SoundEngine::PreparationType)jarg1; 
  arg2 = (AkGroupType)jarg2; 
  arg3 = (wchar_t *)jarg3; 
  
  //Create a string array of the proper size
  unsigned short size = *jarg4;
  jarg4++; // skip size word
  arg4 = (wchar_t**)AkAlloca(size*sizeof(wchar_t*));
  unsigned long len = 0;
  //Make all pointers point to the right place.
  for(unsigned long i = 0; i < size; i++)
  {
    arg4[i] = (wchar_t*)jarg4 + len;
    len += (unsigned long)wcslen(arg4[i]) + 1;
  }
  
  arg5 = (AkUInt32)jarg5; 
  arg6 = (AkBankCallbackFunc) AkCallbackSerializer::BankCallback; 
  arg7 = jarg7; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::PrepareGameSyncs(arg1,arg2,(wchar_t const *)arg3,(wchar_t const **)arg4,arg5,arg6,arg7);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::PrepareGameSyncs(AK::SoundEngine::PreparationType,AkGroupType,wchar_t const *,wchar_t const **,AkUInt32,AkBankCallbackFunc,void *): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PrepareGameSyncs__SWIG_3(int jarg1, int jarg2, unsigned int jarg3, unsigned int* jarg4, unsigned int jarg5, void * jarg6, void * jarg7) {
  int jresult ;
  AK::SoundEngine::PreparationType arg1 ;
  AkGroupType arg2 ;
  AkUInt32 arg3 ;
  AkUInt32 *arg4 = (AkUInt32 *) 0 ;
  AkUInt32 arg5 ;
  AkBankCallbackFunc arg6 = (AkBankCallbackFunc) 0 ;
  void *arg7 = (void *) 0 ;
  AKRESULT result;
  
  arg1 = (AK::SoundEngine::PreparationType)jarg1; 
  arg2 = (AkGroupType)jarg2; 
  arg3 = (AkUInt32)jarg3; 
  arg4 = jarg4;
  arg5 = (AkUInt32)jarg5; 
  arg6 = (AkBankCallbackFunc) AkCallbackSerializer::BankCallback; 
  arg7 = jarg7; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::PrepareGameSyncs(arg1,arg2,arg3,arg4,arg5,arg6,arg7);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::PrepareGameSyncs(AK::SoundEngine::PreparationType,AkGroupType,AkUInt32,AkUInt32 *,AkUInt32,AkBankCallbackFunc,void *): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AddListener(AkGameObjectID jarg1, AkGameObjectID jarg2) {
  int jresult ;
  AkGameObjectID arg1 ;
  AkGameObjectID arg2 ;
  AKRESULT result;
  
  arg1 = jarg1; 
  arg2 = jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::AddListener(arg1,arg2);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::AddListener(AkGameObjectID,AkGameObjectID): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RemoveListener(AkGameObjectID jarg1, AkGameObjectID jarg2) {
  int jresult ;
  AkGameObjectID arg1 ;
  AkGameObjectID arg2 ;
  AKRESULT result;
  
  arg1 = jarg1; 
  arg2 = jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::RemoveListener(arg1,arg2);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::RemoveListener(AkGameObjectID,AkGameObjectID): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AddDefaultListener(AkGameObjectID jarg1) {
  int jresult ;
  AkGameObjectID arg1 ;
  AKRESULT result;
  
  arg1 = jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::AddDefaultListener(arg1);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::AddDefaultListener(AkGameObjectID): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RemoveDefaultListener(AkGameObjectID jarg1) {
  int jresult ;
  AkGameObjectID arg1 ;
  AKRESULT result;
  
  arg1 = jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::RemoveDefaultListener(arg1);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::RemoveDefaultListener(AkGameObjectID): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ResetListenersToDefault(AkGameObjectID jarg1) {
  int jresult ;
  AkGameObjectID arg1 ;
  AKRESULT result;
  
  arg1 = jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::ResetListenersToDefault(arg1);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::ResetListenersToDefault(AkGameObjectID): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetListenerSpatialization__SWIG_0(AkGameObjectID jarg1, unsigned int jarg2, void * jarg3, float* jarg4) {
  int jresult ;
  AkGameObjectID arg1 ;
  bool arg2 ;
  AkChannelConfig arg3 ;
  AK::SpeakerVolumes::VectorPtr arg4 ;
  AkChannelConfig *argp3 ;
  AKRESULT result;
  
  arg1 = jarg1; 
  arg2 = jarg2 ? true : false; 
  argp3 = (AkChannelConfig *)jarg3; 
  if (!argp3) {
    return AK_Fail;
  }
  arg3 = *argp3; 
  arg4 = jarg4;
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::SetListenerSpatialization(arg1,arg2,arg3,arg4);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::SetListenerSpatialization(AkGameObjectID,bool,AkChannelConfig,AK::SpeakerVolumes::VectorPtr): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetListenerSpatialization__SWIG_1(AkGameObjectID jarg1, unsigned int jarg2, void * jarg3) {
  int jresult ;
  AkGameObjectID arg1 ;
  bool arg2 ;
  AkChannelConfig arg3 ;
  AkChannelConfig *argp3 ;
  AKRESULT result;
  
  arg1 = jarg1; 
  arg2 = jarg2 ? true : false; 
  argp3 = (AkChannelConfig *)jarg3; 
  if (!argp3) {
    return AK_Fail;
  }
  arg3 = *argp3; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::SetListenerSpatialization(arg1,arg2,arg3);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::SetListenerSpatialization(AkGameObjectID,bool,AkChannelConfig): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetRTPCValue__SWIG_0(unsigned int jarg1, float jarg2, AkGameObjectID jarg3, int jarg4, int jarg5, unsigned int jarg6) {
  int jresult ;
  AkRtpcID arg1 ;
  AkRtpcValue arg2 ;
  AkGameObjectID arg3 ;
  AkTimeMs arg4 ;
  AkCurveInterpolation arg5 ;
  bool arg6 ;
  AKRESULT result;
  
  arg1 = (AkRtpcID)jarg1; 
  arg2 = (AkRtpcValue)jarg2; 
  arg3 = jarg3; 
  arg4 = (AkTimeMs)jarg4; 
  arg5 = (AkCurveInterpolation)jarg5; 
  arg6 = jarg6 ? true : false; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::SetRTPCValue(arg1,arg2,arg3,arg4,arg5,arg6);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::SetRTPCValue(AkRtpcID,AkRtpcValue,AkGameObjectID,AkTimeMs,AkCurveInterpolation,bool): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetRTPCValue__SWIG_1(unsigned int jarg1, float jarg2, AkGameObjectID jarg3, int jarg4, int jarg5) {
  int jresult ;
  AkRtpcID arg1 ;
  AkRtpcValue arg2 ;
  AkGameObjectID arg3 ;
  AkTimeMs arg4 ;
  AkCurveInterpolation arg5 ;
  AKRESULT result;
  
  arg1 = (AkRtpcID)jarg1; 
  arg2 = (AkRtpcValue)jarg2; 
  arg3 = jarg3; 
  arg4 = (AkTimeMs)jarg4; 
  arg5 = (AkCurveInterpolation)jarg5; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::SetRTPCValue(arg1,arg2,arg3,arg4,arg5);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::SetRTPCValue(AkRtpcID,AkRtpcValue,AkGameObjectID,AkTimeMs,AkCurveInterpolation): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetRTPCValue__SWIG_2(unsigned int jarg1, float jarg2, AkGameObjectID jarg3, int jarg4) {
  int jresult ;
  AkRtpcID arg1 ;
  AkRtpcValue arg2 ;
  AkGameObjectID arg3 ;
  AkTimeMs arg4 ;
  AKRESULT result;
  
  arg1 = (AkRtpcID)jarg1; 
  arg2 = (AkRtpcValue)jarg2; 
  arg3 = jarg3; 
  arg4 = (AkTimeMs)jarg4; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::SetRTPCValue(arg1,arg2,arg3,arg4);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::SetRTPCValue(AkRtpcID,AkRtpcValue,AkGameObjectID,AkTimeMs): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetRTPCValue__SWIG_3(unsigned int jarg1, float jarg2, AkGameObjectID jarg3) {
  int jresult ;
  AkRtpcID arg1 ;
  AkRtpcValue arg2 ;
  AkGameObjectID arg3 ;
  AKRESULT result;
  
  arg1 = (AkRtpcID)jarg1; 
  arg2 = (AkRtpcValue)jarg2; 
  arg3 = jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::SetRTPCValue(arg1,arg2,arg3);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::SetRTPCValue(AkRtpcID,AkRtpcValue,AkGameObjectID): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetRTPCValue__SWIG_4(unsigned int jarg1, float jarg2) {
  int jresult ;
  AkRtpcID arg1 ;
  AkRtpcValue arg2 ;
  AKRESULT result;
  
  arg1 = (AkRtpcID)jarg1; 
  arg2 = (AkRtpcValue)jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::SetRTPCValue(arg1,arg2);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::SetRTPCValue(AkRtpcID,AkRtpcValue): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetRTPCValue__SWIG_5(wchar_t* jarg1, float jarg2, AkGameObjectID jarg3, int jarg4, int jarg5, unsigned int jarg6) {
  int jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  AkRtpcValue arg2 ;
  AkGameObjectID arg3 ;
  AkTimeMs arg4 ;
  AkCurveInterpolation arg5 ;
  bool arg6 ;
  AKRESULT result;
  
  arg1 = (wchar_t *)jarg1; 
  arg2 = (AkRtpcValue)jarg2; 
  arg3 = jarg3; 
  arg4 = (AkTimeMs)jarg4; 
  arg5 = (AkCurveInterpolation)jarg5; 
  arg6 = jarg6 ? true : false; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::SetRTPCValue((wchar_t const *)arg1,arg2,arg3,arg4,arg5,arg6);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::SetRTPCValue(wchar_t const *,AkRtpcValue,AkGameObjectID,AkTimeMs,AkCurveInterpolation,bool): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetRTPCValue__SWIG_6(wchar_t* jarg1, float jarg2, AkGameObjectID jarg3, int jarg4, int jarg5) {
  int jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  AkRtpcValue arg2 ;
  AkGameObjectID arg3 ;
  AkTimeMs arg4 ;
  AkCurveInterpolation arg5 ;
  AKRESULT result;
  
  arg1 = (wchar_t *)jarg1; 
  arg2 = (AkRtpcValue)jarg2; 
  arg3 = jarg3; 
  arg4 = (AkTimeMs)jarg4; 
  arg5 = (AkCurveInterpolation)jarg5; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::SetRTPCValue((wchar_t const *)arg1,arg2,arg3,arg4,arg5);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::SetRTPCValue(wchar_t const *,AkRtpcValue,AkGameObjectID,AkTimeMs,AkCurveInterpolation): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetRTPCValue__SWIG_7(wchar_t* jarg1, float jarg2, AkGameObjectID jarg3, int jarg4) {
  int jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  AkRtpcValue arg2 ;
  AkGameObjectID arg3 ;
  AkTimeMs arg4 ;
  AKRESULT result;
  
  arg1 = (wchar_t *)jarg1; 
  arg2 = (AkRtpcValue)jarg2; 
  arg3 = jarg3; 
  arg4 = (AkTimeMs)jarg4; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::SetRTPCValue((wchar_t const *)arg1,arg2,arg3,arg4);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::SetRTPCValue(wchar_t const *,AkRtpcValue,AkGameObjectID,AkTimeMs): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetRTPCValue__SWIG_8(wchar_t* jarg1, float jarg2, AkGameObjectID jarg3) {
  int jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  AkRtpcValue arg2 ;
  AkGameObjectID arg3 ;
  AKRESULT result;
  
  arg1 = (wchar_t *)jarg1; 
  arg2 = (AkRtpcValue)jarg2; 
  arg3 = jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::SetRTPCValue((wchar_t const *)arg1,arg2,arg3);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::SetRTPCValue(wchar_t const *,AkRtpcValue,AkGameObjectID): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetRTPCValue__SWIG_9(wchar_t* jarg1, float jarg2) {
  int jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  AkRtpcValue arg2 ;
  AKRESULT result;
  
  arg1 = (wchar_t *)jarg1; 
  arg2 = (AkRtpcValue)jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::SetRTPCValue((wchar_t const *)arg1,arg2);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::SetRTPCValue(wchar_t const *,AkRtpcValue): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetRTPCValueByPlayingID__SWIG_0(unsigned int jarg1, float jarg2, unsigned int jarg3, int jarg4, int jarg5, unsigned int jarg6) {
  int jresult ;
  AkRtpcID arg1 ;
  AkRtpcValue arg2 ;
  AkPlayingID arg3 ;
  AkTimeMs arg4 ;
  AkCurveInterpolation arg5 ;
  bool arg6 ;
  AKRESULT result;
  
  arg1 = (AkRtpcID)jarg1; 
  arg2 = (AkRtpcValue)jarg2; 
  arg3 = (AkPlayingID)jarg3; 
  arg4 = (AkTimeMs)jarg4; 
  arg5 = (AkCurveInterpolation)jarg5; 
  arg6 = jarg6 ? true : false; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::SetRTPCValueByPlayingID(arg1,arg2,arg3,arg4,arg5,arg6);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::SetRTPCValueByPlayingID(AkRtpcID,AkRtpcValue,AkPlayingID,AkTimeMs,AkCurveInterpolation,bool): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetRTPCValueByPlayingID__SWIG_1(unsigned int jarg1, float jarg2, unsigned int jarg3, int jarg4, int jarg5) {
  int jresult ;
  AkRtpcID arg1 ;
  AkRtpcValue arg2 ;
  AkPlayingID arg3 ;
  AkTimeMs arg4 ;
  AkCurveInterpolation arg5 ;
  AKRESULT result;
  
  arg1 = (AkRtpcID)jarg1; 
  arg2 = (AkRtpcValue)jarg2; 
  arg3 = (AkPlayingID)jarg3; 
  arg4 = (AkTimeMs)jarg4; 
  arg5 = (AkCurveInterpolation)jarg5; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::SetRTPCValueByPlayingID(arg1,arg2,arg3,arg4,arg5);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::SetRTPCValueByPlayingID(AkRtpcID,AkRtpcValue,AkPlayingID,AkTimeMs,AkCurveInterpolation): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetRTPCValueByPlayingID__SWIG_2(unsigned int jarg1, float jarg2, unsigned int jarg3, int jarg4) {
  int jresult ;
  AkRtpcID arg1 ;
  AkRtpcValue arg2 ;
  AkPlayingID arg3 ;
  AkTimeMs arg4 ;
  AKRESULT result;
  
  arg1 = (AkRtpcID)jarg1; 
  arg2 = (AkRtpcValue)jarg2; 
  arg3 = (AkPlayingID)jarg3; 
  arg4 = (AkTimeMs)jarg4; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::SetRTPCValueByPlayingID(arg1,arg2,arg3,arg4);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::SetRTPCValueByPlayingID(AkRtpcID,AkRtpcValue,AkPlayingID,AkTimeMs): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetRTPCValueByPlayingID__SWIG_3(unsigned int jarg1, float jarg2, unsigned int jarg3) {
  int jresult ;
  AkRtpcID arg1 ;
  AkRtpcValue arg2 ;
  AkPlayingID arg3 ;
  AKRESULT result;
  
  arg1 = (AkRtpcID)jarg1; 
  arg2 = (AkRtpcValue)jarg2; 
  arg3 = (AkPlayingID)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::SetRTPCValueByPlayingID(arg1,arg2,arg3);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::SetRTPCValueByPlayingID(AkRtpcID,AkRtpcValue,AkPlayingID): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetRTPCValueByPlayingID__SWIG_4(wchar_t* jarg1, float jarg2, unsigned int jarg3, int jarg4, int jarg5, unsigned int jarg6) {
  int jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  AkRtpcValue arg2 ;
  AkPlayingID arg3 ;
  AkTimeMs arg4 ;
  AkCurveInterpolation arg5 ;
  bool arg6 ;
  AKRESULT result;
  
  arg1 = (wchar_t *)jarg1; 
  arg2 = (AkRtpcValue)jarg2; 
  arg3 = (AkPlayingID)jarg3; 
  arg4 = (AkTimeMs)jarg4; 
  arg5 = (AkCurveInterpolation)jarg5; 
  arg6 = jarg6 ? true : false; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::SetRTPCValueByPlayingID((wchar_t const *)arg1,arg2,arg3,arg4,arg5,arg6);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::SetRTPCValueByPlayingID(wchar_t const *,AkRtpcValue,AkPlayingID,AkTimeMs,AkCurveInterpolation,bool): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetRTPCValueByPlayingID__SWIG_5(wchar_t* jarg1, float jarg2, unsigned int jarg3, int jarg4, int jarg5) {
  int jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  AkRtpcValue arg2 ;
  AkPlayingID arg3 ;
  AkTimeMs arg4 ;
  AkCurveInterpolation arg5 ;
  AKRESULT result;
  
  arg1 = (wchar_t *)jarg1; 
  arg2 = (AkRtpcValue)jarg2; 
  arg3 = (AkPlayingID)jarg3; 
  arg4 = (AkTimeMs)jarg4; 
  arg5 = (AkCurveInterpolation)jarg5; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::SetRTPCValueByPlayingID((wchar_t const *)arg1,arg2,arg3,arg4,arg5);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::SetRTPCValueByPlayingID(wchar_t const *,AkRtpcValue,AkPlayingID,AkTimeMs,AkCurveInterpolation): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetRTPCValueByPlayingID__SWIG_6(wchar_t* jarg1, float jarg2, unsigned int jarg3, int jarg4) {
  int jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  AkRtpcValue arg2 ;
  AkPlayingID arg3 ;
  AkTimeMs arg4 ;
  AKRESULT result;
  
  arg1 = (wchar_t *)jarg1; 
  arg2 = (AkRtpcValue)jarg2; 
  arg3 = (AkPlayingID)jarg3; 
  arg4 = (AkTimeMs)jarg4; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::SetRTPCValueByPlayingID((wchar_t const *)arg1,arg2,arg3,arg4);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::SetRTPCValueByPlayingID(wchar_t const *,AkRtpcValue,AkPlayingID,AkTimeMs): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetRTPCValueByPlayingID__SWIG_7(wchar_t* jarg1, float jarg2, unsigned int jarg3) {
  int jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  AkRtpcValue arg2 ;
  AkPlayingID arg3 ;
  AKRESULT result;
  
  arg1 = (wchar_t *)jarg1; 
  arg2 = (AkRtpcValue)jarg2; 
  arg3 = (AkPlayingID)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::SetRTPCValueByPlayingID((wchar_t const *)arg1,arg2,arg3);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::SetRTPCValueByPlayingID(wchar_t const *,AkRtpcValue,AkPlayingID): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ResetRTPCValue__SWIG_0(unsigned int jarg1, AkGameObjectID jarg2, int jarg3, int jarg4, unsigned int jarg5) {
  int jresult ;
  AkRtpcID arg1 ;
  AkGameObjectID arg2 ;
  AkTimeMs arg3 ;
  AkCurveInterpolation arg4 ;
  bool arg5 ;
  AKRESULT result;
  
  arg1 = (AkRtpcID)jarg1; 
  arg2 = jarg2; 
  arg3 = (AkTimeMs)jarg3; 
  arg4 = (AkCurveInterpolation)jarg4; 
  arg5 = jarg5 ? true : false; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::ResetRTPCValue(arg1,arg2,arg3,arg4,arg5);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::ResetRTPCValue(AkRtpcID,AkGameObjectID,AkTimeMs,AkCurveInterpolation,bool): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ResetRTPCValue__SWIG_1(unsigned int jarg1, AkGameObjectID jarg2, int jarg3, int jarg4) {
  int jresult ;
  AkRtpcID arg1 ;
  AkGameObjectID arg2 ;
  AkTimeMs arg3 ;
  AkCurveInterpolation arg4 ;
  AKRESULT result;
  
  arg1 = (AkRtpcID)jarg1; 
  arg2 = jarg2; 
  arg3 = (AkTimeMs)jarg3; 
  arg4 = (AkCurveInterpolation)jarg4; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::ResetRTPCValue(arg1,arg2,arg3,arg4);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::ResetRTPCValue(AkRtpcID,AkGameObjectID,AkTimeMs,AkCurveInterpolation): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ResetRTPCValue__SWIG_2(unsigned int jarg1, AkGameObjectID jarg2, int jarg3) {
  int jresult ;
  AkRtpcID arg1 ;
  AkGameObjectID arg2 ;
  AkTimeMs arg3 ;
  AKRESULT result;
  
  arg1 = (AkRtpcID)jarg1; 
  arg2 = jarg2; 
  arg3 = (AkTimeMs)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::ResetRTPCValue(arg1,arg2,arg3);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::ResetRTPCValue(AkRtpcID,AkGameObjectID,AkTimeMs): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ResetRTPCValue__SWIG_3(unsigned int jarg1, AkGameObjectID jarg2) {
  int jresult ;
  AkRtpcID arg1 ;
  AkGameObjectID arg2 ;
  AKRESULT result;
  
  arg1 = (AkRtpcID)jarg1; 
  arg2 = jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::ResetRTPCValue(arg1,arg2);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::ResetRTPCValue(AkRtpcID,AkGameObjectID): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ResetRTPCValue__SWIG_4(unsigned int jarg1) {
  int jresult ;
  AkRtpcID arg1 ;
  AKRESULT result;
  
  arg1 = (AkRtpcID)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::ResetRTPCValue(arg1);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::ResetRTPCValue(AkRtpcID): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ResetRTPCValue__SWIG_5(wchar_t* jarg1, AkGameObjectID jarg2, int jarg3, int jarg4, unsigned int jarg5) {
  int jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  AkGameObjectID arg2 ;
  AkTimeMs arg3 ;
  AkCurveInterpolation arg4 ;
  bool arg5 ;
  AKRESULT result;
  
  arg1 = (wchar_t *)jarg1; 
  arg2 = jarg2; 
  arg3 = (AkTimeMs)jarg3; 
  arg4 = (AkCurveInterpolation)jarg4; 
  arg5 = jarg5 ? true : false; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::ResetRTPCValue((wchar_t const *)arg1,arg2,arg3,arg4,arg5);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::ResetRTPCValue(wchar_t const *,AkGameObjectID,AkTimeMs,AkCurveInterpolation,bool): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ResetRTPCValue__SWIG_6(wchar_t* jarg1, AkGameObjectID jarg2, int jarg3, int jarg4) {
  int jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  AkGameObjectID arg2 ;
  AkTimeMs arg3 ;
  AkCurveInterpolation arg4 ;
  AKRESULT result;
  
  arg1 = (wchar_t *)jarg1; 
  arg2 = jarg2; 
  arg3 = (AkTimeMs)jarg3; 
  arg4 = (AkCurveInterpolation)jarg4; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::ResetRTPCValue((wchar_t const *)arg1,arg2,arg3,arg4);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::ResetRTPCValue(wchar_t const *,AkGameObjectID,AkTimeMs,AkCurveInterpolation): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ResetRTPCValue__SWIG_7(wchar_t* jarg1, AkGameObjectID jarg2, int jarg3) {
  int jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  AkGameObjectID arg2 ;
  AkTimeMs arg3 ;
  AKRESULT result;
  
  arg1 = (wchar_t *)jarg1; 
  arg2 = jarg2; 
  arg3 = (AkTimeMs)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::ResetRTPCValue((wchar_t const *)arg1,arg2,arg3);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::ResetRTPCValue(wchar_t const *,AkGameObjectID,AkTimeMs): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ResetRTPCValue__SWIG_8(wchar_t* jarg1, AkGameObjectID jarg2) {
  int jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  AkGameObjectID arg2 ;
  AKRESULT result;
  
  arg1 = (wchar_t *)jarg1; 
  arg2 = jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::ResetRTPCValue((wchar_t const *)arg1,arg2);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::ResetRTPCValue(wchar_t const *,AkGameObjectID): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ResetRTPCValue__SWIG_9(wchar_t* jarg1) {
  int jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  AKRESULT result;
  
  arg1 = (wchar_t *)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::ResetRTPCValue((wchar_t const *)arg1);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::ResetRTPCValue(wchar_t const *): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetSwitch__SWIG_0(unsigned int jarg1, unsigned int jarg2, AkGameObjectID jarg3) {
  int jresult ;
  AkSwitchGroupID arg1 ;
  AkSwitchStateID arg2 ;
  AkGameObjectID arg3 ;
  AKRESULT result;
  
  arg1 = (AkSwitchGroupID)jarg1; 
  arg2 = (AkSwitchStateID)jarg2; 
  arg3 = jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::SetSwitch(arg1,arg2,arg3);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::SetSwitch(AkSwitchGroupID,AkSwitchStateID,AkGameObjectID): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetSwitch__SWIG_1(wchar_t* jarg1, wchar_t* jarg2, AkGameObjectID jarg3) {
  int jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  AkGameObjectID arg3 ;
  AKRESULT result;
  
  arg1 = (wchar_t *)jarg1; 
  arg2 = (wchar_t *)jarg2; 
  arg3 = jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::SetSwitch((wchar_t const *)arg1,(wchar_t const *)arg2,arg3);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::SetSwitch(wchar_t const *,wchar_t const *,AkGameObjectID): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PostTrigger__SWIG_0(unsigned int jarg1, AkGameObjectID jarg2) {
  int jresult ;
  AkTriggerID arg1 ;
  AkGameObjectID arg2 ;
  AKRESULT result;
  
  arg1 = (AkTriggerID)jarg1; 
  arg2 = jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::PostTrigger(arg1,arg2);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::PostTrigger(AkTriggerID,AkGameObjectID): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PostTrigger__SWIG_1(wchar_t* jarg1, AkGameObjectID jarg2) {
  int jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  AkGameObjectID arg2 ;
  AKRESULT result;
  
  arg1 = (wchar_t *)jarg1; 
  arg2 = jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::PostTrigger((wchar_t const *)arg1,arg2);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::PostTrigger(wchar_t const *,AkGameObjectID): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetState__SWIG_0(unsigned int jarg1, unsigned int jarg2) {
  int jresult ;
  AkStateGroupID arg1 ;
  AkStateID arg2 ;
  AKRESULT result;
  
  arg1 = (AkStateGroupID)jarg1; 
  arg2 = (AkStateID)jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::SetState(arg1,arg2);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::SetState(AkStateGroupID,AkStateID): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetState__SWIG_1(wchar_t* jarg1, wchar_t* jarg2) {
  int jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  AKRESULT result;
  
  arg1 = (wchar_t *)jarg1; 
  arg2 = (wchar_t *)jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::SetState((wchar_t const *)arg1,(wchar_t const *)arg2);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::SetState(wchar_t const *,wchar_t const *): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetGameObjectAuxSendValues(AkGameObjectID jarg1, void * jarg2, unsigned int jarg3) {
  int jresult ;
  AkGameObjectID arg1 ;
  AkAuxSendValue *arg2 = (AkAuxSendValue *) 0 ;
  AkUInt32 arg3 ;
  AKRESULT result;
  
  arg1 = jarg1; 
  arg2 = (AkAuxSendValue *)jarg2; 
  arg3 = (AkUInt32)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::SetGameObjectAuxSendValues(arg1,arg2,arg3);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::SetGameObjectAuxSendValues(AkGameObjectID,AkAuxSendValue *,AkUInt32): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetGameObjectOutputBusVolume(AkGameObjectID jarg1, AkGameObjectID jarg2, float jarg3) {
  int jresult ;
  AkGameObjectID arg1 ;
  AkGameObjectID arg2 ;
  AkReal32 arg3 ;
  AKRESULT result;
  
  arg1 = jarg1; 
  arg2 = jarg2; 
  arg3 = (AkReal32)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::SetGameObjectOutputBusVolume(arg1,arg2,arg3);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::SetGameObjectOutputBusVolume(AkGameObjectID,AkGameObjectID,AkReal32): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetActorMixerEffect(unsigned int jarg1, unsigned int jarg2, unsigned int jarg3) {
  int jresult ;
  AkUniqueID arg1 ;
  AkUInt32 arg2 ;
  AkUniqueID arg3 ;
  AKRESULT result;
  
  arg1 = (AkUniqueID)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  arg3 = (AkUniqueID)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::SetActorMixerEffect(arg1,arg2,arg3);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::SetActorMixerEffect(AkUniqueID,AkUInt32,AkUniqueID): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetBusEffect__SWIG_0(unsigned int jarg1, unsigned int jarg2, unsigned int jarg3) {
  int jresult ;
  AkUniqueID arg1 ;
  AkUInt32 arg2 ;
  AkUniqueID arg3 ;
  AKRESULT result;
  
  arg1 = (AkUniqueID)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  arg3 = (AkUniqueID)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::SetBusEffect(arg1,arg2,arg3);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::SetBusEffect(AkUniqueID,AkUInt32,AkUniqueID): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetBusEffect__SWIG_1(wchar_t* jarg1, unsigned int jarg2, unsigned int jarg3) {
  int jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  AkUInt32 arg2 ;
  AkUniqueID arg3 ;
  AKRESULT result;
  
  arg1 = (wchar_t *)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  arg3 = (AkUniqueID)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::SetBusEffect((wchar_t const *)arg1,arg2,arg3);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::SetBusEffect(wchar_t const *,AkUInt32,AkUniqueID): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetOutputDeviceEffect(unsigned long long jarg1, unsigned int jarg2, unsigned int jarg3) {
  int jresult ;
  AkOutputDeviceID arg1 ;
  AkUInt32 arg2 ;
  AkUniqueID arg3 ;
  AKRESULT result;
  
  arg1 = (AkOutputDeviceID)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  arg3 = (AkUniqueID)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::SetOutputDeviceEffect(arg1,arg2,arg3);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::SetOutputDeviceEffect(AkOutputDeviceID,AkUInt32,AkUniqueID): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetMixer__SWIG_0(unsigned int jarg1, unsigned int jarg2) {
  int jresult ;
  AkUniqueID arg1 ;
  AkUniqueID arg2 ;
  AKRESULT result;
  
  arg1 = (AkUniqueID)jarg1; 
  arg2 = (AkUniqueID)jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::SetMixer(arg1,arg2);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::SetMixer(AkUniqueID,AkUniqueID): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetMixer__SWIG_1(wchar_t* jarg1, unsigned int jarg2) {
  int jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  AkUniqueID arg2 ;
  AKRESULT result;
  
  arg1 = (wchar_t *)jarg1; 
  arg2 = (AkUniqueID)jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::SetMixer((wchar_t const *)arg1,arg2);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::SetMixer(wchar_t const *,AkUniqueID): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetBusConfig__SWIG_0(unsigned int jarg1, void * jarg2) {
  int jresult ;
  AkUniqueID arg1 ;
  AkChannelConfig arg2 ;
  AkChannelConfig *argp2 ;
  AKRESULT result;
  
  arg1 = (AkUniqueID)jarg1; 
  argp2 = (AkChannelConfig *)jarg2; 
  if (!argp2) {
    return AK_Fail;
  }
  arg2 = *argp2; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::SetBusConfig(arg1,arg2);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::SetBusConfig(AkUniqueID,AkChannelConfig): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetBusConfig__SWIG_1(wchar_t* jarg1, void * jarg2) {
  int jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  AkChannelConfig arg2 ;
  AkChannelConfig *argp2 ;
  AKRESULT result;
  
  arg1 = (wchar_t *)jarg1; 
  argp2 = (AkChannelConfig *)jarg2; 
  if (!argp2) {
    return AK_Fail;
  }
  arg2 = *argp2; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::SetBusConfig((wchar_t const *)arg1,arg2);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::SetBusConfig(wchar_t const *,AkChannelConfig): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetObjectObstructionAndOcclusion(AkGameObjectID jarg1, AkGameObjectID jarg2, float jarg3, float jarg4) {
  int jresult ;
  AkGameObjectID arg1 ;
  AkGameObjectID arg2 ;
  AkReal32 arg3 ;
  AkReal32 arg4 ;
  AKRESULT result;
  
  arg1 = jarg1; 
  arg2 = jarg2; 
  arg3 = (AkReal32)jarg3; 
  arg4 = (AkReal32)jarg4; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::SetObjectObstructionAndOcclusion(arg1,arg2,arg3,arg4);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::SetObjectObstructionAndOcclusion(AkGameObjectID,AkGameObjectID,AkReal32,AkReal32): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetMultipleObstructionAndOcclusion(AkGameObjectID jarg1, AkGameObjectID jarg2, void * jarg3, unsigned int jarg4) {
  int jresult ;
  AkGameObjectID arg1 ;
  AkGameObjectID arg2 ;
  AkObstructionOcclusionValues *arg3 = (AkObstructionOcclusionValues *) 0 ;
  AkUInt32 arg4 ;
  AKRESULT result;
  
  arg1 = jarg1; 
  arg2 = jarg2; 
  arg3 = (AkObstructionOcclusionValues *)jarg3; 
  arg4 = (AkUInt32)jarg4; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::SetMultipleObstructionAndOcclusion(arg1,arg2,arg3,arg4);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::SetMultipleObstructionAndOcclusion(AkGameObjectID,AkGameObjectID,AkObstructionOcclusionValues *,AkUInt32): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StartOutputCapture(wchar_t* jarg1) {
  int jresult ;
  AkOSChar *arg1 = (AkOSChar *) 0 ;
  AKRESULT result;
  
  arg1 = (AkOSChar *)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::StartOutputCapture((wchar_t const *)arg1);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::StartOutputCapture(AkOSChar const *): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StopOutputCapture() {
  int jresult ;
  AKRESULT result;
  
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::StopOutputCapture();  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::StopOutputCapture(): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AddOutputCaptureMarker(char * jarg1) {
  int jresult ;
  char *arg1 = (char *) 0 ;
  AKRESULT result;
  
  arg1 = (char *)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::AddOutputCaptureMarker((char const *)arg1);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::AddOutputCaptureMarker(char const *): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StartProfilerCapture(wchar_t* jarg1) {
  int jresult ;
  AkOSChar *arg1 = (AkOSChar *) 0 ;
  AKRESULT result;
  
  arg1 = (AkOSChar *)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::StartProfilerCapture((wchar_t const *)arg1);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::StartProfilerCapture(AkOSChar const *): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StopProfilerCapture() {
  int jresult ;
  AKRESULT result;
  
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::StopProfilerCapture();  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::StopProfilerCapture(): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RemoveOutput(unsigned long long jarg1) {
  int jresult ;
  AkOutputDeviceID arg1 ;
  AKRESULT result;
  
  arg1 = (AkOutputDeviceID)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::RemoveOutput(arg1);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::RemoveOutput(AkOutputDeviceID): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ReplaceOutput__SWIG_0(void * jarg1, unsigned long long jarg2, unsigned long long * jarg3) {
  int jresult ;
  AkOutputSettings *arg1 = 0 ;
  AkOutputDeviceID arg2 ;
  AkOutputDeviceID *arg3 = (AkOutputDeviceID *) 0 ;
  AKRESULT result;
  
  arg1 = (AkOutputSettings *)jarg1;
  if (!arg1) {
    return AK_Fail;
  } 
  arg2 = (AkOutputDeviceID)jarg2; 
  arg3 = (AkOutputDeviceID *)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::ReplaceOutput((AkOutputSettings const &)*arg1,arg2,arg3);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::ReplaceOutput(AkOutputSettings const &,AkOutputDeviceID,AkOutputDeviceID *): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ReplaceOutput__SWIG_1(void * jarg1, unsigned long long jarg2) {
  int jresult ;
  AkOutputSettings *arg1 = 0 ;
  AkOutputDeviceID arg2 ;
  AKRESULT result;
  
  arg1 = (AkOutputSettings *)jarg1;
  if (!arg1) {
    return AK_Fail;
  } 
  arg2 = (AkOutputDeviceID)jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::ReplaceOutput((AkOutputSettings const &)*arg1,arg2);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::ReplaceOutput(AkOutputSettings const &,AkOutputDeviceID): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_GetOutputID__SWIG_0(unsigned int jarg1, unsigned int jarg2) {
  unsigned long long jresult ;
  AkUniqueID arg1 ;
  AkUInt32 arg2 ;
  AkOutputDeviceID result;
  
  arg1 = (AkUniqueID)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AkOutputDeviceID)AK::SoundEngine::GetOutputID(arg1,arg2);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::GetOutputID(AkUniqueID,AkUInt32): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_INVALID_OUTPUT_DEVICE_ID; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_GetOutputID__SWIG_1(char * jarg1, unsigned int jarg2) {
  unsigned long long jresult ;
  char *arg1 = (char *) 0 ;
  AkUInt32 arg2 ;
  AkOutputDeviceID result;
  
  arg1 = (char *)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AkOutputDeviceID)AK::SoundEngine::GetOutputID((char const *)arg1,arg2);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::GetOutputID(char const *,AkUInt32): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_INVALID_OUTPUT_DEVICE_ID; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetBusDevice__SWIG_0(unsigned int jarg1, unsigned int jarg2) {
  int jresult ;
  AkUniqueID arg1 ;
  AkUniqueID arg2 ;
  AKRESULT result;
  
  arg1 = (AkUniqueID)jarg1; 
  arg2 = (AkUniqueID)jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::SetBusDevice(arg1,arg2);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::SetBusDevice(AkUniqueID,AkUniqueID): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetBusDevice__SWIG_1(char * jarg1, char * jarg2) {
  int jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  AKRESULT result;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::SetBusDevice((char const *)arg1,(char const *)arg2);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::SetBusDevice(char const *,char const *): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetDeviceList__SWIG_0(unsigned int jarg1, unsigned int jarg2, unsigned int * jarg3, void * jarg4) {
  int jresult ;
  AkUInt32 arg1 ;
  AkUInt32 arg2 ;
  AkUInt32 *arg3 = 0 ;
  AkDeviceDescription *arg4 = (AkDeviceDescription *) 0 ;
  AKRESULT result;
  
  arg1 = (AkUInt32)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  arg3 = (AkUInt32 *)jarg3; 
  arg4 = (AkDeviceDescription *)jarg4; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::GetDeviceList(arg1,arg2,*arg3,arg4);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::GetDeviceList(AkUInt32,AkUInt32,AkUInt32 &,AkDeviceDescription *): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetDeviceList__SWIG_1(unsigned int jarg1, unsigned int * jarg2, void * jarg3) {
  int jresult ;
  AkUniqueID arg1 ;
  AkUInt32 *arg2 = 0 ;
  AkDeviceDescription *arg3 = (AkDeviceDescription *) 0 ;
  AKRESULT result;
  
  arg1 = (AkUniqueID)jarg1; 
  arg2 = (AkUInt32 *)jarg2; 
  arg3 = (AkDeviceDescription *)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::GetDeviceList(arg1,*arg2,arg3);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::GetDeviceList(AkUniqueID,AkUInt32 &,AkDeviceDescription *): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetOutputVolume(unsigned long long jarg1, float jarg2) {
  int jresult ;
  AkOutputDeviceID arg1 ;
  AkReal32 arg2 ;
  AKRESULT result;
  
  arg1 = (AkOutputDeviceID)jarg1; 
  arg2 = (AkReal32)jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::SetOutputVolume(arg1,arg2);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::SetOutputVolume(AkOutputDeviceID,AkReal32): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetDeviceSpatialAudioSupport(unsigned int jarg1) {
  int jresult ;
  AkUInt32 arg1 ;
  AKRESULT result;
  
  arg1 = (AkUInt32)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::GetDeviceSpatialAudioSupport(arg1);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::GetDeviceSpatialAudioSupport(AkUInt32): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Suspend__SWIG_0(unsigned int jarg1) {
  int jresult ;
  bool arg1 ;
  AKRESULT result;
  
  arg1 = jarg1 ? true : false; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::Suspend(arg1);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::Suspend(bool): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Suspend__SWIG_1() {
  int jresult ;
  AKRESULT result;
  
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::Suspend();  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::Suspend(): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WakeupFromSuspend() {
  int jresult ;
  AKRESULT result;
  
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::WakeupFromSuspend();  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::WakeupFromSuspend(): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GetBufferTick() {
  unsigned int jresult ;
  AkUInt32 result;
  
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AkUInt32)AK::SoundEngine::GetBufferTick();  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::GetBufferTick(): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return 0; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_GetSampleTick() {
  unsigned long long jresult ;
  AkUInt64 result;
  
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AkUInt64)AK::SoundEngine::GetSampleTick();  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::GetSampleTick(): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return 0; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkSegmentInfo_iCurrentPosition_set(void * jarg1, int jarg2) {
  AkSegmentInfo *arg1 = (AkSegmentInfo *) 0 ;
  AkTimeMs arg2 ;
  
  arg1 = (AkSegmentInfo *)jarg1; 
  arg2 = (AkTimeMs)jarg2; 
  if (arg1) (arg1)->iCurrentPosition = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AkSegmentInfo_iCurrentPosition_get(void * jarg1) {
  int jresult ;
  AkSegmentInfo *arg1 = (AkSegmentInfo *) 0 ;
  AkTimeMs result;
  
  arg1 = (AkSegmentInfo *)jarg1; 
  result = (AkTimeMs) ((arg1)->iCurrentPosition);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkSegmentInfo_iPreEntryDuration_set(void * jarg1, int jarg2) {
  AkSegmentInfo *arg1 = (AkSegmentInfo *) 0 ;
  AkTimeMs arg2 ;
  
  arg1 = (AkSegmentInfo *)jarg1; 
  arg2 = (AkTimeMs)jarg2; 
  if (arg1) (arg1)->iPreEntryDuration = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AkSegmentInfo_iPreEntryDuration_get(void * jarg1) {
  int jresult ;
  AkSegmentInfo *arg1 = (AkSegmentInfo *) 0 ;
  AkTimeMs result;
  
  arg1 = (AkSegmentInfo *)jarg1; 
  result = (AkTimeMs) ((arg1)->iPreEntryDuration);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkSegmentInfo_iActiveDuration_set(void * jarg1, int jarg2) {
  AkSegmentInfo *arg1 = (AkSegmentInfo *) 0 ;
  AkTimeMs arg2 ;
  
  arg1 = (AkSegmentInfo *)jarg1; 
  arg2 = (AkTimeMs)jarg2; 
  if (arg1) (arg1)->iActiveDuration = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AkSegmentInfo_iActiveDuration_get(void * jarg1) {
  int jresult ;
  AkSegmentInfo *arg1 = (AkSegmentInfo *) 0 ;
  AkTimeMs result;
  
  arg1 = (AkSegmentInfo *)jarg1; 
  result = (AkTimeMs) ((arg1)->iActiveDuration);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkSegmentInfo_iPostExitDuration_set(void * jarg1, int jarg2) {
  AkSegmentInfo *arg1 = (AkSegmentInfo *) 0 ;
  AkTimeMs arg2 ;
  
  arg1 = (AkSegmentInfo *)jarg1; 
  arg2 = (AkTimeMs)jarg2; 
  if (arg1) (arg1)->iPostExitDuration = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AkSegmentInfo_iPostExitDuration_get(void * jarg1) {
  int jresult ;
  AkSegmentInfo *arg1 = (AkSegmentInfo *) 0 ;
  AkTimeMs result;
  
  arg1 = (AkSegmentInfo *)jarg1; 
  result = (AkTimeMs) ((arg1)->iPostExitDuration);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkSegmentInfo_iRemainingLookAheadTime_set(void * jarg1, int jarg2) {
  AkSegmentInfo *arg1 = (AkSegmentInfo *) 0 ;
  AkTimeMs arg2 ;
  
  arg1 = (AkSegmentInfo *)jarg1; 
  arg2 = (AkTimeMs)jarg2; 
  if (arg1) (arg1)->iRemainingLookAheadTime = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AkSegmentInfo_iRemainingLookAheadTime_get(void * jarg1) {
  int jresult ;
  AkSegmentInfo *arg1 = (AkSegmentInfo *) 0 ;
  AkTimeMs result;
  
  arg1 = (AkSegmentInfo *)jarg1; 
  result = (AkTimeMs) ((arg1)->iRemainingLookAheadTime);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkSegmentInfo_fBeatDuration_set(void * jarg1, float jarg2) {
  AkSegmentInfo *arg1 = (AkSegmentInfo *) 0 ;
  AkReal32 arg2 ;
  
  arg1 = (AkSegmentInfo *)jarg1; 
  arg2 = (AkReal32)jarg2; 
  if (arg1) (arg1)->fBeatDuration = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AkSegmentInfo_fBeatDuration_get(void * jarg1) {
  float jresult ;
  AkSegmentInfo *arg1 = (AkSegmentInfo *) 0 ;
  AkReal32 result;
  
  arg1 = (AkSegmentInfo *)jarg1; 
  result = (AkReal32) ((arg1)->fBeatDuration);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkSegmentInfo_fBarDuration_set(void * jarg1, float jarg2) {
  AkSegmentInfo *arg1 = (AkSegmentInfo *) 0 ;
  AkReal32 arg2 ;
  
  arg1 = (AkSegmentInfo *)jarg1; 
  arg2 = (AkReal32)jarg2; 
  if (arg1) (arg1)->fBarDuration = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AkSegmentInfo_fBarDuration_get(void * jarg1) {
  float jresult ;
  AkSegmentInfo *arg1 = (AkSegmentInfo *) 0 ;
  AkReal32 result;
  
  arg1 = (AkSegmentInfo *)jarg1; 
  result = (AkReal32) ((arg1)->fBarDuration);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkSegmentInfo_fGridDuration_set(void * jarg1, float jarg2) {
  AkSegmentInfo *arg1 = (AkSegmentInfo *) 0 ;
  AkReal32 arg2 ;
  
  arg1 = (AkSegmentInfo *)jarg1; 
  arg2 = (AkReal32)jarg2; 
  if (arg1) (arg1)->fGridDuration = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AkSegmentInfo_fGridDuration_get(void * jarg1) {
  float jresult ;
  AkSegmentInfo *arg1 = (AkSegmentInfo *) 0 ;
  AkReal32 result;
  
  arg1 = (AkSegmentInfo *)jarg1; 
  result = (AkReal32) ((arg1)->fGridDuration);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkSegmentInfo_fGridOffset_set(void * jarg1, float jarg2) {
  AkSegmentInfo *arg1 = (AkSegmentInfo *) 0 ;
  AkReal32 arg2 ;
  
  arg1 = (AkSegmentInfo *)jarg1; 
  arg2 = (AkReal32)jarg2; 
  if (arg1) (arg1)->fGridOffset = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AkSegmentInfo_fGridOffset_get(void * jarg1) {
  float jresult ;
  AkSegmentInfo *arg1 = (AkSegmentInfo *) 0 ;
  AkReal32 result;
  
  arg1 = (AkSegmentInfo *)jarg1; 
  result = (AkReal32) ((arg1)->fGridOffset);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AkSegmentInfo() {
  void * jresult ;
  AkSegmentInfo *result = 0 ;
  
  {
    result = (AkSegmentInfo *)new AkSegmentInfo();
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AkSegmentInfo(void * jarg1) {
  AkSegmentInfo *arg1 = (AkSegmentInfo *) 0 ;
  
  arg1 = (AkSegmentInfo *)jarg1; 
  {
    delete arg1;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkResourceMonitorDataSummary_totalCPU_set(void * jarg1, float jarg2) {
  AkResourceMonitorDataSummary *arg1 = (AkResourceMonitorDataSummary *) 0 ;
  AkReal32 arg2 ;
  
  arg1 = (AkResourceMonitorDataSummary *)jarg1; 
  arg2 = (AkReal32)jarg2; 
  if (arg1) (arg1)->totalCPU = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AkResourceMonitorDataSummary_totalCPU_get(void * jarg1) {
  float jresult ;
  AkResourceMonitorDataSummary *arg1 = (AkResourceMonitorDataSummary *) 0 ;
  AkReal32 result;
  
  arg1 = (AkResourceMonitorDataSummary *)jarg1; 
  result = (AkReal32) ((arg1)->totalCPU);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkResourceMonitorDataSummary_pluginCPU_set(void * jarg1, float jarg2) {
  AkResourceMonitorDataSummary *arg1 = (AkResourceMonitorDataSummary *) 0 ;
  AkReal32 arg2 ;
  
  arg1 = (AkResourceMonitorDataSummary *)jarg1; 
  arg2 = (AkReal32)jarg2; 
  if (arg1) (arg1)->pluginCPU = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AkResourceMonitorDataSummary_pluginCPU_get(void * jarg1) {
  float jresult ;
  AkResourceMonitorDataSummary *arg1 = (AkResourceMonitorDataSummary *) 0 ;
  AkReal32 result;
  
  arg1 = (AkResourceMonitorDataSummary *)jarg1; 
  result = (AkReal32) ((arg1)->pluginCPU);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkResourceMonitorDataSummary_physicalVoices_set(void * jarg1, unsigned int jarg2) {
  AkResourceMonitorDataSummary *arg1 = (AkResourceMonitorDataSummary *) 0 ;
  AkUInt32 arg2 ;
  
  arg1 = (AkResourceMonitorDataSummary *)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  if (arg1) (arg1)->physicalVoices = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkResourceMonitorDataSummary_physicalVoices_get(void * jarg1) {
  unsigned int jresult ;
  AkResourceMonitorDataSummary *arg1 = (AkResourceMonitorDataSummary *) 0 ;
  AkUInt32 result;
  
  arg1 = (AkResourceMonitorDataSummary *)jarg1; 
  result = (AkUInt32) ((arg1)->physicalVoices);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkResourceMonitorDataSummary_virtualVoices_set(void * jarg1, unsigned int jarg2) {
  AkResourceMonitorDataSummary *arg1 = (AkResourceMonitorDataSummary *) 0 ;
  AkUInt32 arg2 ;
  
  arg1 = (AkResourceMonitorDataSummary *)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  if (arg1) (arg1)->virtualVoices = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkResourceMonitorDataSummary_virtualVoices_get(void * jarg1) {
  unsigned int jresult ;
  AkResourceMonitorDataSummary *arg1 = (AkResourceMonitorDataSummary *) 0 ;
  AkUInt32 result;
  
  arg1 = (AkResourceMonitorDataSummary *)jarg1; 
  result = (AkUInt32) ((arg1)->virtualVoices);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkResourceMonitorDataSummary_totalVoices_set(void * jarg1, unsigned int jarg2) {
  AkResourceMonitorDataSummary *arg1 = (AkResourceMonitorDataSummary *) 0 ;
  AkUInt32 arg2 ;
  
  arg1 = (AkResourceMonitorDataSummary *)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  if (arg1) (arg1)->totalVoices = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkResourceMonitorDataSummary_totalVoices_get(void * jarg1) {
  unsigned int jresult ;
  AkResourceMonitorDataSummary *arg1 = (AkResourceMonitorDataSummary *) 0 ;
  AkUInt32 result;
  
  arg1 = (AkResourceMonitorDataSummary *)jarg1; 
  result = (AkUInt32) ((arg1)->totalVoices);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkResourceMonitorDataSummary_nbActiveEvents_set(void * jarg1, unsigned int jarg2) {
  AkResourceMonitorDataSummary *arg1 = (AkResourceMonitorDataSummary *) 0 ;
  AkUInt32 arg2 ;
  
  arg1 = (AkResourceMonitorDataSummary *)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  if (arg1) (arg1)->nbActiveEvents = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkResourceMonitorDataSummary_nbActiveEvents_get(void * jarg1) {
  unsigned int jresult ;
  AkResourceMonitorDataSummary *arg1 = (AkResourceMonitorDataSummary *) 0 ;
  AkUInt32 result;
  
  arg1 = (AkResourceMonitorDataSummary *)jarg1; 
  result = (AkUInt32) ((arg1)->nbActiveEvents);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AkResourceMonitorDataSummary() {
  void * jresult ;
  AkResourceMonitorDataSummary *result = 0 ;
  
  {
    result = (AkResourceMonitorDataSummary *)new AkResourceMonitorDataSummary();
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AkResourceMonitorDataSummary(void * jarg1) {
  AkResourceMonitorDataSummary *arg1 = (AkResourceMonitorDataSummary *) 0 ;
  
  arg1 = (AkResourceMonitorDataSummary *)jarg1; 
  {
    delete arg1;
  }
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_AK_INVALID_MIDI_CHANNEL_get() {
  unsigned char jresult ;
  AkMidiChannelNo result;
  
  result = (AkMidiChannelNo)(AkMidiChannelNo)AK_INVALID_MIDI_CHANNEL;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_AK_INVALID_MIDI_NOTE_get() {
  unsigned char jresult ;
  AkMidiNoteNo result;
  
  result = (AkMidiNoteNo)(AkMidiNoteNo)AK_INVALID_MIDI_NOTE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkMIDIEvent_byChan_set(void * jarg1, unsigned char jarg2) {
  AkMIDIEvent *arg1 = (AkMIDIEvent *) 0 ;
  AkMidiChannelNo arg2 ;
  
  arg1 = (AkMIDIEvent *)jarg1; 
  arg2 = (AkMidiChannelNo)jarg2; 
  if (arg1) (arg1)->byChan = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_AkMIDIEvent_byChan_get(void * jarg1) {
  unsigned char jresult ;
  AkMIDIEvent *arg1 = (AkMIDIEvent *) 0 ;
  AkMidiChannelNo result;
  
  arg1 = (AkMIDIEvent *)jarg1; 
  result = (AkMidiChannelNo) ((arg1)->byChan);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkMIDIEvent_tGen_byParam1_set(void * jarg1, unsigned char jarg2) {
  AkMIDIEvent::tGen *arg1 = (AkMIDIEvent::tGen *) 0 ;
  AkUInt8 arg2 ;
  
  arg1 = (AkMIDIEvent::tGen *)jarg1; 
  arg2 = (AkUInt8)jarg2; 
  if (arg1) (arg1)->byParam1 = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_AkMIDIEvent_tGen_byParam1_get(void * jarg1) {
  unsigned char jresult ;
  AkMIDIEvent::tGen *arg1 = (AkMIDIEvent::tGen *) 0 ;
  AkUInt8 result;
  
  arg1 = (AkMIDIEvent::tGen *)jarg1; 
  result = (AkUInt8) ((arg1)->byParam1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkMIDIEvent_tGen_byParam2_set(void * jarg1, unsigned char jarg2) {
  AkMIDIEvent::tGen *arg1 = (AkMIDIEvent::tGen *) 0 ;
  AkUInt8 arg2 ;
  
  arg1 = (AkMIDIEvent::tGen *)jarg1; 
  arg2 = (AkUInt8)jarg2; 
  if (arg1) (arg1)->byParam2 = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_AkMIDIEvent_tGen_byParam2_get(void * jarg1) {
  unsigned char jresult ;
  AkMIDIEvent::tGen *arg1 = (AkMIDIEvent::tGen *) 0 ;
  AkUInt8 result;
  
  arg1 = (AkMIDIEvent::tGen *)jarg1; 
  result = (AkUInt8) ((arg1)->byParam2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AkMIDIEvent_tGen() {
  void * jresult ;
  AkMIDIEvent::tGen *result = 0 ;
  
  {
    result = (AkMIDIEvent::tGen *)new AkMIDIEvent::tGen();
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AkMIDIEvent_tGen(void * jarg1) {
  AkMIDIEvent::tGen *arg1 = (AkMIDIEvent::tGen *) 0 ;
  
  arg1 = (AkMIDIEvent::tGen *)jarg1; 
  {
    delete arg1;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkMIDIEvent_tNoteOnOff_byNote_set(void * jarg1, unsigned char jarg2) {
  AkMIDIEvent::tNoteOnOff *arg1 = (AkMIDIEvent::tNoteOnOff *) 0 ;
  AkMidiNoteNo arg2 ;
  
  arg1 = (AkMIDIEvent::tNoteOnOff *)jarg1; 
  arg2 = (AkMidiNoteNo)jarg2; 
  if (arg1) (arg1)->byNote = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_AkMIDIEvent_tNoteOnOff_byNote_get(void * jarg1) {
  unsigned char jresult ;
  AkMIDIEvent::tNoteOnOff *arg1 = (AkMIDIEvent::tNoteOnOff *) 0 ;
  AkMidiNoteNo result;
  
  arg1 = (AkMIDIEvent::tNoteOnOff *)jarg1; 
  result = (AkMidiNoteNo) ((arg1)->byNote);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkMIDIEvent_tNoteOnOff_byVelocity_set(void * jarg1, unsigned char jarg2) {
  AkMIDIEvent::tNoteOnOff *arg1 = (AkMIDIEvent::tNoteOnOff *) 0 ;
  AkUInt8 arg2 ;
  
  arg1 = (AkMIDIEvent::tNoteOnOff *)jarg1; 
  arg2 = (AkUInt8)jarg2; 
  if (arg1) (arg1)->byVelocity = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_AkMIDIEvent_tNoteOnOff_byVelocity_get(void * jarg1) {
  unsigned char jresult ;
  AkMIDIEvent::tNoteOnOff *arg1 = (AkMIDIEvent::tNoteOnOff *) 0 ;
  AkUInt8 result;
  
  arg1 = (AkMIDIEvent::tNoteOnOff *)jarg1; 
  result = (AkUInt8) ((arg1)->byVelocity);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AkMIDIEvent_tNoteOnOff() {
  void * jresult ;
  AkMIDIEvent::tNoteOnOff *result = 0 ;
  
  {
    result = (AkMIDIEvent::tNoteOnOff *)new AkMIDIEvent::tNoteOnOff();
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AkMIDIEvent_tNoteOnOff(void * jarg1) {
  AkMIDIEvent::tNoteOnOff *arg1 = (AkMIDIEvent::tNoteOnOff *) 0 ;
  
  arg1 = (AkMIDIEvent::tNoteOnOff *)jarg1; 
  {
    delete arg1;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkMIDIEvent_tCc_byCc_set(void * jarg1, unsigned char jarg2) {
  AkMIDIEvent::tCc *arg1 = (AkMIDIEvent::tCc *) 0 ;
  AkUInt8 arg2 ;
  
  arg1 = (AkMIDIEvent::tCc *)jarg1; 
  arg2 = (AkUInt8)jarg2; 
  if (arg1) (arg1)->byCc = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_AkMIDIEvent_tCc_byCc_get(void * jarg1) {
  unsigned char jresult ;
  AkMIDIEvent::tCc *arg1 = (AkMIDIEvent::tCc *) 0 ;
  AkUInt8 result;
  
  arg1 = (AkMIDIEvent::tCc *)jarg1; 
  result = (AkUInt8) ((arg1)->byCc);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkMIDIEvent_tCc_byValue_set(void * jarg1, unsigned char jarg2) {
  AkMIDIEvent::tCc *arg1 = (AkMIDIEvent::tCc *) 0 ;
  AkUInt8 arg2 ;
  
  arg1 = (AkMIDIEvent::tCc *)jarg1; 
  arg2 = (AkUInt8)jarg2; 
  if (arg1) (arg1)->byValue = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_AkMIDIEvent_tCc_byValue_get(void * jarg1) {
  unsigned char jresult ;
  AkMIDIEvent::tCc *arg1 = (AkMIDIEvent::tCc *) 0 ;
  AkUInt8 result;
  
  arg1 = (AkMIDIEvent::tCc *)jarg1; 
  result = (AkUInt8) ((arg1)->byValue);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AkMIDIEvent_tCc() {
  void * jresult ;
  AkMIDIEvent::tCc *result = 0 ;
  
  {
    result = (AkMIDIEvent::tCc *)new AkMIDIEvent::tCc();
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AkMIDIEvent_tCc(void * jarg1) {
  AkMIDIEvent::tCc *arg1 = (AkMIDIEvent::tCc *) 0 ;
  
  arg1 = (AkMIDIEvent::tCc *)jarg1; 
  {
    delete arg1;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkMIDIEvent_tPitchBend_byValueLsb_set(void * jarg1, unsigned char jarg2) {
  AkMIDIEvent::tPitchBend *arg1 = (AkMIDIEvent::tPitchBend *) 0 ;
  AkUInt8 arg2 ;
  
  arg1 = (AkMIDIEvent::tPitchBend *)jarg1; 
  arg2 = (AkUInt8)jarg2; 
  if (arg1) (arg1)->byValueLsb = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_AkMIDIEvent_tPitchBend_byValueLsb_get(void * jarg1) {
  unsigned char jresult ;
  AkMIDIEvent::tPitchBend *arg1 = (AkMIDIEvent::tPitchBend *) 0 ;
  AkUInt8 result;
  
  arg1 = (AkMIDIEvent::tPitchBend *)jarg1; 
  result = (AkUInt8) ((arg1)->byValueLsb);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkMIDIEvent_tPitchBend_byValueMsb_set(void * jarg1, unsigned char jarg2) {
  AkMIDIEvent::tPitchBend *arg1 = (AkMIDIEvent::tPitchBend *) 0 ;
  AkUInt8 arg2 ;
  
  arg1 = (AkMIDIEvent::tPitchBend *)jarg1; 
  arg2 = (AkUInt8)jarg2; 
  if (arg1) (arg1)->byValueMsb = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_AkMIDIEvent_tPitchBend_byValueMsb_get(void * jarg1) {
  unsigned char jresult ;
  AkMIDIEvent::tPitchBend *arg1 = (AkMIDIEvent::tPitchBend *) 0 ;
  AkUInt8 result;
  
  arg1 = (AkMIDIEvent::tPitchBend *)jarg1; 
  result = (AkUInt8) ((arg1)->byValueMsb);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AkMIDIEvent_tPitchBend() {
  void * jresult ;
  AkMIDIEvent::tPitchBend *result = 0 ;
  
  {
    result = (AkMIDIEvent::tPitchBend *)new AkMIDIEvent::tPitchBend();
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AkMIDIEvent_tPitchBend(void * jarg1) {
  AkMIDIEvent::tPitchBend *arg1 = (AkMIDIEvent::tPitchBend *) 0 ;
  
  arg1 = (AkMIDIEvent::tPitchBend *)jarg1; 
  {
    delete arg1;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkMIDIEvent_tNoteAftertouch_byNote_set(void * jarg1, unsigned char jarg2) {
  AkMIDIEvent::tNoteAftertouch *arg1 = (AkMIDIEvent::tNoteAftertouch *) 0 ;
  AkUInt8 arg2 ;
  
  arg1 = (AkMIDIEvent::tNoteAftertouch *)jarg1; 
  arg2 = (AkUInt8)jarg2; 
  if (arg1) (arg1)->byNote = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_AkMIDIEvent_tNoteAftertouch_byNote_get(void * jarg1) {
  unsigned char jresult ;
  AkMIDIEvent::tNoteAftertouch *arg1 = (AkMIDIEvent::tNoteAftertouch *) 0 ;
  AkUInt8 result;
  
  arg1 = (AkMIDIEvent::tNoteAftertouch *)jarg1; 
  result = (AkUInt8) ((arg1)->byNote);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkMIDIEvent_tNoteAftertouch_byValue_set(void * jarg1, unsigned char jarg2) {
  AkMIDIEvent::tNoteAftertouch *arg1 = (AkMIDIEvent::tNoteAftertouch *) 0 ;
  AkUInt8 arg2 ;
  
  arg1 = (AkMIDIEvent::tNoteAftertouch *)jarg1; 
  arg2 = (AkUInt8)jarg2; 
  if (arg1) (arg1)->byValue = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_AkMIDIEvent_tNoteAftertouch_byValue_get(void * jarg1) {
  unsigned char jresult ;
  AkMIDIEvent::tNoteAftertouch *arg1 = (AkMIDIEvent::tNoteAftertouch *) 0 ;
  AkUInt8 result;
  
  arg1 = (AkMIDIEvent::tNoteAftertouch *)jarg1; 
  result = (AkUInt8) ((arg1)->byValue);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AkMIDIEvent_tNoteAftertouch() {
  void * jresult ;
  AkMIDIEvent::tNoteAftertouch *result = 0 ;
  
  {
    result = (AkMIDIEvent::tNoteAftertouch *)new AkMIDIEvent::tNoteAftertouch();
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AkMIDIEvent_tNoteAftertouch(void * jarg1) {
  AkMIDIEvent::tNoteAftertouch *arg1 = (AkMIDIEvent::tNoteAftertouch *) 0 ;
  
  arg1 = (AkMIDIEvent::tNoteAftertouch *)jarg1; 
  {
    delete arg1;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkMIDIEvent_tChanAftertouch_byValue_set(void * jarg1, unsigned char jarg2) {
  AkMIDIEvent::tChanAftertouch *arg1 = (AkMIDIEvent::tChanAftertouch *) 0 ;
  AkUInt8 arg2 ;
  
  arg1 = (AkMIDIEvent::tChanAftertouch *)jarg1; 
  arg2 = (AkUInt8)jarg2; 
  if (arg1) (arg1)->byValue = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_AkMIDIEvent_tChanAftertouch_byValue_get(void * jarg1) {
  unsigned char jresult ;
  AkMIDIEvent::tChanAftertouch *arg1 = (AkMIDIEvent::tChanAftertouch *) 0 ;
  AkUInt8 result;
  
  arg1 = (AkMIDIEvent::tChanAftertouch *)jarg1; 
  result = (AkUInt8) ((arg1)->byValue);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AkMIDIEvent_tChanAftertouch() {
  void * jresult ;
  AkMIDIEvent::tChanAftertouch *result = 0 ;
  
  {
    result = (AkMIDIEvent::tChanAftertouch *)new AkMIDIEvent::tChanAftertouch();
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AkMIDIEvent_tChanAftertouch(void * jarg1) {
  AkMIDIEvent::tChanAftertouch *arg1 = (AkMIDIEvent::tChanAftertouch *) 0 ;
  
  arg1 = (AkMIDIEvent::tChanAftertouch *)jarg1; 
  {
    delete arg1;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkMIDIEvent_tProgramChange_byProgramNum_set(void * jarg1, unsigned char jarg2) {
  AkMIDIEvent::tProgramChange *arg1 = (AkMIDIEvent::tProgramChange *) 0 ;
  AkUInt8 arg2 ;
  
  arg1 = (AkMIDIEvent::tProgramChange *)jarg1; 
  arg2 = (AkUInt8)jarg2; 
  if (arg1) (arg1)->byProgramNum = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_AkMIDIEvent_tProgramChange_byProgramNum_get(void * jarg1) {
  unsigned char jresult ;
  AkMIDIEvent::tProgramChange *arg1 = (AkMIDIEvent::tProgramChange *) 0 ;
  AkUInt8 result;
  
  arg1 = (AkMIDIEvent::tProgramChange *)jarg1; 
  result = (AkUInt8) ((arg1)->byProgramNum);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AkMIDIEvent_tProgramChange() {
  void * jresult ;
  AkMIDIEvent::tProgramChange *result = 0 ;
  
  {
    result = (AkMIDIEvent::tProgramChange *)new AkMIDIEvent::tProgramChange();
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AkMIDIEvent_tProgramChange(void * jarg1) {
  AkMIDIEvent::tProgramChange *arg1 = (AkMIDIEvent::tProgramChange *) 0 ;
  
  arg1 = (AkMIDIEvent::tProgramChange *)jarg1; 
  {
    delete arg1;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkMIDIEvent_tWwiseCmd_uCmd_set(void * jarg1, unsigned short jarg2) {
  AkMIDIEvent::tWwiseCmd *arg1 = (AkMIDIEvent::tWwiseCmd *) 0 ;
  AkUInt16 arg2 ;
  
  arg1 = (AkMIDIEvent::tWwiseCmd *)jarg1; 
  arg2 = (AkUInt16)jarg2; 
  if (arg1) (arg1)->uCmd = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_AkMIDIEvent_tWwiseCmd_uCmd_get(void * jarg1) {
  unsigned short jresult ;
  AkMIDIEvent::tWwiseCmd *arg1 = (AkMIDIEvent::tWwiseCmd *) 0 ;
  AkUInt16 result;
  
  arg1 = (AkMIDIEvent::tWwiseCmd *)jarg1; 
  result = (AkUInt16) ((arg1)->uCmd);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkMIDIEvent_tWwiseCmd_uArg_set(void * jarg1, unsigned int jarg2) {
  AkMIDIEvent::tWwiseCmd *arg1 = (AkMIDIEvent::tWwiseCmd *) 0 ;
  AkUInt32 arg2 ;
  
  arg1 = (AkMIDIEvent::tWwiseCmd *)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  if (arg1) (arg1)->uArg = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkMIDIEvent_tWwiseCmd_uArg_get(void * jarg1) {
  unsigned int jresult ;
  AkMIDIEvent::tWwiseCmd *arg1 = (AkMIDIEvent::tWwiseCmd *) 0 ;
  AkUInt32 result;
  
  arg1 = (AkMIDIEvent::tWwiseCmd *)jarg1; 
  result = (AkUInt32) ((arg1)->uArg);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AkMIDIEvent_tWwiseCmd() {
  void * jresult ;
  AkMIDIEvent::tWwiseCmd *result = 0 ;
  
  {
    result = (AkMIDIEvent::tWwiseCmd *)new AkMIDIEvent::tWwiseCmd();
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AkMIDIEvent_tWwiseCmd(void * jarg1) {
  AkMIDIEvent::tWwiseCmd *arg1 = (AkMIDIEvent::tWwiseCmd *) 0 ;
  
  arg1 = (AkMIDIEvent::tWwiseCmd *)jarg1; 
  {
    delete arg1;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkMIDIEvent_Gen_set(void * jarg1, void * jarg2) {
  AkMIDIEvent *arg1 = (AkMIDIEvent *) 0 ;
  AkMIDIEvent::tGen *arg2 = (AkMIDIEvent::tGen *) 0 ;
  
  arg1 = (AkMIDIEvent *)jarg1; 
  arg2 = (AkMIDIEvent::tGen *)jarg2; 
  if (arg1) (arg1)->Gen = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AkMIDIEvent_Gen_get(void * jarg1) {
  void * jresult ;
  AkMIDIEvent *arg1 = (AkMIDIEvent *) 0 ;
  AkMIDIEvent::tGen *result = 0 ;
  
  arg1 = (AkMIDIEvent *)jarg1; 
  result = (AkMIDIEvent::tGen *)& ((arg1)->Gen);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkMIDIEvent_Cc_set(void * jarg1, void * jarg2) {
  AkMIDIEvent *arg1 = (AkMIDIEvent *) 0 ;
  AkMIDIEvent::tCc *arg2 = (AkMIDIEvent::tCc *) 0 ;
  
  arg1 = (AkMIDIEvent *)jarg1; 
  arg2 = (AkMIDIEvent::tCc *)jarg2; 
  if (arg1) (arg1)->Cc = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AkMIDIEvent_Cc_get(void * jarg1) {
  void * jresult ;
  AkMIDIEvent *arg1 = (AkMIDIEvent *) 0 ;
  AkMIDIEvent::tCc *result = 0 ;
  
  arg1 = (AkMIDIEvent *)jarg1; 
  result = (AkMIDIEvent::tCc *)& ((arg1)->Cc);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkMIDIEvent_NoteOnOff_set(void * jarg1, void * jarg2) {
  AkMIDIEvent *arg1 = (AkMIDIEvent *) 0 ;
  AkMIDIEvent::tNoteOnOff *arg2 = (AkMIDIEvent::tNoteOnOff *) 0 ;
  
  arg1 = (AkMIDIEvent *)jarg1; 
  arg2 = (AkMIDIEvent::tNoteOnOff *)jarg2; 
  if (arg1) (arg1)->NoteOnOff = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AkMIDIEvent_NoteOnOff_get(void * jarg1) {
  void * jresult ;
  AkMIDIEvent *arg1 = (AkMIDIEvent *) 0 ;
  AkMIDIEvent::tNoteOnOff *result = 0 ;
  
  arg1 = (AkMIDIEvent *)jarg1; 
  result = (AkMIDIEvent::tNoteOnOff *)& ((arg1)->NoteOnOff);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkMIDIEvent_PitchBend_set(void * jarg1, void * jarg2) {
  AkMIDIEvent *arg1 = (AkMIDIEvent *) 0 ;
  AkMIDIEvent::tPitchBend *arg2 = (AkMIDIEvent::tPitchBend *) 0 ;
  
  arg1 = (AkMIDIEvent *)jarg1; 
  arg2 = (AkMIDIEvent::tPitchBend *)jarg2; 
  if (arg1) (arg1)->PitchBend = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AkMIDIEvent_PitchBend_get(void * jarg1) {
  void * jresult ;
  AkMIDIEvent *arg1 = (AkMIDIEvent *) 0 ;
  AkMIDIEvent::tPitchBend *result = 0 ;
  
  arg1 = (AkMIDIEvent *)jarg1; 
  result = (AkMIDIEvent::tPitchBend *)& ((arg1)->PitchBend);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkMIDIEvent_NoteAftertouch_set(void * jarg1, void * jarg2) {
  AkMIDIEvent *arg1 = (AkMIDIEvent *) 0 ;
  AkMIDIEvent::tNoteAftertouch *arg2 = (AkMIDIEvent::tNoteAftertouch *) 0 ;
  
  arg1 = (AkMIDIEvent *)jarg1; 
  arg2 = (AkMIDIEvent::tNoteAftertouch *)jarg2; 
  if (arg1) (arg1)->NoteAftertouch = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AkMIDIEvent_NoteAftertouch_get(void * jarg1) {
  void * jresult ;
  AkMIDIEvent *arg1 = (AkMIDIEvent *) 0 ;
  AkMIDIEvent::tNoteAftertouch *result = 0 ;
  
  arg1 = (AkMIDIEvent *)jarg1; 
  result = (AkMIDIEvent::tNoteAftertouch *)& ((arg1)->NoteAftertouch);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkMIDIEvent_ChanAftertouch_set(void * jarg1, void * jarg2) {
  AkMIDIEvent *arg1 = (AkMIDIEvent *) 0 ;
  AkMIDIEvent::tChanAftertouch *arg2 = (AkMIDIEvent::tChanAftertouch *) 0 ;
  
  arg1 = (AkMIDIEvent *)jarg1; 
  arg2 = (AkMIDIEvent::tChanAftertouch *)jarg2; 
  if (arg1) (arg1)->ChanAftertouch = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AkMIDIEvent_ChanAftertouch_get(void * jarg1) {
  void * jresult ;
  AkMIDIEvent *arg1 = (AkMIDIEvent *) 0 ;
  AkMIDIEvent::tChanAftertouch *result = 0 ;
  
  arg1 = (AkMIDIEvent *)jarg1; 
  result = (AkMIDIEvent::tChanAftertouch *)& ((arg1)->ChanAftertouch);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkMIDIEvent_ProgramChange_set(void * jarg1, void * jarg2) {
  AkMIDIEvent *arg1 = (AkMIDIEvent *) 0 ;
  AkMIDIEvent::tProgramChange *arg2 = (AkMIDIEvent::tProgramChange *) 0 ;
  
  arg1 = (AkMIDIEvent *)jarg1; 
  arg2 = (AkMIDIEvent::tProgramChange *)jarg2; 
  if (arg1) (arg1)->ProgramChange = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AkMIDIEvent_ProgramChange_get(void * jarg1) {
  void * jresult ;
  AkMIDIEvent *arg1 = (AkMIDIEvent *) 0 ;
  AkMIDIEvent::tProgramChange *result = 0 ;
  
  arg1 = (AkMIDIEvent *)jarg1; 
  result = (AkMIDIEvent::tProgramChange *)& ((arg1)->ProgramChange);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkMIDIEvent_WwiseCmd_set(void * jarg1, void * jarg2) {
  AkMIDIEvent *arg1 = (AkMIDIEvent *) 0 ;
  AkMIDIEvent::tWwiseCmd *arg2 = (AkMIDIEvent::tWwiseCmd *) 0 ;
  
  arg1 = (AkMIDIEvent *)jarg1; 
  arg2 = (AkMIDIEvent::tWwiseCmd *)jarg2; 
  if (arg1) (arg1)->WwiseCmd = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AkMIDIEvent_WwiseCmd_get(void * jarg1) {
  void * jresult ;
  AkMIDIEvent *arg1 = (AkMIDIEvent *) 0 ;
  AkMIDIEvent::tWwiseCmd *result = 0 ;
  
  arg1 = (AkMIDIEvent *)jarg1; 
  result = (AkMIDIEvent::tWwiseCmd *)& ((arg1)->WwiseCmd);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkMIDIEvent_byType_set(void * jarg1, int jarg2) {
  AkMIDIEvent *arg1 = (AkMIDIEvent *) 0 ;
  AkMIDIEventTypes arg2 ;
  
  arg1 = (AkMIDIEvent *)jarg1; 
  arg2 = (AkMIDIEventTypes)jarg2; 
  AkMIDIEvent_byType_set(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_AkMIDIEvent_byType_get(void * jarg1) {
  int jresult ;
  AkMIDIEvent *arg1 = (AkMIDIEvent *) 0 ;
  AkMIDIEventTypes result;
  
  arg1 = (AkMIDIEvent *)jarg1; 
  result = (AkMIDIEventTypes)AkMIDIEvent_byType_get(arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkMIDIEvent_byOnOffNote_set(void * jarg1, unsigned char jarg2) {
  AkMIDIEvent *arg1 = (AkMIDIEvent *) 0 ;
  AkMidiNoteNo arg2 ;
  
  arg1 = (AkMIDIEvent *)jarg1; 
  arg2 = (AkMidiNoteNo)jarg2; 
  AkMIDIEvent_byOnOffNote_set(arg1,arg2);
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_AkMIDIEvent_byOnOffNote_get(void * jarg1) {
  unsigned char jresult ;
  AkMIDIEvent *arg1 = (AkMIDIEvent *) 0 ;
  AkMidiNoteNo result;
  
  arg1 = (AkMIDIEvent *)jarg1; 
  result = (AkMidiNoteNo)AkMIDIEvent_byOnOffNote_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkMIDIEvent_byVelocity_set(void * jarg1, unsigned char jarg2) {
  AkMIDIEvent *arg1 = (AkMIDIEvent *) 0 ;
  AkUInt8 arg2 ;
  
  arg1 = (AkMIDIEvent *)jarg1; 
  arg2 = (AkUInt8)jarg2; 
  AkMIDIEvent_byVelocity_set(arg1,arg2);
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_AkMIDIEvent_byVelocity_get(void * jarg1) {
  unsigned char jresult ;
  AkMIDIEvent *arg1 = (AkMIDIEvent *) 0 ;
  AkUInt8 result;
  
  arg1 = (AkMIDIEvent *)jarg1; 
  result = (AkUInt8)AkMIDIEvent_byVelocity_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkMIDIEvent_byCc_set(void * jarg1, int jarg2) {
  AkMIDIEvent *arg1 = (AkMIDIEvent *) 0 ;
  AkMIDICcTypes arg2 ;
  
  arg1 = (AkMIDIEvent *)jarg1; 
  arg2 = (AkMIDICcTypes)jarg2; 
  AkMIDIEvent_byCc_set(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_AkMIDIEvent_byCc_get(void * jarg1) {
  int jresult ;
  AkMIDIEvent *arg1 = (AkMIDIEvent *) 0 ;
  AkMIDICcTypes result;
  
  arg1 = (AkMIDIEvent *)jarg1; 
  result = (AkMIDICcTypes)AkMIDIEvent_byCc_get(arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkMIDIEvent_byCcValue_set(void * jarg1, unsigned char jarg2) {
  AkMIDIEvent *arg1 = (AkMIDIEvent *) 0 ;
  AkUInt8 arg2 ;
  
  arg1 = (AkMIDIEvent *)jarg1; 
  arg2 = (AkUInt8)jarg2; 
  AkMIDIEvent_byCcValue_set(arg1,arg2);
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_AkMIDIEvent_byCcValue_get(void * jarg1) {
  unsigned char jresult ;
  AkMIDIEvent *arg1 = (AkMIDIEvent *) 0 ;
  AkUInt8 result;
  
  arg1 = (AkMIDIEvent *)jarg1; 
  result = (AkUInt8)AkMIDIEvent_byCcValue_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkMIDIEvent_byValueLsb_set(void * jarg1, unsigned char jarg2) {
  AkMIDIEvent *arg1 = (AkMIDIEvent *) 0 ;
  AkUInt8 arg2 ;
  
  arg1 = (AkMIDIEvent *)jarg1; 
  arg2 = (AkUInt8)jarg2; 
  AkMIDIEvent_byValueLsb_set(arg1,arg2);
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_AkMIDIEvent_byValueLsb_get(void * jarg1) {
  unsigned char jresult ;
  AkMIDIEvent *arg1 = (AkMIDIEvent *) 0 ;
  AkUInt8 result;
  
  arg1 = (AkMIDIEvent *)jarg1; 
  result = (AkUInt8)AkMIDIEvent_byValueLsb_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkMIDIEvent_byValueMsb_set(void * jarg1, unsigned char jarg2) {
  AkMIDIEvent *arg1 = (AkMIDIEvent *) 0 ;
  AkUInt8 arg2 ;
  
  arg1 = (AkMIDIEvent *)jarg1; 
  arg2 = (AkUInt8)jarg2; 
  AkMIDIEvent_byValueMsb_set(arg1,arg2);
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_AkMIDIEvent_byValueMsb_get(void * jarg1) {
  unsigned char jresult ;
  AkMIDIEvent *arg1 = (AkMIDIEvent *) 0 ;
  AkUInt8 result;
  
  arg1 = (AkMIDIEvent *)jarg1; 
  result = (AkUInt8)AkMIDIEvent_byValueMsb_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkMIDIEvent_byAftertouchNote_set(void * jarg1, unsigned char jarg2) {
  AkMIDIEvent *arg1 = (AkMIDIEvent *) 0 ;
  AkUInt8 arg2 ;
  
  arg1 = (AkMIDIEvent *)jarg1; 
  arg2 = (AkUInt8)jarg2; 
  AkMIDIEvent_byAftertouchNote_set(arg1,arg2);
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_AkMIDIEvent_byAftertouchNote_get(void * jarg1) {
  unsigned char jresult ;
  AkMIDIEvent *arg1 = (AkMIDIEvent *) 0 ;
  AkUInt8 result;
  
  arg1 = (AkMIDIEvent *)jarg1; 
  result = (AkUInt8)AkMIDIEvent_byAftertouchNote_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkMIDIEvent_byNoteAftertouchValue_set(void * jarg1, unsigned char jarg2) {
  AkMIDIEvent *arg1 = (AkMIDIEvent *) 0 ;
  AkUInt8 arg2 ;
  
  arg1 = (AkMIDIEvent *)jarg1; 
  arg2 = (AkUInt8)jarg2; 
  AkMIDIEvent_byNoteAftertouchValue_set(arg1,arg2);
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_AkMIDIEvent_byNoteAftertouchValue_get(void * jarg1) {
  unsigned char jresult ;
  AkMIDIEvent *arg1 = (AkMIDIEvent *) 0 ;
  AkUInt8 result;
  
  arg1 = (AkMIDIEvent *)jarg1; 
  result = (AkUInt8)AkMIDIEvent_byNoteAftertouchValue_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkMIDIEvent_byChanAftertouchValue_set(void * jarg1, unsigned char jarg2) {
  AkMIDIEvent *arg1 = (AkMIDIEvent *) 0 ;
  AkUInt8 arg2 ;
  
  arg1 = (AkMIDIEvent *)jarg1; 
  arg2 = (AkUInt8)jarg2; 
  AkMIDIEvent_byChanAftertouchValue_set(arg1,arg2);
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_AkMIDIEvent_byChanAftertouchValue_get(void * jarg1) {
  unsigned char jresult ;
  AkMIDIEvent *arg1 = (AkMIDIEvent *) 0 ;
  AkUInt8 result;
  
  arg1 = (AkMIDIEvent *)jarg1; 
  result = (AkUInt8)AkMIDIEvent_byChanAftertouchValue_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkMIDIEvent_byProgramNum_set(void * jarg1, unsigned char jarg2) {
  AkMIDIEvent *arg1 = (AkMIDIEvent *) 0 ;
  AkUInt8 arg2 ;
  
  arg1 = (AkMIDIEvent *)jarg1; 
  arg2 = (AkUInt8)jarg2; 
  AkMIDIEvent_byProgramNum_set(arg1,arg2);
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_AkMIDIEvent_byProgramNum_get(void * jarg1) {
  unsigned char jresult ;
  AkMIDIEvent *arg1 = (AkMIDIEvent *) 0 ;
  AkUInt8 result;
  
  arg1 = (AkMIDIEvent *)jarg1; 
  result = (AkUInt8)AkMIDIEvent_byProgramNum_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkMIDIEvent_uCmd_set(void * jarg1, unsigned short jarg2) {
  AkMIDIEvent *arg1 = (AkMIDIEvent *) 0 ;
  AkUInt16 arg2 ;
  
  arg1 = (AkMIDIEvent *)jarg1; 
  arg2 = (AkUInt16)jarg2; 
  AkMIDIEvent_uCmd_set(arg1,arg2);
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_AkMIDIEvent_uCmd_get(void * jarg1) {
  unsigned short jresult ;
  AkMIDIEvent *arg1 = (AkMIDIEvent *) 0 ;
  AkUInt16 result;
  
  arg1 = (AkMIDIEvent *)jarg1; 
  result = (AkUInt16)AkMIDIEvent_uCmd_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkMIDIEvent_uArg_set(void * jarg1, unsigned int jarg2) {
  AkMIDIEvent *arg1 = (AkMIDIEvent *) 0 ;
  AkUInt32 arg2 ;
  
  arg1 = (AkMIDIEvent *)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  AkMIDIEvent_uArg_set(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkMIDIEvent_uArg_get(void * jarg1) {
  unsigned int jresult ;
  AkMIDIEvent *arg1 = (AkMIDIEvent *) 0 ;
  AkUInt32 result;
  
  arg1 = (AkMIDIEvent *)jarg1; 
  result = (AkUInt32)AkMIDIEvent_uArg_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AkMIDIEvent() {
  void * jresult ;
  AkMIDIEvent *result = 0 ;
  
  {
    result = (AkMIDIEvent *)new AkMIDIEvent();
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AkMIDIEvent(void * jarg1) {
  AkMIDIEvent *arg1 = (AkMIDIEvent *) 0 ;
  
  arg1 = (AkMIDIEvent *)jarg1; 
  {
    delete arg1;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkMIDIPost_uOffset_set(void * jarg1, unsigned long long jarg2) {
  AkMIDIPost *arg1 = (AkMIDIPost *) 0 ;
  AkUInt64 arg2 ;
  
  arg1 = (AkMIDIPost *)jarg1; 
  arg2 = (AkUInt64)jarg2; 
  if (arg1) (arg1)->uOffset = arg2;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_AkMIDIPost_uOffset_get(void * jarg1) {
  unsigned long long jresult ;
  AkMIDIPost *arg1 = (AkMIDIPost *) 0 ;
  AkUInt64 result;
  
  arg1 = (AkMIDIPost *)jarg1; 
  result = (AkUInt64) ((arg1)->uOffset);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkMIDIPost_PostOnEvent__SWIG_0(void * jarg1, unsigned int jarg2, AkGameObjectID jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  AkMIDIPost *arg1 = (AkMIDIPost *) 0 ;
  AkUniqueID arg2 ;
  AkGameObjectID arg3 ;
  AkUInt32 arg4 ;
  AkPlayingID result;
  
  arg1 = (AkMIDIPost *)jarg1; 
  arg2 = (AkUniqueID)jarg2; 
  arg3 = jarg3; 
  arg4 = (AkUInt32)jarg4; 
  result = (AkPlayingID)AkMIDIPost_PostOnEvent__SWIG_0(arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkMIDIPost_PostOnEvent__SWIG_1(void * jarg1, unsigned int jarg2, AkGameObjectID jarg3, unsigned int jarg4, unsigned int jarg5) {
  unsigned int jresult ;
  AkMIDIPost *arg1 = (AkMIDIPost *) 0 ;
  AkUniqueID arg2 ;
  AkGameObjectID arg3 ;
  AkUInt32 arg4 ;
  bool arg5 ;
  AkPlayingID result;
  
  arg1 = (AkMIDIPost *)jarg1; 
  arg2 = (AkUniqueID)jarg2; 
  arg3 = jarg3; 
  arg4 = (AkUInt32)jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (AkPlayingID)AkMIDIPost_PostOnEvent__SWIG_1(arg1,arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkMIDIPost_PostOnEvent__SWIG_2(void * jarg1, unsigned int jarg2, AkGameObjectID jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, void * jarg7, void * jarg8) {
  unsigned int jresult ;
  AkMIDIPost *arg1 = (AkMIDIPost *) 0 ;
  AkUniqueID arg2 ;
  AkGameObjectID arg3 ;
  AkUInt32 arg4 ;
  bool arg5 ;
  AkUInt32 arg6 ;
  AkCallbackFunc arg7 = (AkCallbackFunc) 0 ;
  void *arg8 = (void *) 0 ;
  AkPlayingID result;
  
  arg1 = (AkMIDIPost *)jarg1; 
  arg2 = (AkUniqueID)jarg2; 
  arg3 = jarg3; 
  arg4 = (AkUInt32)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = (AkUInt32)jarg6; 
  arg7 = jarg7 != NULL ? AkCallbackSerializer::EventCallback : NULL; 
  arg8 = jarg8; 
  result = (AkPlayingID)AkMIDIPost_PostOnEvent__SWIG_2(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkMIDIPost_PostOnEvent__SWIG_3(void * jarg1, unsigned int jarg2, AkGameObjectID jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, void * jarg7, void * jarg8, unsigned int jarg9) {
  unsigned int jresult ;
  AkMIDIPost *arg1 = (AkMIDIPost *) 0 ;
  AkUniqueID arg2 ;
  AkGameObjectID arg3 ;
  AkUInt32 arg4 ;
  bool arg5 ;
  AkUInt32 arg6 ;
  AkCallbackFunc arg7 = (AkCallbackFunc) 0 ;
  void *arg8 = (void *) 0 ;
  AkPlayingID arg9 ;
  AkPlayingID result;
  
  arg1 = (AkMIDIPost *)jarg1; 
  arg2 = (AkUniqueID)jarg2; 
  arg3 = jarg3; 
  arg4 = (AkUInt32)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = (AkUInt32)jarg6; 
  arg7 = jarg7 != NULL ? AkCallbackSerializer::EventCallback : NULL; 
  arg8 = jarg8; 
  arg9 = (AkPlayingID)jarg9; 
  result = (AkPlayingID)AkMIDIPost_PostOnEvent__SWIG_3(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkMIDIPost_Clone(void * jarg1, void * jarg2) {
  AkMIDIPost *arg1 = (AkMIDIPost *) 0 ;
  AkMIDIPost *arg2 = 0 ;
  
  arg1 = (AkMIDIPost *)jarg1; 
  arg2 = (AkMIDIPost *)jarg2;
  if (!arg2) {
    return ;
  } 
  AkMIDIPost_Clone(arg1,(AkMIDIPost const &)*arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_AkMIDIPost_GetSizeOf() {
  int jresult ;
  int result;
  
  result = (int)AkMIDIPost_GetSizeOf();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AkMIDIPost() {
  void * jresult ;
  AkMIDIPost *result = 0 ;
  
  {
    result = (AkMIDIPost *)new AkMIDIPost();
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AkMIDIPost(void * jarg1) {
  AkMIDIPost *arg1 = (AkMIDIPost *) 0 ;
  
  arg1 = (AkMIDIPost *)jarg1; 
  {
    delete arg1;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkMusicSettings_fStreamingLookAheadRatio_set(void * jarg1, float jarg2) {
  AkMusicSettings *arg1 = (AkMusicSettings *) 0 ;
  AkReal32 arg2 ;
  
  arg1 = (AkMusicSettings *)jarg1; 
  arg2 = (AkReal32)jarg2; 
  if (arg1) (arg1)->fStreamingLookAheadRatio = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AkMusicSettings_fStreamingLookAheadRatio_get(void * jarg1) {
  float jresult ;
  AkMusicSettings *arg1 = (AkMusicSettings *) 0 ;
  AkReal32 result;
  
  arg1 = (AkMusicSettings *)jarg1; 
  result = (AkReal32) ((arg1)->fStreamingLookAheadRatio);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AkMusicSettings(void * jarg1) {
  AkMusicSettings *arg1 = (AkMusicSettings *) 0 ;
  
  arg1 = (AkMusicSettings *)jarg1; 
  {
    delete arg1;
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetPlayingSegmentInfo__SWIG_0(unsigned int jarg1, void * jarg2, unsigned int jarg3) {
  int jresult ;
  AkPlayingID arg1 ;
  AkSegmentInfo *arg2 = 0 ;
  bool arg3 ;
  AKRESULT result;
  
  arg1 = (AkPlayingID)jarg1; 
  arg2 = (AkSegmentInfo *)jarg2;
  if (!arg2) {
    return AK_Fail;
  } 
  arg3 = jarg3 ? true : false; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::MusicEngine::GetPlayingSegmentInfo(arg1,*arg2,arg3);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::MusicEngine::GetPlayingSegmentInfo(AkPlayingID,AkSegmentInfo &,bool): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetPlayingSegmentInfo__SWIG_1(unsigned int jarg1, void * jarg2) {
  int jresult ;
  AkPlayingID arg1 ;
  AkSegmentInfo *arg2 = 0 ;
  AKRESULT result;
  
  arg1 = (AkPlayingID)jarg1; 
  arg2 = (AkSegmentInfo *)jarg2;
  if (!arg2) {
    return AK_Fail;
  } 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::MusicEngine::GetPlayingSegmentInfo(arg1,*arg2);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::MusicEngine::GetPlayingSegmentInfo(AkPlayingID,AkSegmentInfo &): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AkSerializedCallbackHeader_pPackage_get(void * jarg1) {
  void * jresult ;
  AkSerializedCallbackHeader *arg1 = (AkSerializedCallbackHeader *) 0 ;
  void *result = 0 ;
  
  arg1 = (AkSerializedCallbackHeader *)jarg1; 
  result = (void *) ((arg1)->pPackage);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkSerializedCallbackHeader_eType_get(void * jarg1) {
  unsigned int jresult ;
  AkSerializedCallbackHeader *arg1 = (AkSerializedCallbackHeader *) 0 ;
  AkUInt32 result;
  
  arg1 = (AkSerializedCallbackHeader *)jarg1; 
  result = (AkUInt32) ((arg1)->eType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AkSerializedCallbackHeader_GetData(void * jarg1) {
  void * jresult ;
  AkSerializedCallbackHeader *arg1 = (AkSerializedCallbackHeader *) 0 ;
  void *result = 0 ;
  
  arg1 = (AkSerializedCallbackHeader *)jarg1; 
  {
    result = (void *)((AkSerializedCallbackHeader const *)arg1)->GetData();
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AkSerializedCallbackHeader_pNext_get(void * jarg1) {
  void * jresult ;
  AkSerializedCallbackHeader *arg1 = (AkSerializedCallbackHeader *) 0 ;
  AkSerializedCallbackHeader *result = 0 ;
  
  arg1 = (AkSerializedCallbackHeader *)jarg1; 
  {
    result = (AkSerializedCallbackHeader *)AkSerializedCallbackHeader_pNext_get(arg1);
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AkSerializedCallbackHeader() {
  void * jresult ;
  AkSerializedCallbackHeader *result = 0 ;
  
  {
    result = (AkSerializedCallbackHeader *)new AkSerializedCallbackHeader();
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AkSerializedCallbackHeader(void * jarg1) {
  AkSerializedCallbackHeader *arg1 = (AkSerializedCallbackHeader *) 0 ;
  
  arg1 = (AkSerializedCallbackHeader *)jarg1; 
  {
    delete arg1;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AkCallbackInfo_pCookie_get(void * jarg1) {
  void * jresult ;
  AkSerializedCallbackInfo *arg1 = (AkSerializedCallbackInfo *) 0 ;
  void *result = 0 ;
  
  arg1 = (AkSerializedCallbackInfo *)jarg1; 
  result = (void *) ((arg1)->pCookie);
  jresult = result; 
  return jresult;
}


SWIGEXPORT AkGameObjectID SWIGSTDCALL CSharp_AkCallbackInfo_gameObjID_get(void * jarg1) {
  AkGameObjectID jresult ;
  AkSerializedCallbackInfo *arg1 = (AkSerializedCallbackInfo *) 0 ;
  AkGameObjectID result;
  
  arg1 = (AkSerializedCallbackInfo *)jarg1; 
  result = (AkGameObjectID) ((arg1)->gameObjID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AkCallbackInfo() {
  void * jresult ;
  AkSerializedCallbackInfo *result = 0 ;
  
  {
    result = (AkSerializedCallbackInfo *)new AkSerializedCallbackInfo();
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AkCallbackInfo(void * jarg1) {
  AkSerializedCallbackInfo *arg1 = (AkSerializedCallbackInfo *) 0 ;
  
  arg1 = (AkSerializedCallbackInfo *)jarg1; 
  {
    delete arg1;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkEventCallbackInfo_playingID_get(void * jarg1) {
  unsigned int jresult ;
  AkSerializedEventCallbackInfo *arg1 = (AkSerializedEventCallbackInfo *) 0 ;
  AkPlayingID result;
  
  arg1 = (AkSerializedEventCallbackInfo *)jarg1; 
  result = (AkPlayingID) ((arg1)->playingID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkEventCallbackInfo_eventID_get(void * jarg1) {
  unsigned int jresult ;
  AkSerializedEventCallbackInfo *arg1 = (AkSerializedEventCallbackInfo *) 0 ;
  AkUniqueID result;
  
  arg1 = (AkSerializedEventCallbackInfo *)jarg1; 
  result = (AkUniqueID) ((arg1)->eventID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AkEventCallbackInfo() {
  void * jresult ;
  AkSerializedEventCallbackInfo *result = 0 ;
  
  {
    result = (AkSerializedEventCallbackInfo *)new AkSerializedEventCallbackInfo();
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AkEventCallbackInfo(void * jarg1) {
  AkSerializedEventCallbackInfo *arg1 = (AkSerializedEventCallbackInfo *) 0 ;
  
  arg1 = (AkSerializedEventCallbackInfo *)jarg1; 
  {
    delete arg1;
  }
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_AkMIDIEventCallbackInfo_byChan_get(void * jarg1) {
  unsigned char jresult ;
  AkSerializedMIDIEventCallbackInfo *arg1 = (AkSerializedMIDIEventCallbackInfo *) 0 ;
  AkMidiChannelNo result;
  
  arg1 = (AkSerializedMIDIEventCallbackInfo *)jarg1; 
  result = (AkMidiChannelNo) ((arg1)->byChan);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_AkMIDIEventCallbackInfo_byParam1_get(void * jarg1) {
  unsigned char jresult ;
  AkSerializedMIDIEventCallbackInfo *arg1 = (AkSerializedMIDIEventCallbackInfo *) 0 ;
  AkUInt8 result;
  
  arg1 = (AkSerializedMIDIEventCallbackInfo *)jarg1; 
  result = (AkUInt8) ((arg1)->byParam1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_AkMIDIEventCallbackInfo_byParam2_get(void * jarg1) {
  unsigned char jresult ;
  AkSerializedMIDIEventCallbackInfo *arg1 = (AkSerializedMIDIEventCallbackInfo *) 0 ;
  AkUInt8 result;
  
  arg1 = (AkSerializedMIDIEventCallbackInfo *)jarg1; 
  result = (AkUInt8) ((arg1)->byParam2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AkMIDIEventCallbackInfo_byType_get(void * jarg1) {
  int jresult ;
  AkSerializedMIDIEventCallbackInfo *arg1 = (AkSerializedMIDIEventCallbackInfo *) 0 ;
  AkMIDIEventTypes result;
  
  arg1 = (AkSerializedMIDIEventCallbackInfo *)jarg1; 
  {
    result = (AkMIDIEventTypes)AkSerializedMIDIEventCallbackInfo_byType_get(arg1);
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_AkMIDIEventCallbackInfo_byOnOffNote_get(void * jarg1) {
  unsigned char jresult ;
  AkSerializedMIDIEventCallbackInfo *arg1 = (AkSerializedMIDIEventCallbackInfo *) 0 ;
  AkMidiNoteNo result;
  
  arg1 = (AkSerializedMIDIEventCallbackInfo *)jarg1; 
  {
    result = (AkMidiNoteNo)AkSerializedMIDIEventCallbackInfo_byOnOffNote_get(arg1);
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_AkMIDIEventCallbackInfo_byVelocity_get(void * jarg1) {
  unsigned char jresult ;
  AkSerializedMIDIEventCallbackInfo *arg1 = (AkSerializedMIDIEventCallbackInfo *) 0 ;
  AkUInt8 result;
  
  arg1 = (AkSerializedMIDIEventCallbackInfo *)jarg1; 
  {
    result = (AkUInt8)AkSerializedMIDIEventCallbackInfo_byVelocity_get(arg1);
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AkMIDIEventCallbackInfo_byCc_get(void * jarg1) {
  int jresult ;
  AkSerializedMIDIEventCallbackInfo *arg1 = (AkSerializedMIDIEventCallbackInfo *) 0 ;
  AkMIDICcTypes result;
  
  arg1 = (AkSerializedMIDIEventCallbackInfo *)jarg1; 
  {
    result = (AkMIDICcTypes)AkSerializedMIDIEventCallbackInfo_byCc_get(arg1);
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_AkMIDIEventCallbackInfo_byCcValue_get(void * jarg1) {
  unsigned char jresult ;
  AkSerializedMIDIEventCallbackInfo *arg1 = (AkSerializedMIDIEventCallbackInfo *) 0 ;
  AkUInt8 result;
  
  arg1 = (AkSerializedMIDIEventCallbackInfo *)jarg1; 
  {
    result = (AkUInt8)AkSerializedMIDIEventCallbackInfo_byCcValue_get(arg1);
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_AkMIDIEventCallbackInfo_byValueLsb_get(void * jarg1) {
  unsigned char jresult ;
  AkSerializedMIDIEventCallbackInfo *arg1 = (AkSerializedMIDIEventCallbackInfo *) 0 ;
  AkUInt8 result;
  
  arg1 = (AkSerializedMIDIEventCallbackInfo *)jarg1; 
  {
    result = (AkUInt8)AkSerializedMIDIEventCallbackInfo_byValueLsb_get(arg1);
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_AkMIDIEventCallbackInfo_byValueMsb_get(void * jarg1) {
  unsigned char jresult ;
  AkSerializedMIDIEventCallbackInfo *arg1 = (AkSerializedMIDIEventCallbackInfo *) 0 ;
  AkUInt8 result;
  
  arg1 = (AkSerializedMIDIEventCallbackInfo *)jarg1; 
  {
    result = (AkUInt8)AkSerializedMIDIEventCallbackInfo_byValueMsb_get(arg1);
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_AkMIDIEventCallbackInfo_byAftertouchNote_get(void * jarg1) {
  unsigned char jresult ;
  AkSerializedMIDIEventCallbackInfo *arg1 = (AkSerializedMIDIEventCallbackInfo *) 0 ;
  AkUInt8 result;
  
  arg1 = (AkSerializedMIDIEventCallbackInfo *)jarg1; 
  {
    result = (AkUInt8)AkSerializedMIDIEventCallbackInfo_byAftertouchNote_get(arg1);
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_AkMIDIEventCallbackInfo_byNoteAftertouchValue_get(void * jarg1) {
  unsigned char jresult ;
  AkSerializedMIDIEventCallbackInfo *arg1 = (AkSerializedMIDIEventCallbackInfo *) 0 ;
  AkUInt8 result;
  
  arg1 = (AkSerializedMIDIEventCallbackInfo *)jarg1; 
  {
    result = (AkUInt8)AkSerializedMIDIEventCallbackInfo_byNoteAftertouchValue_get(arg1);
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_AkMIDIEventCallbackInfo_byChanAftertouchValue_get(void * jarg1) {
  unsigned char jresult ;
  AkSerializedMIDIEventCallbackInfo *arg1 = (AkSerializedMIDIEventCallbackInfo *) 0 ;
  AkUInt8 result;
  
  arg1 = (AkSerializedMIDIEventCallbackInfo *)jarg1; 
  {
    result = (AkUInt8)AkSerializedMIDIEventCallbackInfo_byChanAftertouchValue_get(arg1);
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_AkMIDIEventCallbackInfo_byProgramNum_get(void * jarg1) {
  unsigned char jresult ;
  AkSerializedMIDIEventCallbackInfo *arg1 = (AkSerializedMIDIEventCallbackInfo *) 0 ;
  AkUInt8 result;
  
  arg1 = (AkSerializedMIDIEventCallbackInfo *)jarg1; 
  {
    result = (AkUInt8)AkSerializedMIDIEventCallbackInfo_byProgramNum_get(arg1);
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AkMIDIEventCallbackInfo() {
  void * jresult ;
  AkSerializedMIDIEventCallbackInfo *result = 0 ;
  
  {
    result = (AkSerializedMIDIEventCallbackInfo *)new AkSerializedMIDIEventCallbackInfo();
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AkMIDIEventCallbackInfo(void * jarg1) {
  AkSerializedMIDIEventCallbackInfo *arg1 = (AkSerializedMIDIEventCallbackInfo *) 0 ;
  
  arg1 = (AkSerializedMIDIEventCallbackInfo *)jarg1; 
  {
    delete arg1;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkMarkerCallbackInfo_uIdentifier_get(void * jarg1) {
  unsigned int jresult ;
  AkSerializedMarkerCallbackInfo *arg1 = (AkSerializedMarkerCallbackInfo *) 0 ;
  AkUInt32 result;
  
  arg1 = (AkSerializedMarkerCallbackInfo *)jarg1; 
  result = (AkUInt32) ((arg1)->uIdentifier);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkMarkerCallbackInfo_uPosition_get(void * jarg1) {
  unsigned int jresult ;
  AkSerializedMarkerCallbackInfo *arg1 = (AkSerializedMarkerCallbackInfo *) 0 ;
  AkUInt32 result;
  
  arg1 = (AkSerializedMarkerCallbackInfo *)jarg1; 
  result = (AkUInt32) ((arg1)->uPosition);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_AkMarkerCallbackInfo_strLabel_get(void * jarg1) {
  char * jresult ;
  AkSerializedMarkerCallbackInfo *arg1 = (AkSerializedMarkerCallbackInfo *) 0 ;
  char *result = 0 ;
  
  arg1 = (AkSerializedMarkerCallbackInfo *)jarg1; 
  result = (char *)(char *) ((arg1)->strLabel);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AkMarkerCallbackInfo() {
  void * jresult ;
  AkSerializedMarkerCallbackInfo *result = 0 ;
  
  {
    result = (AkSerializedMarkerCallbackInfo *)new AkSerializedMarkerCallbackInfo();
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AkMarkerCallbackInfo(void * jarg1) {
  AkSerializedMarkerCallbackInfo *arg1 = (AkSerializedMarkerCallbackInfo *) 0 ;
  
  arg1 = (AkSerializedMarkerCallbackInfo *)jarg1; 
  {
    delete arg1;
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_AkDurationCallbackInfo_fDuration_get(void * jarg1) {
  float jresult ;
  AkSerializedDurationCallbackInfo *arg1 = (AkSerializedDurationCallbackInfo *) 0 ;
  AkReal32 result;
  
  arg1 = (AkSerializedDurationCallbackInfo *)jarg1; 
  result = (AkReal32) ((arg1)->fDuration);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AkDurationCallbackInfo_fEstimatedDuration_get(void * jarg1) {
  float jresult ;
  AkSerializedDurationCallbackInfo *arg1 = (AkSerializedDurationCallbackInfo *) 0 ;
  AkReal32 result;
  
  arg1 = (AkSerializedDurationCallbackInfo *)jarg1; 
  result = (AkReal32) ((arg1)->fEstimatedDuration);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkDurationCallbackInfo_audioNodeID_get(void * jarg1) {
  unsigned int jresult ;
  AkSerializedDurationCallbackInfo *arg1 = (AkSerializedDurationCallbackInfo *) 0 ;
  AkUniqueID result;
  
  arg1 = (AkSerializedDurationCallbackInfo *)jarg1; 
  result = (AkUniqueID) ((arg1)->audioNodeID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkDurationCallbackInfo_mediaID_get(void * jarg1) {
  unsigned int jresult ;
  AkSerializedDurationCallbackInfo *arg1 = (AkSerializedDurationCallbackInfo *) 0 ;
  AkUniqueID result;
  
  arg1 = (AkSerializedDurationCallbackInfo *)jarg1; 
  result = (AkUniqueID) ((arg1)->mediaID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkDurationCallbackInfo_bStreaming_get(void * jarg1) {
  unsigned int jresult ;
  AkSerializedDurationCallbackInfo *arg1 = (AkSerializedDurationCallbackInfo *) 0 ;
  bool result;
  
  arg1 = (AkSerializedDurationCallbackInfo *)jarg1; 
  result = (bool) ((arg1)->bStreaming);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AkDurationCallbackInfo() {
  void * jresult ;
  AkSerializedDurationCallbackInfo *result = 0 ;
  
  {
    result = (AkSerializedDurationCallbackInfo *)new AkSerializedDurationCallbackInfo();
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AkDurationCallbackInfo(void * jarg1) {
  AkSerializedDurationCallbackInfo *arg1 = (AkSerializedDurationCallbackInfo *) 0 ;
  
  arg1 = (AkSerializedDurationCallbackInfo *)jarg1; 
  {
    delete arg1;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkDynamicSequenceItemCallbackInfo_playingID_get(void * jarg1) {
  unsigned int jresult ;
  AkSerializedDynamicSequenceItemCallbackInfo *arg1 = (AkSerializedDynamicSequenceItemCallbackInfo *) 0 ;
  AkPlayingID result;
  
  arg1 = (AkSerializedDynamicSequenceItemCallbackInfo *)jarg1; 
  result = (AkPlayingID) ((arg1)->playingID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkDynamicSequenceItemCallbackInfo_audioNodeID_get(void * jarg1) {
  unsigned int jresult ;
  AkSerializedDynamicSequenceItemCallbackInfo *arg1 = (AkSerializedDynamicSequenceItemCallbackInfo *) 0 ;
  AkUniqueID result;
  
  arg1 = (AkSerializedDynamicSequenceItemCallbackInfo *)jarg1; 
  result = (AkUniqueID) ((arg1)->audioNodeID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AkDynamicSequenceItemCallbackInfo_pCustomInfo_get(void * jarg1) {
  void * jresult ;
  AkSerializedDynamicSequenceItemCallbackInfo *arg1 = (AkSerializedDynamicSequenceItemCallbackInfo *) 0 ;
  void *result = 0 ;
  
  arg1 = (AkSerializedDynamicSequenceItemCallbackInfo *)jarg1; 
  result = (void *) ((arg1)->pCustomInfo);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AkDynamicSequenceItemCallbackInfo() {
  void * jresult ;
  AkSerializedDynamicSequenceItemCallbackInfo *result = 0 ;
  
  {
    result = (AkSerializedDynamicSequenceItemCallbackInfo *)new AkSerializedDynamicSequenceItemCallbackInfo();
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AkDynamicSequenceItemCallbackInfo(void * jarg1) {
  AkSerializedDynamicSequenceItemCallbackInfo *arg1 = (AkSerializedDynamicSequenceItemCallbackInfo *) 0 ;
  
  arg1 = (AkSerializedDynamicSequenceItemCallbackInfo *)jarg1; 
  {
    delete arg1;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkMusicSyncCallbackInfo_playingID_get(void * jarg1) {
  unsigned int jresult ;
  AkSerializedMusicSyncCallbackInfo *arg1 = (AkSerializedMusicSyncCallbackInfo *) 0 ;
  AkPlayingID result;
  
  arg1 = (AkSerializedMusicSyncCallbackInfo *)jarg1; 
  result = (AkPlayingID) ((arg1)->playingID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AkMusicSyncCallbackInfo_segmentInfo_iCurrentPosition_get(void * jarg1) {
  int jresult ;
  AkSerializedMusicSyncCallbackInfo *arg1 = (AkSerializedMusicSyncCallbackInfo *) 0 ;
  AkTimeMs result;
  
  arg1 = (AkSerializedMusicSyncCallbackInfo *)jarg1; 
  result = (AkTimeMs) ((arg1)->segmentInfo_iCurrentPosition);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AkMusicSyncCallbackInfo_segmentInfo_iPreEntryDuration_get(void * jarg1) {
  int jresult ;
  AkSerializedMusicSyncCallbackInfo *arg1 = (AkSerializedMusicSyncCallbackInfo *) 0 ;
  AkTimeMs result;
  
  arg1 = (AkSerializedMusicSyncCallbackInfo *)jarg1; 
  result = (AkTimeMs) ((arg1)->segmentInfo_iPreEntryDuration);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AkMusicSyncCallbackInfo_segmentInfo_iActiveDuration_get(void * jarg1) {
  int jresult ;
  AkSerializedMusicSyncCallbackInfo *arg1 = (AkSerializedMusicSyncCallbackInfo *) 0 ;
  AkTimeMs result;
  
  arg1 = (AkSerializedMusicSyncCallbackInfo *)jarg1; 
  result = (AkTimeMs) ((arg1)->segmentInfo_iActiveDuration);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AkMusicSyncCallbackInfo_segmentInfo_iPostExitDuration_get(void * jarg1) {
  int jresult ;
  AkSerializedMusicSyncCallbackInfo *arg1 = (AkSerializedMusicSyncCallbackInfo *) 0 ;
  AkTimeMs result;
  
  arg1 = (AkSerializedMusicSyncCallbackInfo *)jarg1; 
  result = (AkTimeMs) ((arg1)->segmentInfo_iPostExitDuration);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AkMusicSyncCallbackInfo_segmentInfo_iRemainingLookAheadTime_get(void * jarg1) {
  int jresult ;
  AkSerializedMusicSyncCallbackInfo *arg1 = (AkSerializedMusicSyncCallbackInfo *) 0 ;
  AkTimeMs result;
  
  arg1 = (AkSerializedMusicSyncCallbackInfo *)jarg1; 
  result = (AkTimeMs) ((arg1)->segmentInfo_iRemainingLookAheadTime);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AkMusicSyncCallbackInfo_segmentInfo_fBeatDuration_get(void * jarg1) {
  float jresult ;
  AkSerializedMusicSyncCallbackInfo *arg1 = (AkSerializedMusicSyncCallbackInfo *) 0 ;
  AkReal32 result;
  
  arg1 = (AkSerializedMusicSyncCallbackInfo *)jarg1; 
  result = (AkReal32) ((arg1)->segmentInfo_fBeatDuration);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AkMusicSyncCallbackInfo_segmentInfo_fBarDuration_get(void * jarg1) {
  float jresult ;
  AkSerializedMusicSyncCallbackInfo *arg1 = (AkSerializedMusicSyncCallbackInfo *) 0 ;
  AkReal32 result;
  
  arg1 = (AkSerializedMusicSyncCallbackInfo *)jarg1; 
  result = (AkReal32) ((arg1)->segmentInfo_fBarDuration);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AkMusicSyncCallbackInfo_segmentInfo_fGridDuration_get(void * jarg1) {
  float jresult ;
  AkSerializedMusicSyncCallbackInfo *arg1 = (AkSerializedMusicSyncCallbackInfo *) 0 ;
  AkReal32 result;
  
  arg1 = (AkSerializedMusicSyncCallbackInfo *)jarg1; 
  result = (AkReal32) ((arg1)->segmentInfo_fGridDuration);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AkMusicSyncCallbackInfo_segmentInfo_fGridOffset_get(void * jarg1) {
  float jresult ;
  AkSerializedMusicSyncCallbackInfo *arg1 = (AkSerializedMusicSyncCallbackInfo *) 0 ;
  AkReal32 result;
  
  arg1 = (AkSerializedMusicSyncCallbackInfo *)jarg1; 
  result = (AkReal32) ((arg1)->segmentInfo_fGridOffset);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AkMusicSyncCallbackInfo_musicSyncType_get(void * jarg1) {
  int jresult ;
  AkSerializedMusicSyncCallbackInfo *arg1 = (AkSerializedMusicSyncCallbackInfo *) 0 ;
  AkCallbackType result;
  
  arg1 = (AkSerializedMusicSyncCallbackInfo *)jarg1; 
  result = (AkCallbackType) ((arg1)->musicSyncType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_AkMusicSyncCallbackInfo_userCueName_get(void * jarg1) {
  char * jresult ;
  AkSerializedMusicSyncCallbackInfo *arg1 = (AkSerializedMusicSyncCallbackInfo *) 0 ;
  char *result = 0 ;
  
  arg1 = (AkSerializedMusicSyncCallbackInfo *)jarg1; 
  result = (char *)(char *) ((arg1)->userCueName);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AkMusicSyncCallbackInfo() {
  void * jresult ;
  AkSerializedMusicSyncCallbackInfo *result = 0 ;
  
  {
    result = (AkSerializedMusicSyncCallbackInfo *)new AkSerializedMusicSyncCallbackInfo();
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AkMusicSyncCallbackInfo(void * jarg1) {
  AkSerializedMusicSyncCallbackInfo *arg1 = (AkSerializedMusicSyncCallbackInfo *) 0 ;
  
  arg1 = (AkSerializedMusicSyncCallbackInfo *)jarg1; 
  {
    delete arg1;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkMusicPlaylistCallbackInfo_playlistID_get(void * jarg1) {
  unsigned int jresult ;
  AkSerializedMusicPlaylistCallbackInfo *arg1 = (AkSerializedMusicPlaylistCallbackInfo *) 0 ;
  AkUniqueID result;
  
  arg1 = (AkSerializedMusicPlaylistCallbackInfo *)jarg1; 
  result = (AkUniqueID) ((arg1)->playlistID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkMusicPlaylistCallbackInfo_uNumPlaylistItems_get(void * jarg1) {
  unsigned int jresult ;
  AkSerializedMusicPlaylistCallbackInfo *arg1 = (AkSerializedMusicPlaylistCallbackInfo *) 0 ;
  AkUInt32 result;
  
  arg1 = (AkSerializedMusicPlaylistCallbackInfo *)jarg1; 
  result = (AkUInt32) ((arg1)->uNumPlaylistItems);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkMusicPlaylistCallbackInfo_uPlaylistSelection_get(void * jarg1) {
  unsigned int jresult ;
  AkSerializedMusicPlaylistCallbackInfo *arg1 = (AkSerializedMusicPlaylistCallbackInfo *) 0 ;
  AkUInt32 result;
  
  arg1 = (AkSerializedMusicPlaylistCallbackInfo *)jarg1; 
  result = (AkUInt32) ((arg1)->uPlaylistSelection);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkMusicPlaylistCallbackInfo_uPlaylistItemDone_get(void * jarg1) {
  unsigned int jresult ;
  AkSerializedMusicPlaylistCallbackInfo *arg1 = (AkSerializedMusicPlaylistCallbackInfo *) 0 ;
  AkUInt32 result;
  
  arg1 = (AkSerializedMusicPlaylistCallbackInfo *)jarg1; 
  result = (AkUInt32) ((arg1)->uPlaylistItemDone);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AkMusicPlaylistCallbackInfo() {
  void * jresult ;
  AkSerializedMusicPlaylistCallbackInfo *result = 0 ;
  
  {
    result = (AkSerializedMusicPlaylistCallbackInfo *)new AkSerializedMusicPlaylistCallbackInfo();
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AkMusicPlaylistCallbackInfo(void * jarg1) {
  AkSerializedMusicPlaylistCallbackInfo *arg1 = (AkSerializedMusicPlaylistCallbackInfo *) 0 ;
  
  arg1 = (AkSerializedMusicPlaylistCallbackInfo *)jarg1; 
  {
    delete arg1;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkBankCallbackInfo_bankID_get(void * jarg1) {
  unsigned int jresult ;
  AkSerializedBankCallbackInfo *arg1 = (AkSerializedBankCallbackInfo *) 0 ;
  AkUInt32 result;
  
  arg1 = (AkSerializedBankCallbackInfo *)jarg1; 
  result = (AkUInt32) ((arg1)->bankID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AkBankCallbackInfo_inMemoryBankPtr_get(void * jarg1) {
  void * jresult ;
  AkSerializedBankCallbackInfo *arg1 = (AkSerializedBankCallbackInfo *) 0 ;
  void *result = 0 ;
  
  arg1 = (AkSerializedBankCallbackInfo *)jarg1; 
  result = (void *) ((arg1)->inMemoryBankPtr);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AkBankCallbackInfo_loadResult_get(void * jarg1) {
  int jresult ;
  AkSerializedBankCallbackInfo *arg1 = (AkSerializedBankCallbackInfo *) 0 ;
  AKRESULT result;
  
  arg1 = (AkSerializedBankCallbackInfo *)jarg1; 
  result = (AKRESULT) ((arg1)->loadResult);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AkBankCallbackInfo() {
  void * jresult ;
  AkSerializedBankCallbackInfo *result = 0 ;
  
  {
    result = (AkSerializedBankCallbackInfo *)new AkSerializedBankCallbackInfo();
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AkBankCallbackInfo(void * jarg1) {
  AkSerializedBankCallbackInfo *arg1 = (AkSerializedBankCallbackInfo *) 0 ;
  
  arg1 = (AkSerializedBankCallbackInfo *)jarg1; 
  {
    delete arg1;
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_AkMonitoringCallbackInfo_errorCode_get(void * jarg1) {
  int jresult ;
  AkSerializedMonitoringCallbackInfo *arg1 = (AkSerializedMonitoringCallbackInfo *) 0 ;
  AK::Monitor::ErrorCode result;
  
  arg1 = (AkSerializedMonitoringCallbackInfo *)jarg1; 
  result = (AK::Monitor::ErrorCode) ((arg1)->errorCode);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AkMonitoringCallbackInfo_errorLevel_get(void * jarg1) {
  int jresult ;
  AkSerializedMonitoringCallbackInfo *arg1 = (AkSerializedMonitoringCallbackInfo *) 0 ;
  AK::Monitor::ErrorLevel result;
  
  arg1 = (AkSerializedMonitoringCallbackInfo *)jarg1; 
  result = (AK::Monitor::ErrorLevel) ((arg1)->errorLevel);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkMonitoringCallbackInfo_playingID_get(void * jarg1) {
  unsigned int jresult ;
  AkSerializedMonitoringCallbackInfo *arg1 = (AkSerializedMonitoringCallbackInfo *) 0 ;
  AkPlayingID result;
  
  arg1 = (AkSerializedMonitoringCallbackInfo *)jarg1; 
  result = (AkPlayingID) ((arg1)->playingID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT AkGameObjectID SWIGSTDCALL CSharp_AkMonitoringCallbackInfo_gameObjID_get(void * jarg1) {
  AkGameObjectID jresult ;
  AkSerializedMonitoringCallbackInfo *arg1 = (AkSerializedMonitoringCallbackInfo *) 0 ;
  AkGameObjectID result;
  
  arg1 = (AkSerializedMonitoringCallbackInfo *)jarg1; 
  result = (AkGameObjectID) ((arg1)->gameObjID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT wchar_t* SWIGSTDCALL CSharp_AkMonitoringCallbackInfo_message_get(void * jarg1) {
  wchar_t* jresult ;
  AkSerializedMonitoringCallbackInfo *arg1 = (AkSerializedMonitoringCallbackInfo *) 0 ;
  AkOSChar *result = 0 ;
  
  arg1 = (AkSerializedMonitoringCallbackInfo *)jarg1; 
  result = (AkOSChar *)(AkOSChar *) ((arg1)->message);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AkMonitoringCallbackInfo() {
  void * jresult ;
  AkSerializedMonitoringCallbackInfo *result = 0 ;
  
  {
    result = (AkSerializedMonitoringCallbackInfo *)new AkSerializedMonitoringCallbackInfo();
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AkMonitoringCallbackInfo(void * jarg1) {
  AkSerializedMonitoringCallbackInfo *arg1 = (AkSerializedMonitoringCallbackInfo *) 0 ;
  
  arg1 = (AkSerializedMonitoringCallbackInfo *)jarg1; 
  {
    delete arg1;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkAudioInterruptionCallbackInfo_bEnterInterruption_get(void * jarg1) {
  unsigned int jresult ;
  AkSerializedAudioInterruptionCallbackInfo *arg1 = (AkSerializedAudioInterruptionCallbackInfo *) 0 ;
  bool result;
  
  arg1 = (AkSerializedAudioInterruptionCallbackInfo *)jarg1; 
  result = (bool) ((arg1)->bEnterInterruption);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AkAudioInterruptionCallbackInfo() {
  void * jresult ;
  AkSerializedAudioInterruptionCallbackInfo *result = 0 ;
  
  {
    result = (AkSerializedAudioInterruptionCallbackInfo *)new AkSerializedAudioInterruptionCallbackInfo();
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AkAudioInterruptionCallbackInfo(void * jarg1) {
  AkSerializedAudioInterruptionCallbackInfo *arg1 = (AkSerializedAudioInterruptionCallbackInfo *) 0 ;
  
  arg1 = (AkSerializedAudioInterruptionCallbackInfo *)jarg1; 
  {
    delete arg1;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkAudioSourceChangeCallbackInfo_bOtherAudioPlaying_get(void * jarg1) {
  unsigned int jresult ;
  AkSerializedAudioSourceChangeCallbackInfo *arg1 = (AkSerializedAudioSourceChangeCallbackInfo *) 0 ;
  bool result;
  
  arg1 = (AkSerializedAudioSourceChangeCallbackInfo *)jarg1; 
  result = (bool) ((arg1)->bOtherAudioPlaying);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AkAudioSourceChangeCallbackInfo() {
  void * jresult ;
  AkSerializedAudioSourceChangeCallbackInfo *result = 0 ;
  
  {
    result = (AkSerializedAudioSourceChangeCallbackInfo *)new AkSerializedAudioSourceChangeCallbackInfo();
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AkAudioSourceChangeCallbackInfo(void * jarg1) {
  AkSerializedAudioSourceChangeCallbackInfo *arg1 = (AkSerializedAudioSourceChangeCallbackInfo *) 0 ;
  
  arg1 = (AkSerializedAudioSourceChangeCallbackInfo *)jarg1; 
  {
    delete arg1;
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_AkCallbackSerializer_Init() {
  int jresult ;
  AKRESULT result;
  
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AkCallbackSerializer::Init();  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AkCallbackSerializer::Init(): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkCallbackSerializer_Term() {
  {
    AkCallbackSerializer::Term();
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AkCallbackSerializer_Lock() {
  void * jresult ;
  void *result = 0 ;
  
  {
    result = (void *)AkCallbackSerializer::Lock();
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkCallbackSerializer_Unlock() {
  {
    AkCallbackSerializer::Unlock();
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkCallbackSerializer_SetLocalOutput(unsigned int jarg1) {
  AkUInt32 arg1 ;
  
  arg1 = (AkUInt32)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      AkCallbackSerializer::SetLocalOutput(arg1);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AkCallbackSerializer::SetLocalOutput(AkUInt32): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return ; 	
    } 
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_AkCallbackSerializer_AudioSourceChangeCallbackFunc(unsigned int jarg1, void * jarg2) {
  int jresult ;
  bool arg1 ;
  void *arg2 = (void *) 0 ;
  AKRESULT result;
  
  arg1 = jarg1 ? true : false; 
  arg2 = jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AkCallbackSerializer::AudioSourceChangeCallbackFunc(arg1,arg2);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AkCallbackSerializer::AudioSourceChangeCallbackFunc(bool,void *): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AkCallbackSerializer() {
  void * jresult ;
  AkCallbackSerializer *result = 0 ;
  
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AkCallbackSerializer *)new AkCallbackSerializer();  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AkCallbackSerializer::AkCallbackSerializer(): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return 0; 	
    } 
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AkCallbackSerializer(void * jarg1) {
  AkCallbackSerializer *arg1 = (AkCallbackSerializer *) 0 ;
  
  arg1 = (AkCallbackSerializer *)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      delete arg1;  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AkCallbackSerializer::~AkCallbackSerializer(): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return ; 	
    } 
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_PostCode__SWIG_0(int jarg1, int jarg2, unsigned int jarg3, AkGameObjectID jarg4, unsigned int jarg5, unsigned int jarg6) {
  int jresult ;
  AK::Monitor::ErrorCode arg1 ;
  AK::Monitor::ErrorLevel arg2 ;
  AkPlayingID arg3 ;
  AkGameObjectID arg4 ;
  AkUniqueID arg5 ;
  bool arg6 ;
  AKRESULT result;
  
  arg1 = (AK::Monitor::ErrorCode)jarg1; 
  arg2 = (AK::Monitor::ErrorLevel)jarg2; 
  arg3 = (AkPlayingID)jarg3; 
  arg4 = jarg4; 
  arg5 = (AkUniqueID)jarg5; 
  arg6 = jarg6 ? true : false; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::Monitor::PostCode(arg1,arg2,arg3,arg4,arg5,arg6);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::Monitor::PostCode(AK::Monitor::ErrorCode,AK::Monitor::ErrorLevel,AkPlayingID,AkGameObjectID,AkUniqueID,bool): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PostCode__SWIG_1(int jarg1, int jarg2, unsigned int jarg3, AkGameObjectID jarg4, unsigned int jarg5) {
  int jresult ;
  AK::Monitor::ErrorCode arg1 ;
  AK::Monitor::ErrorLevel arg2 ;
  AkPlayingID arg3 ;
  AkGameObjectID arg4 ;
  AkUniqueID arg5 ;
  AKRESULT result;
  
  arg1 = (AK::Monitor::ErrorCode)jarg1; 
  arg2 = (AK::Monitor::ErrorLevel)jarg2; 
  arg3 = (AkPlayingID)jarg3; 
  arg4 = jarg4; 
  arg5 = (AkUniqueID)jarg5; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::Monitor::PostCode(arg1,arg2,arg3,arg4,arg5);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::Monitor::PostCode(AK::Monitor::ErrorCode,AK::Monitor::ErrorLevel,AkPlayingID,AkGameObjectID,AkUniqueID): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PostCode__SWIG_2(int jarg1, int jarg2, unsigned int jarg3, AkGameObjectID jarg4) {
  int jresult ;
  AK::Monitor::ErrorCode arg1 ;
  AK::Monitor::ErrorLevel arg2 ;
  AkPlayingID arg3 ;
  AkGameObjectID arg4 ;
  AKRESULT result;
  
  arg1 = (AK::Monitor::ErrorCode)jarg1; 
  arg2 = (AK::Monitor::ErrorLevel)jarg2; 
  arg3 = (AkPlayingID)jarg3; 
  arg4 = jarg4; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::Monitor::PostCode(arg1,arg2,arg3,arg4);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::Monitor::PostCode(AK::Monitor::ErrorCode,AK::Monitor::ErrorLevel,AkPlayingID,AkGameObjectID): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PostCode__SWIG_3(int jarg1, int jarg2, unsigned int jarg3) {
  int jresult ;
  AK::Monitor::ErrorCode arg1 ;
  AK::Monitor::ErrorLevel arg2 ;
  AkPlayingID arg3 ;
  AKRESULT result;
  
  arg1 = (AK::Monitor::ErrorCode)jarg1; 
  arg2 = (AK::Monitor::ErrorLevel)jarg2; 
  arg3 = (AkPlayingID)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::Monitor::PostCode(arg1,arg2,arg3);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::Monitor::PostCode(AK::Monitor::ErrorCode,AK::Monitor::ErrorLevel,AkPlayingID): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PostCode__SWIG_4(int jarg1, int jarg2) {
  int jresult ;
  AK::Monitor::ErrorCode arg1 ;
  AK::Monitor::ErrorLevel arg2 ;
  AKRESULT result;
  
  arg1 = (AK::Monitor::ErrorCode)jarg1; 
  arg2 = (AK::Monitor::ErrorLevel)jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::Monitor::PostCode(arg1,arg2);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::Monitor::PostCode(AK::Monitor::ErrorCode,AK::Monitor::ErrorLevel): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PostString__SWIG_0(wchar_t* jarg1, int jarg2, unsigned int jarg3, AkGameObjectID jarg4, unsigned int jarg5, unsigned int jarg6) {
  int jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  AK::Monitor::ErrorLevel arg2 ;
  AkPlayingID arg3 ;
  AkGameObjectID arg4 ;
  AkUniqueID arg5 ;
  bool arg6 ;
  AKRESULT result;
  
  arg1 = (wchar_t *)jarg1; 
  arg2 = (AK::Monitor::ErrorLevel)jarg2; 
  arg3 = (AkPlayingID)jarg3; 
  arg4 = jarg4; 
  arg5 = (AkUniqueID)jarg5; 
  arg6 = jarg6 ? true : false; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::Monitor::PostString((wchar_t const *)arg1,arg2,arg3,arg4,arg5,arg6);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::Monitor::PostString(wchar_t const *,AK::Monitor::ErrorLevel,AkPlayingID,AkGameObjectID,AkUniqueID,bool): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PostString__SWIG_1(wchar_t* jarg1, int jarg2, unsigned int jarg3, AkGameObjectID jarg4, unsigned int jarg5) {
  int jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  AK::Monitor::ErrorLevel arg2 ;
  AkPlayingID arg3 ;
  AkGameObjectID arg4 ;
  AkUniqueID arg5 ;
  AKRESULT result;
  
  arg1 = (wchar_t *)jarg1; 
  arg2 = (AK::Monitor::ErrorLevel)jarg2; 
  arg3 = (AkPlayingID)jarg3; 
  arg4 = jarg4; 
  arg5 = (AkUniqueID)jarg5; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::Monitor::PostString((wchar_t const *)arg1,arg2,arg3,arg4,arg5);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::Monitor::PostString(wchar_t const *,AK::Monitor::ErrorLevel,AkPlayingID,AkGameObjectID,AkUniqueID): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PostString__SWIG_2(wchar_t* jarg1, int jarg2, unsigned int jarg3, AkGameObjectID jarg4) {
  int jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  AK::Monitor::ErrorLevel arg2 ;
  AkPlayingID arg3 ;
  AkGameObjectID arg4 ;
  AKRESULT result;
  
  arg1 = (wchar_t *)jarg1; 
  arg2 = (AK::Monitor::ErrorLevel)jarg2; 
  arg3 = (AkPlayingID)jarg3; 
  arg4 = jarg4; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::Monitor::PostString((wchar_t const *)arg1,arg2,arg3,arg4);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::Monitor::PostString(wchar_t const *,AK::Monitor::ErrorLevel,AkPlayingID,AkGameObjectID): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PostString__SWIG_3(wchar_t* jarg1, int jarg2, unsigned int jarg3) {
  int jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  AK::Monitor::ErrorLevel arg2 ;
  AkPlayingID arg3 ;
  AKRESULT result;
  
  arg1 = (wchar_t *)jarg1; 
  arg2 = (AK::Monitor::ErrorLevel)jarg2; 
  arg3 = (AkPlayingID)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::Monitor::PostString((wchar_t const *)arg1,arg2,arg3);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::Monitor::PostString(wchar_t const *,AK::Monitor::ErrorLevel,AkPlayingID): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PostString__SWIG_4(wchar_t* jarg1, int jarg2) {
  int jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  AK::Monitor::ErrorLevel arg2 ;
  AKRESULT result;
  
  arg1 = (wchar_t *)jarg1; 
  arg2 = (AK::Monitor::ErrorLevel)jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::Monitor::PostString((wchar_t const *)arg1,arg2);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::Monitor::PostString(wchar_t const *,AK::Monitor::ErrorLevel): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetTimeStamp() {
  int jresult ;
  AkTimeMs result;
  
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AkTimeMs)AK::Monitor::GetTimeStamp();  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::Monitor::GetTimeStamp(): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return 0; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MonitorStreamMgrInit(void * jarg1) {
  AkStreamMgrSettings *arg1 = 0 ;
  
  arg1 = (AkStreamMgrSettings *)jarg1;
  if (!arg1) {
    return ;
  } 
  {
    if (AK::SoundEngine::IsInitialized()) {
      AK::Monitor::MonitorStreamMgrInit((AkStreamMgrSettings const &)*arg1);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::Monitor::MonitorStreamMgrInit(AkStreamMgrSettings const &): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return ; 	
    } 
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MonitorStreamingDeviceInit(unsigned int jarg1, void * jarg2) {
  AkDeviceID arg1 ;
  AkDeviceSettings *arg2 = 0 ;
  
  arg1 = (AkDeviceID)jarg1; 
  arg2 = (AkDeviceSettings *)jarg2;
  if (!arg2) {
    return ;
  } 
  {
    if (AK::SoundEngine::IsInitialized()) {
      AK::Monitor::MonitorStreamingDeviceInit(arg1,(AkDeviceSettings const &)*arg2);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::Monitor::MonitorStreamingDeviceInit(AkDeviceID,AkDeviceSettings const &): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return ; 	
    } 
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MonitorStreamingDeviceDestroyed(unsigned int jarg1) {
  AkDeviceID arg1 ;
  
  arg1 = (AkDeviceID)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      AK::Monitor::MonitorStreamingDeviceDestroyed(arg1);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::Monitor::MonitorStreamingDeviceDestroyed(AkDeviceID): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return ; 	
    } 
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MonitorStreamMgrTerm() {
  {
    if (AK::SoundEngine::IsInitialized()) {
      AK::Monitor::MonitorStreamMgrTerm();  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::Monitor::MonitorStreamMgrTerm(): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return ; 	
    } 
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GetNumNonZeroBits(unsigned int jarg1) {
  unsigned int jresult ;
  AkUInt32 arg1 ;
  AkUInt32 result;
  
  arg1 = (AkUInt32)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AkUInt32)AK::GetNumNonZeroBits(arg1);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::GetNumNonZeroBits(AkUInt32): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return 0; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GetNextPowerOfTwo(unsigned int jarg1) {
  unsigned int jresult ;
  AkUInt32 arg1 ;
  AkUInt32 result;
  
  arg1 = (AkUInt32)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AkUInt32)AK::GetNextPowerOfTwo(arg1);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::GetNextPowerOfTwo(AkUInt32): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return 0; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ROTL32(unsigned int jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  AkUInt32 arg1 ;
  AkUInt32 arg2 ;
  AkUInt32 result;
  
  arg1 = (AkUInt32)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AkUInt32)AK::ROTL32(arg1,arg2);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::ROTL32(AkUInt32,AkUInt32): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return 0; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_ROTL64(unsigned long long jarg1, unsigned long long jarg2) {
  unsigned long long jresult ;
  AkUInt64 arg1 ;
  AkUInt64 arg2 ;
  AkUInt64 result;
  
  arg1 = (AkUInt64)jarg1; 
  arg2 = (AkUInt64)jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AkUInt64)AK::ROTL64(arg1,arg2);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::ROTL64(AkUInt64,AkUInt64): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return 0; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkGetDefaultHighPriorityThreadProperties(void * jarg1) {
  AkThreadProperties *arg1 = 0 ;
  
  arg1 = (AkThreadProperties *)jarg1;
  if (!arg1) {
    return ;
  } 
  {
    if (AK::SoundEngine::IsInitialized()) {
      AKPLATFORM::AkGetDefaultHighPriorityThreadProperties(*arg1);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AKPLATFORM::AkGetDefaultHighPriorityThreadProperties(AkThreadProperties &): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return ; 	
    } 
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ResolveDialogueEvent__SWIG_0(unsigned int jarg1, unsigned int* jarg2, unsigned int jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  AkUniqueID arg1 ;
  AkArgumentValueID *arg2 = (AkArgumentValueID *) 0 ;
  AkUInt32 arg3 ;
  AkPlayingID arg4 ;
  AkUniqueID result;
  
  arg1 = (AkUniqueID)jarg1; 
  arg2 = jarg2;
  arg3 = (AkUInt32)jarg3; 
  arg4 = (AkPlayingID)jarg4; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AkUniqueID)AK::SoundEngine::DynamicDialogue::ResolveDialogueEvent(arg1,arg2,arg3,arg4);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::DynamicDialogue::ResolveDialogueEvent(AkUniqueID,AkArgumentValueID *,AkUInt32,AkPlayingID): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_INVALID_UNIQUE_ID; 	
    } 
  }
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ResolveDialogueEvent__SWIG_1(unsigned int jarg1, unsigned int* jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  AkUniqueID arg1 ;
  AkArgumentValueID *arg2 = (AkArgumentValueID *) 0 ;
  AkUInt32 arg3 ;
  AkUniqueID result;
  
  arg1 = (AkUniqueID)jarg1; 
  arg2 = jarg2;
  arg3 = (AkUInt32)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AkUniqueID)AK::SoundEngine::DynamicDialogue::ResolveDialogueEvent(arg1,arg2,arg3);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::DynamicDialogue::ResolveDialogueEvent(AkUniqueID,AkArgumentValueID *,AkUInt32): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_INVALID_UNIQUE_ID; 	
    } 
  }
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetDialogueEventCustomPropertyValue__SWIG_0(unsigned int jarg1, unsigned int jarg2, int * jarg3) {
  int jresult ;
  AkUniqueID arg1 ;
  AkUInt32 arg2 ;
  AkInt32 *arg3 = 0 ;
  AKRESULT result;
  
  arg1 = (AkUniqueID)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  arg3 = (AkInt32 *)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::DynamicDialogue::GetDialogueEventCustomPropertyValue(arg1,arg2,*arg3);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::DynamicDialogue::GetDialogueEventCustomPropertyValue(AkUniqueID,AkUInt32,AkInt32 &): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetDialogueEventCustomPropertyValue__SWIG_1(unsigned int jarg1, unsigned int jarg2, float * jarg3) {
  int jresult ;
  AkUniqueID arg1 ;
  AkUInt32 arg2 ;
  AkReal32 *arg3 = 0 ;
  AKRESULT result;
  
  arg1 = (AkUniqueID)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  arg3 = (AkReal32 *)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::DynamicDialogue::GetDialogueEventCustomPropertyValue(arg1,arg2,*arg3);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::DynamicDialogue::GetDialogueEventCustomPropertyValue(AkUniqueID,AkUInt32,AkReal32 &): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkPositioningInfo_fCenterPct_set(void * jarg1, float jarg2) {
  AkPositioningInfo *arg1 = (AkPositioningInfo *) 0 ;
  AkReal32 arg2 ;
  
  arg1 = (AkPositioningInfo *)jarg1; 
  arg2 = (AkReal32)jarg2; 
  if (arg1) (arg1)->fCenterPct = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AkPositioningInfo_fCenterPct_get(void * jarg1) {
  float jresult ;
  AkPositioningInfo *arg1 = (AkPositioningInfo *) 0 ;
  AkReal32 result;
  
  arg1 = (AkPositioningInfo *)jarg1; 
  result = (AkReal32) ((arg1)->fCenterPct);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkPositioningInfo_pannerType_set(void * jarg1, int jarg2) {
  AkPositioningInfo *arg1 = (AkPositioningInfo *) 0 ;
  AkSpeakerPanningType arg2 ;
  
  arg1 = (AkPositioningInfo *)jarg1; 
  arg2 = (AkSpeakerPanningType)jarg2; 
  if (arg1) (arg1)->pannerType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AkPositioningInfo_pannerType_get(void * jarg1) {
  int jresult ;
  AkPositioningInfo *arg1 = (AkPositioningInfo *) 0 ;
  AkSpeakerPanningType result;
  
  arg1 = (AkPositioningInfo *)jarg1; 
  result = (AkSpeakerPanningType) ((arg1)->pannerType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkPositioningInfo_e3dPositioningType_set(void * jarg1, int jarg2) {
  AkPositioningInfo *arg1 = (AkPositioningInfo *) 0 ;
  Ak3DPositionType arg2 ;
  
  arg1 = (AkPositioningInfo *)jarg1; 
  arg2 = (Ak3DPositionType)jarg2; 
  if (arg1) (arg1)->e3dPositioningType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AkPositioningInfo_e3dPositioningType_get(void * jarg1) {
  int jresult ;
  AkPositioningInfo *arg1 = (AkPositioningInfo *) 0 ;
  Ak3DPositionType result;
  
  arg1 = (AkPositioningInfo *)jarg1; 
  result = (Ak3DPositionType) ((arg1)->e3dPositioningType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkPositioningInfo_bHoldEmitterPosAndOrient_set(void * jarg1, unsigned int jarg2) {
  AkPositioningInfo *arg1 = (AkPositioningInfo *) 0 ;
  bool arg2 ;
  
  arg1 = (AkPositioningInfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bHoldEmitterPosAndOrient = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkPositioningInfo_bHoldEmitterPosAndOrient_get(void * jarg1) {
  unsigned int jresult ;
  AkPositioningInfo *arg1 = (AkPositioningInfo *) 0 ;
  bool result;
  
  arg1 = (AkPositioningInfo *)jarg1; 
  result = (bool) ((arg1)->bHoldEmitterPosAndOrient);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkPositioningInfo_e3DSpatializationMode_set(void * jarg1, int jarg2) {
  AkPositioningInfo *arg1 = (AkPositioningInfo *) 0 ;
  Ak3DSpatializationMode arg2 ;
  
  arg1 = (AkPositioningInfo *)jarg1; 
  arg2 = (Ak3DSpatializationMode)jarg2; 
  if (arg1) (arg1)->e3DSpatializationMode = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AkPositioningInfo_e3DSpatializationMode_get(void * jarg1) {
  int jresult ;
  AkPositioningInfo *arg1 = (AkPositioningInfo *) 0 ;
  Ak3DSpatializationMode result;
  
  arg1 = (AkPositioningInfo *)jarg1; 
  result = (Ak3DSpatializationMode) ((arg1)->e3DSpatializationMode);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkPositioningInfo_bEnableAttenuation_set(void * jarg1, unsigned int jarg2) {
  AkPositioningInfo *arg1 = (AkPositioningInfo *) 0 ;
  bool arg2 ;
  
  arg1 = (AkPositioningInfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bEnableAttenuation = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkPositioningInfo_bEnableAttenuation_get(void * jarg1) {
  unsigned int jresult ;
  AkPositioningInfo *arg1 = (AkPositioningInfo *) 0 ;
  bool result;
  
  arg1 = (AkPositioningInfo *)jarg1; 
  result = (bool) ((arg1)->bEnableAttenuation);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkPositioningInfo_bUseConeAttenuation_set(void * jarg1, unsigned int jarg2) {
  AkPositioningInfo *arg1 = (AkPositioningInfo *) 0 ;
  bool arg2 ;
  
  arg1 = (AkPositioningInfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bUseConeAttenuation = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkPositioningInfo_bUseConeAttenuation_get(void * jarg1) {
  unsigned int jresult ;
  AkPositioningInfo *arg1 = (AkPositioningInfo *) 0 ;
  bool result;
  
  arg1 = (AkPositioningInfo *)jarg1; 
  result = (bool) ((arg1)->bUseConeAttenuation);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkPositioningInfo_fInnerAngle_set(void * jarg1, float jarg2) {
  AkPositioningInfo *arg1 = (AkPositioningInfo *) 0 ;
  AkReal32 arg2 ;
  
  arg1 = (AkPositioningInfo *)jarg1; 
  arg2 = (AkReal32)jarg2; 
  if (arg1) (arg1)->fInnerAngle = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AkPositioningInfo_fInnerAngle_get(void * jarg1) {
  float jresult ;
  AkPositioningInfo *arg1 = (AkPositioningInfo *) 0 ;
  AkReal32 result;
  
  arg1 = (AkPositioningInfo *)jarg1; 
  result = (AkReal32) ((arg1)->fInnerAngle);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkPositioningInfo_fOuterAngle_set(void * jarg1, float jarg2) {
  AkPositioningInfo *arg1 = (AkPositioningInfo *) 0 ;
  AkReal32 arg2 ;
  
  arg1 = (AkPositioningInfo *)jarg1; 
  arg2 = (AkReal32)jarg2; 
  if (arg1) (arg1)->fOuterAngle = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AkPositioningInfo_fOuterAngle_get(void * jarg1) {
  float jresult ;
  AkPositioningInfo *arg1 = (AkPositioningInfo *) 0 ;
  AkReal32 result;
  
  arg1 = (AkPositioningInfo *)jarg1; 
  result = (AkReal32) ((arg1)->fOuterAngle);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkPositioningInfo_fConeMaxAttenuation_set(void * jarg1, float jarg2) {
  AkPositioningInfo *arg1 = (AkPositioningInfo *) 0 ;
  AkReal32 arg2 ;
  
  arg1 = (AkPositioningInfo *)jarg1; 
  arg2 = (AkReal32)jarg2; 
  if (arg1) (arg1)->fConeMaxAttenuation = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AkPositioningInfo_fConeMaxAttenuation_get(void * jarg1) {
  float jresult ;
  AkPositioningInfo *arg1 = (AkPositioningInfo *) 0 ;
  AkReal32 result;
  
  arg1 = (AkPositioningInfo *)jarg1; 
  result = (AkReal32) ((arg1)->fConeMaxAttenuation);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkPositioningInfo_LPFCone_set(void * jarg1, float jarg2) {
  AkPositioningInfo *arg1 = (AkPositioningInfo *) 0 ;
  AkLPFType arg2 ;
  
  arg1 = (AkPositioningInfo *)jarg1; 
  arg2 = (AkLPFType)jarg2; 
  if (arg1) (arg1)->LPFCone = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AkPositioningInfo_LPFCone_get(void * jarg1) {
  float jresult ;
  AkPositioningInfo *arg1 = (AkPositioningInfo *) 0 ;
  AkLPFType result;
  
  arg1 = (AkPositioningInfo *)jarg1; 
  result = (AkLPFType) ((arg1)->LPFCone);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkPositioningInfo_HPFCone_set(void * jarg1, float jarg2) {
  AkPositioningInfo *arg1 = (AkPositioningInfo *) 0 ;
  AkLPFType arg2 ;
  
  arg1 = (AkPositioningInfo *)jarg1; 
  arg2 = (AkLPFType)jarg2; 
  if (arg1) (arg1)->HPFCone = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AkPositioningInfo_HPFCone_get(void * jarg1) {
  float jresult ;
  AkPositioningInfo *arg1 = (AkPositioningInfo *) 0 ;
  AkLPFType result;
  
  arg1 = (AkPositioningInfo *)jarg1; 
  result = (AkLPFType) ((arg1)->HPFCone);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkPositioningInfo_fMaxDistance_set(void * jarg1, float jarg2) {
  AkPositioningInfo *arg1 = (AkPositioningInfo *) 0 ;
  AkReal32 arg2 ;
  
  arg1 = (AkPositioningInfo *)jarg1; 
  arg2 = (AkReal32)jarg2; 
  if (arg1) (arg1)->fMaxDistance = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AkPositioningInfo_fMaxDistance_get(void * jarg1) {
  float jresult ;
  AkPositioningInfo *arg1 = (AkPositioningInfo *) 0 ;
  AkReal32 result;
  
  arg1 = (AkPositioningInfo *)jarg1; 
  result = (AkReal32) ((arg1)->fMaxDistance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkPositioningInfo_fVolDryAtMaxDist_set(void * jarg1, float jarg2) {
  AkPositioningInfo *arg1 = (AkPositioningInfo *) 0 ;
  AkReal32 arg2 ;
  
  arg1 = (AkPositioningInfo *)jarg1; 
  arg2 = (AkReal32)jarg2; 
  if (arg1) (arg1)->fVolDryAtMaxDist = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AkPositioningInfo_fVolDryAtMaxDist_get(void * jarg1) {
  float jresult ;
  AkPositioningInfo *arg1 = (AkPositioningInfo *) 0 ;
  AkReal32 result;
  
  arg1 = (AkPositioningInfo *)jarg1; 
  result = (AkReal32) ((arg1)->fVolDryAtMaxDist);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkPositioningInfo_fVolAuxGameDefAtMaxDist_set(void * jarg1, float jarg2) {
  AkPositioningInfo *arg1 = (AkPositioningInfo *) 0 ;
  AkReal32 arg2 ;
  
  arg1 = (AkPositioningInfo *)jarg1; 
  arg2 = (AkReal32)jarg2; 
  if (arg1) (arg1)->fVolAuxGameDefAtMaxDist = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AkPositioningInfo_fVolAuxGameDefAtMaxDist_get(void * jarg1) {
  float jresult ;
  AkPositioningInfo *arg1 = (AkPositioningInfo *) 0 ;
  AkReal32 result;
  
  arg1 = (AkPositioningInfo *)jarg1; 
  result = (AkReal32) ((arg1)->fVolAuxGameDefAtMaxDist);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkPositioningInfo_fVolAuxUserDefAtMaxDist_set(void * jarg1, float jarg2) {
  AkPositioningInfo *arg1 = (AkPositioningInfo *) 0 ;
  AkReal32 arg2 ;
  
  arg1 = (AkPositioningInfo *)jarg1; 
  arg2 = (AkReal32)jarg2; 
  if (arg1) (arg1)->fVolAuxUserDefAtMaxDist = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AkPositioningInfo_fVolAuxUserDefAtMaxDist_get(void * jarg1) {
  float jresult ;
  AkPositioningInfo *arg1 = (AkPositioningInfo *) 0 ;
  AkReal32 result;
  
  arg1 = (AkPositioningInfo *)jarg1; 
  result = (AkReal32) ((arg1)->fVolAuxUserDefAtMaxDist);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkPositioningInfo_LPFValueAtMaxDist_set(void * jarg1, float jarg2) {
  AkPositioningInfo *arg1 = (AkPositioningInfo *) 0 ;
  AkLPFType arg2 ;
  
  arg1 = (AkPositioningInfo *)jarg1; 
  arg2 = (AkLPFType)jarg2; 
  if (arg1) (arg1)->LPFValueAtMaxDist = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AkPositioningInfo_LPFValueAtMaxDist_get(void * jarg1) {
  float jresult ;
  AkPositioningInfo *arg1 = (AkPositioningInfo *) 0 ;
  AkLPFType result;
  
  arg1 = (AkPositioningInfo *)jarg1; 
  result = (AkLPFType) ((arg1)->LPFValueAtMaxDist);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkPositioningInfo_HPFValueAtMaxDist_set(void * jarg1, float jarg2) {
  AkPositioningInfo *arg1 = (AkPositioningInfo *) 0 ;
  AkLPFType arg2 ;
  
  arg1 = (AkPositioningInfo *)jarg1; 
  arg2 = (AkLPFType)jarg2; 
  if (arg1) (arg1)->HPFValueAtMaxDist = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AkPositioningInfo_HPFValueAtMaxDist_get(void * jarg1) {
  float jresult ;
  AkPositioningInfo *arg1 = (AkPositioningInfo *) 0 ;
  AkLPFType result;
  
  arg1 = (AkPositioningInfo *)jarg1; 
  result = (AkLPFType) ((arg1)->HPFValueAtMaxDist);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AkPositioningInfo() {
  void * jresult ;
  AkPositioningInfo *result = 0 ;
  
  {
    result = (AkPositioningInfo *)new AkPositioningInfo();
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AkPositioningInfo(void * jarg1) {
  AkPositioningInfo *arg1 = (AkPositioningInfo *) 0 ;
  
  arg1 = (AkPositioningInfo *)jarg1; 
  {
    delete arg1;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkObjectInfo_objID_set(void * jarg1, unsigned int jarg2) {
  AkObjectInfo *arg1 = (AkObjectInfo *) 0 ;
  AkUniqueID arg2 ;
  
  arg1 = (AkObjectInfo *)jarg1; 
  arg2 = (AkUniqueID)jarg2; 
  if (arg1) (arg1)->objID = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkObjectInfo_objID_get(void * jarg1) {
  unsigned int jresult ;
  AkObjectInfo *arg1 = (AkObjectInfo *) 0 ;
  AkUniqueID result;
  
  arg1 = (AkObjectInfo *)jarg1; 
  result = (AkUniqueID) ((arg1)->objID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkObjectInfo_parentID_set(void * jarg1, unsigned int jarg2) {
  AkObjectInfo *arg1 = (AkObjectInfo *) 0 ;
  AkUniqueID arg2 ;
  
  arg1 = (AkObjectInfo *)jarg1; 
  arg2 = (AkUniqueID)jarg2; 
  if (arg1) (arg1)->parentID = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkObjectInfo_parentID_get(void * jarg1) {
  unsigned int jresult ;
  AkObjectInfo *arg1 = (AkObjectInfo *) 0 ;
  AkUniqueID result;
  
  arg1 = (AkObjectInfo *)jarg1; 
  result = (AkUniqueID) ((arg1)->parentID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkObjectInfo_iDepth_set(void * jarg1, int jarg2) {
  AkObjectInfo *arg1 = (AkObjectInfo *) 0 ;
  AkInt32 arg2 ;
  
  arg1 = (AkObjectInfo *)jarg1; 
  arg2 = (AkInt32)jarg2; 
  if (arg1) (arg1)->iDepth = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AkObjectInfo_iDepth_get(void * jarg1) {
  int jresult ;
  AkObjectInfo *arg1 = (AkObjectInfo *) 0 ;
  AkInt32 result;
  
  arg1 = (AkObjectInfo *)jarg1; 
  result = (AkInt32) ((arg1)->iDepth);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkObjectInfo_Clear(void * jarg1) {
  AkObjectInfo *arg1 = (AkObjectInfo *) 0 ;
  
  arg1 = (AkObjectInfo *)jarg1; 
  AkObjectInfo_Clear(arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_AkObjectInfo_GetSizeOf() {
  int jresult ;
  int result;
  
  result = (int)AkObjectInfo_GetSizeOf();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkObjectInfo_Clone(void * jarg1, void * jarg2) {
  AkObjectInfo *arg1 = (AkObjectInfo *) 0 ;
  AkObjectInfo *arg2 = 0 ;
  
  arg1 = (AkObjectInfo *)jarg1; 
  arg2 = (AkObjectInfo *)jarg2;
  if (!arg2) {
    return ;
  } 
  AkObjectInfo_Clone(arg1,(AkObjectInfo const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AkObjectInfo() {
  void * jresult ;
  AkObjectInfo *result = 0 ;
  
  {
    result = (AkObjectInfo *)new AkObjectInfo();
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AkObjectInfo(void * jarg1) {
  AkObjectInfo *arg1 = (AkObjectInfo *) 0 ;
  
  arg1 = (AkObjectInfo *)jarg1; 
  {
    delete arg1;
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetPosition(AkGameObjectID jarg1, void * jarg2) {
  int jresult ;
  AkGameObjectID arg1 ;
  AkSoundPosition *arg2 = 0 ;
  AKRESULT result;
  
  arg1 = jarg1; 
  arg2 = (AkSoundPosition *)jarg2;
  if (!arg2) {
    return AK_Fail;
  } 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::Query::GetPosition(arg1,*arg2);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::Query::GetPosition(AkGameObjectID,AkSoundPosition &): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetListenerPosition(AkGameObjectID jarg1, void * jarg2) {
  int jresult ;
  AkGameObjectID arg1 ;
  AkListenerPosition *arg2 = 0 ;
  AKRESULT result;
  
  arg1 = jarg1; 
  arg2 = (AkListenerPosition *)jarg2;
  if (!arg2) {
    return AK_Fail;
  } 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::Query::GetListenerPosition(arg1,*arg2);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::Query::GetListenerPosition(AkGameObjectID,AkListenerPosition &): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetRTPCValue__SWIG_0(unsigned int jarg1, AkGameObjectID jarg2, unsigned int jarg3, float * jarg4, int * jarg5) {
  int jresult ;
  AkRtpcID arg1 ;
  AkGameObjectID arg2 ;
  AkPlayingID arg3 ;
  AkRtpcValue *arg4 = 0 ;
  AK::SoundEngine::Query::RTPCValue_type *arg5 = 0 ;
  AKRESULT result;
  
  arg1 = (AkRtpcID)jarg1; 
  arg2 = jarg2; 
  arg3 = (AkPlayingID)jarg3; 
  arg4 = (AkRtpcValue *)jarg4; 
  arg5 = (AK::SoundEngine::Query::RTPCValue_type *)jarg5; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::Query::GetRTPCValue(arg1,arg2,arg3,*arg4,*arg5);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::Query::GetRTPCValue(AkRtpcID,AkGameObjectID,AkPlayingID,AkRtpcValue &,AK::SoundEngine::Query::RTPCValue_type &): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetRTPCValue__SWIG_1(wchar_t* jarg1, AkGameObjectID jarg2, unsigned int jarg3, float * jarg4, int * jarg5) {
  int jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  AkGameObjectID arg2 ;
  AkPlayingID arg3 ;
  AkRtpcValue *arg4 = 0 ;
  AK::SoundEngine::Query::RTPCValue_type *arg5 = 0 ;
  AKRESULT result;
  
  arg1 = (wchar_t *)jarg1; 
  arg2 = jarg2; 
  arg3 = (AkPlayingID)jarg3; 
  arg4 = (AkRtpcValue *)jarg4; 
  arg5 = (AK::SoundEngine::Query::RTPCValue_type *)jarg5; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::Query::GetRTPCValue((wchar_t const *)arg1,arg2,arg3,*arg4,*arg5);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::Query::GetRTPCValue(wchar_t const *,AkGameObjectID,AkPlayingID,AkRtpcValue &,AK::SoundEngine::Query::RTPCValue_type &): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetSwitch__SWIG_0(unsigned int jarg1, AkGameObjectID jarg2, unsigned int * jarg3) {
  int jresult ;
  AkSwitchGroupID arg1 ;
  AkGameObjectID arg2 ;
  AkSwitchStateID *arg3 = 0 ;
  AKRESULT result;
  
  arg1 = (AkSwitchGroupID)jarg1; 
  arg2 = jarg2; 
  arg3 = (AkSwitchStateID *)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::Query::GetSwitch(arg1,arg2,*arg3);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::Query::GetSwitch(AkSwitchGroupID,AkGameObjectID,AkSwitchStateID &): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetSwitch__SWIG_1(wchar_t* jarg1, AkGameObjectID jarg2, unsigned int * jarg3) {
  int jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  AkGameObjectID arg2 ;
  AkSwitchStateID *arg3 = 0 ;
  AKRESULT result;
  
  arg1 = (wchar_t *)jarg1; 
  arg2 = jarg2; 
  arg3 = (AkSwitchStateID *)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::Query::GetSwitch((wchar_t const *)arg1,arg2,*arg3);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::Query::GetSwitch(wchar_t const *,AkGameObjectID,AkSwitchStateID &): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetState__SWIG_0(unsigned int jarg1, unsigned int * jarg2) {
  int jresult ;
  AkStateGroupID arg1 ;
  AkStateID *arg2 = 0 ;
  AKRESULT result;
  
  arg1 = (AkStateGroupID)jarg1; 
  arg2 = (AkStateID *)jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::Query::GetState(arg1,*arg2);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::Query::GetState(AkStateGroupID,AkStateID &): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetState__SWIG_1(wchar_t* jarg1, unsigned int * jarg2) {
  int jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  AkStateID *arg2 = 0 ;
  AKRESULT result;
  
  arg1 = (wchar_t *)jarg1; 
  arg2 = (AkStateID *)jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::Query::GetState((wchar_t const *)arg1,*arg2);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::Query::GetState(wchar_t const *,AkStateID &): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetGameObjectAuxSendValues(AkGameObjectID jarg1, void * jarg2, unsigned int * jarg3) {
  int jresult ;
  AkGameObjectID arg1 ;
  AkAuxSendValue *arg2 = (AkAuxSendValue *) 0 ;
  AkUInt32 *arg3 = 0 ;
  AKRESULT result;
  
  arg1 = jarg1; 
  arg2 = (AkAuxSendValue *)jarg2; 
  arg3 = (AkUInt32 *)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::Query::GetGameObjectAuxSendValues(arg1,arg2,*arg3);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::Query::GetGameObjectAuxSendValues(AkGameObjectID,AkAuxSendValue *,AkUInt32 &): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetGameObjectDryLevelValue(AkGameObjectID jarg1, AkGameObjectID jarg2, float * jarg3) {
  int jresult ;
  AkGameObjectID arg1 ;
  AkGameObjectID arg2 ;
  AkReal32 *arg3 = 0 ;
  AKRESULT result;
  
  arg1 = jarg1; 
  arg2 = jarg2; 
  arg3 = (AkReal32 *)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::Query::GetGameObjectDryLevelValue(arg1,arg2,*arg3);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::Query::GetGameObjectDryLevelValue(AkGameObjectID,AkGameObjectID,AkReal32 &): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetObjectObstructionAndOcclusion(AkGameObjectID jarg1, AkGameObjectID jarg2, float * jarg3, float * jarg4) {
  int jresult ;
  AkGameObjectID arg1 ;
  AkGameObjectID arg2 ;
  AkReal32 *arg3 = 0 ;
  AkReal32 *arg4 = 0 ;
  AKRESULT result;
  
  arg1 = jarg1; 
  arg2 = jarg2; 
  arg3 = (AkReal32 *)jarg3; 
  arg4 = (AkReal32 *)jarg4; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::Query::GetObjectObstructionAndOcclusion(arg1,arg2,*arg3,*arg4);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::Query::GetObjectObstructionAndOcclusion(AkGameObjectID,AkGameObjectID,AkReal32 &,AkReal32 &): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_QueryAudioObjectIDs__SWIG_0(unsigned int jarg1, unsigned int * jarg2, void * jarg3) {
  int jresult ;
  AkUniqueID arg1 ;
  AkUInt32 *arg2 = 0 ;
  AkObjectInfo *arg3 = (AkObjectInfo *) 0 ;
  AKRESULT result;
  
  arg1 = (AkUniqueID)jarg1; 
  arg2 = (AkUInt32 *)jarg2; 
  arg3 = (AkObjectInfo *)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::Query::QueryAudioObjectIDs(arg1,*arg2,arg3);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::Query::QueryAudioObjectIDs(AkUniqueID,AkUInt32 &,AkObjectInfo *): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_QueryAudioObjectIDs__SWIG_1(wchar_t* jarg1, unsigned int * jarg2, void * jarg3) {
  int jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  AkUInt32 *arg2 = 0 ;
  AkObjectInfo *arg3 = (AkObjectInfo *) 0 ;
  AKRESULT result;
  
  arg1 = (wchar_t *)jarg1; 
  arg2 = (AkUInt32 *)jarg2; 
  arg3 = (AkObjectInfo *)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::Query::QueryAudioObjectIDs((wchar_t const *)arg1,*arg2,arg3);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::Query::QueryAudioObjectIDs(wchar_t const *,AkUInt32 &,AkObjectInfo *): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetPositioningInfo(unsigned int jarg1, void * jarg2) {
  int jresult ;
  AkUniqueID arg1 ;
  AkPositioningInfo *arg2 = 0 ;
  AKRESULT result;
  
  arg1 = (AkUniqueID)jarg1; 
  arg2 = (AkPositioningInfo *)jarg2;
  if (!arg2) {
    return AK_Fail;
  } 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::Query::GetPositioningInfo(arg1,*arg2);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::Query::GetPositioningInfo(AkUniqueID,AkPositioningInfo &): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GetIsGameObjectActive(AkGameObjectID jarg1) {
  unsigned int jresult ;
  AkGameObjectID arg1 ;
  bool result;
  
  arg1 = jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (bool)AK::SoundEngine::Query::GetIsGameObjectActive(arg1);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::Query::GetIsGameObjectActive(AkGameObjectID): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return 0; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_GetMaxRadius(AkGameObjectID jarg1) {
  float jresult ;
  AkGameObjectID arg1 ;
  AkReal32 result;
  
  arg1 = jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AkReal32)AK::SoundEngine::Query::GetMaxRadius(arg1);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::Query::GetMaxRadius(AkGameObjectID): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return 0; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GetEventIDFromPlayingID(unsigned int jarg1) {
  unsigned int jresult ;
  AkPlayingID arg1 ;
  AkUniqueID result;
  
  arg1 = (AkPlayingID)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AkUniqueID)AK::SoundEngine::Query::GetEventIDFromPlayingID(arg1);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::Query::GetEventIDFromPlayingID(AkPlayingID): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_INVALID_UNIQUE_ID; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT AkGameObjectID SWIGSTDCALL CSharp_GetGameObjectFromPlayingID(unsigned int jarg1) {
  AkGameObjectID jresult ;
  AkPlayingID arg1 ;
  AkGameObjectID result;
  
  arg1 = (AkPlayingID)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AkGameObjectID)AK::SoundEngine::Query::GetGameObjectFromPlayingID(arg1);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::Query::GetGameObjectFromPlayingID(AkPlayingID): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return 0; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetPlayingIDsFromGameObject(AkGameObjectID jarg1, unsigned int * jarg2, unsigned int* jarg3) {
  int jresult ;
  AkGameObjectID arg1 ;
  AkUInt32 *arg2 = 0 ;
  AkPlayingID *arg3 = (AkPlayingID *) 0 ;
  AKRESULT result;
  
  arg1 = jarg1; 
  arg2 = (AkUInt32 *)jarg2; 
  arg3 = jarg3;
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::Query::GetPlayingIDsFromGameObject(arg1,*arg2,arg3);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::Query::GetPlayingIDsFromGameObject(AkGameObjectID,AkUInt32 &,AkPlayingID *): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetCustomPropertyValue__SWIG_0(unsigned int jarg1, unsigned int jarg2, int * jarg3) {
  int jresult ;
  AkUniqueID arg1 ;
  AkUInt32 arg2 ;
  AkInt32 *arg3 = 0 ;
  AKRESULT result;
  
  arg1 = (AkUniqueID)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  arg3 = (AkInt32 *)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::Query::GetCustomPropertyValue(arg1,arg2,*arg3);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::Query::GetCustomPropertyValue(AkUniqueID,AkUInt32,AkInt32 &): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetCustomPropertyValue__SWIG_1(unsigned int jarg1, unsigned int jarg2, float * jarg3) {
  int jresult ;
  AkUniqueID arg1 ;
  AkUInt32 arg2 ;
  AkReal32 *arg3 = 0 ;
  AKRESULT result;
  
  arg1 = (AkUniqueID)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  arg3 = (AkReal32 *)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SoundEngine::Query::GetCustomPropertyValue(arg1,arg2,*arg3);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SoundEngine::Query::GetCustomPropertyValue(AkUniqueID,AkUInt32,AkReal32 &): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AK_SPEAKER_SETUP_FIX_LEFT_TO_CENTER(unsigned int * jarg1) {
  AkUInt32 *arg1 = 0 ;
  
  arg1 = (AkUInt32 *)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      AK_SPEAKER_SETUP_FIX_LEFT_TO_CENTER(*arg1);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK_SPEAKER_SETUP_FIX_LEFT_TO_CENTER(AkUInt32 &): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return ; 	
    } 
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AK_SPEAKER_SETUP_FIX_REAR_TO_SIDE(unsigned int * jarg1) {
  AkUInt32 *arg1 = 0 ;
  
  arg1 = (AkUInt32 *)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      AK_SPEAKER_SETUP_FIX_REAR_TO_SIDE(*arg1);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK_SPEAKER_SETUP_FIX_REAR_TO_SIDE(AkUInt32 &): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return ; 	
    } 
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AK_SPEAKER_SETUP_CONVERT_TO_SUPPORTED(unsigned int * jarg1) {
  AkUInt32 *arg1 = 0 ;
  
  arg1 = (AkUInt32 *)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      AK_SPEAKER_SETUP_CONVERT_TO_SUPPORTED(*arg1);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK_SPEAKER_SETUP_CONVERT_TO_SUPPORTED(AkUInt32 &): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return ; 	
    } 
  }
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_ChannelMaskToNumChannels(unsigned int jarg1) {
  unsigned char jresult ;
  AkChannelMask arg1 ;
  AkUInt8 result;
  
  arg1 = (AkChannelMask)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AkUInt8)AK::ChannelMaskToNumChannels(arg1);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::ChannelMaskToNumChannels(AkChannelMask): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return 0; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ChannelMaskFromNumChannels(unsigned int jarg1) {
  unsigned int jresult ;
  unsigned int arg1 ;
  AkChannelMask result;
  
  arg1 = (unsigned int)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AkChannelMask)AK::ChannelMaskFromNumChannels(arg1);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::ChannelMaskFromNumChannels(unsigned int): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_INVALID_CHANNELMASK; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_ChannelBitToIndex(unsigned int jarg1, unsigned int jarg2) {
  unsigned char jresult ;
  AkChannelMask arg1 ;
  AkChannelMask arg2 ;
  AkUInt8 result;
  
  arg1 = (AkChannelMask)jarg1; 
  arg2 = (AkChannelMask)jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AkUInt8)AK::ChannelBitToIndex(arg1,arg2);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::ChannelBitToIndex(AkChannelMask,AkChannelMask): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return 0; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_HasSurroundChannels(unsigned int jarg1) {
  unsigned int jresult ;
  AkChannelMask arg1 ;
  bool result;
  
  arg1 = (AkChannelMask)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (bool)AK::HasSurroundChannels(arg1);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::HasSurroundChannels(AkChannelMask): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return 0; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_HasStrictlyOnePairOfSurroundChannels(unsigned int jarg1) {
  unsigned int jresult ;
  AkChannelMask arg1 ;
  bool result;
  
  arg1 = (AkChannelMask)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (bool)AK::HasStrictlyOnePairOfSurroundChannels(arg1);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::HasStrictlyOnePairOfSurroundChannels(AkChannelMask): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return 0; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_HasSideAndRearChannels(unsigned int jarg1) {
  unsigned int jresult ;
  AkChannelMask arg1 ;
  bool result;
  
  arg1 = (AkChannelMask)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (bool)AK::HasSideAndRearChannels(arg1);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::HasSideAndRearChannels(AkChannelMask): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return 0; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_HasHeightChannels(unsigned int jarg1) {
  unsigned int jresult ;
  AkChannelMask arg1 ;
  bool result;
  
  arg1 = (AkChannelMask)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (bool)AK::HasHeightChannels(arg1);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::HasHeightChannels(AkChannelMask): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return 0; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BackToSideChannels(unsigned int jarg1) {
  unsigned int jresult ;
  AkChannelMask arg1 ;
  AkChannelMask result;
  
  arg1 = (AkChannelMask)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AkChannelMask)AK::BackToSideChannels(arg1);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::BackToSideChannels(AkChannelMask): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_INVALID_CHANNELMASK; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StdChannelIndexToDisplayIndex(int jarg1, unsigned int jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  AK::AkChannelOrdering arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  unsigned int result;
  
  arg1 = (AK::AkChannelOrdering)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (unsigned int)AK::StdChannelIndexToDisplayIndex(arg1,arg2,arg3);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::StdChannelIndexToDisplayIndex(AK::AkChannelOrdering,unsigned int,unsigned int): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return 0; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkChannelConfig_uNumChannels_set(void * jarg1, unsigned int jarg2) {
  AkChannelConfig *arg1 = (AkChannelConfig *) 0 ;
  AkUInt32 arg2 ;
  
  arg1 = (AkChannelConfig *)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  if (arg1) (arg1)->uNumChannels = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkChannelConfig_uNumChannels_get(void * jarg1) {
  unsigned int jresult ;
  AkChannelConfig *arg1 = (AkChannelConfig *) 0 ;
  AkUInt32 result;
  
  arg1 = (AkChannelConfig *)jarg1; 
  result = (AkUInt32) ((arg1)->uNumChannels);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkChannelConfig_eConfigType_set(void * jarg1, unsigned int jarg2) {
  AkChannelConfig *arg1 = (AkChannelConfig *) 0 ;
  AkUInt32 arg2 ;
  
  arg1 = (AkChannelConfig *)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  if (arg1) (arg1)->eConfigType = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkChannelConfig_eConfigType_get(void * jarg1) {
  unsigned int jresult ;
  AkChannelConfig *arg1 = (AkChannelConfig *) 0 ;
  AkUInt32 result;
  
  arg1 = (AkChannelConfig *)jarg1; 
  result = (AkUInt32) ((arg1)->eConfigType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkChannelConfig_uChannelMask_set(void * jarg1, unsigned int jarg2) {
  AkChannelConfig *arg1 = (AkChannelConfig *) 0 ;
  AkUInt32 arg2 ;
  
  arg1 = (AkChannelConfig *)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  if (arg1) (arg1)->uChannelMask = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkChannelConfig_uChannelMask_get(void * jarg1) {
  unsigned int jresult ;
  AkChannelConfig *arg1 = (AkChannelConfig *) 0 ;
  AkUInt32 result;
  
  arg1 = (AkChannelConfig *)jarg1; 
  result = (AkUInt32) ((arg1)->uChannelMask);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AkChannelConfig__SWIG_0() {
  void * jresult ;
  AkChannelConfig *result = 0 ;
  
  {
    result = (AkChannelConfig *)new AkChannelConfig();
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AkChannelConfig__SWIG_1(unsigned int jarg1, unsigned int jarg2) {
  void * jresult ;
  AkUInt32 arg1 ;
  AkUInt32 arg2 ;
  AkChannelConfig *result = 0 ;
  
  arg1 = (AkUInt32)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  {
    result = (AkChannelConfig *)new AkChannelConfig(arg1,arg2);
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkChannelConfig_Clear(void * jarg1) {
  AkChannelConfig *arg1 = (AkChannelConfig *) 0 ;
  
  arg1 = (AkChannelConfig *)jarg1; 
  {
    (arg1)->Clear();
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkChannelConfig_SetStandard(void * jarg1, unsigned int jarg2) {
  AkChannelConfig *arg1 = (AkChannelConfig *) 0 ;
  AkUInt32 arg2 ;
  
  arg1 = (AkChannelConfig *)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  {
    (arg1)->SetStandard(arg2);
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkChannelConfig_SetStandardOrAnonymous(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  AkChannelConfig *arg1 = (AkChannelConfig *) 0 ;
  AkUInt32 arg2 ;
  AkUInt32 arg3 ;
  
  arg1 = (AkChannelConfig *)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  arg3 = (AkUInt32)jarg3; 
  {
    (arg1)->SetStandardOrAnonymous(arg2,arg3);
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkChannelConfig_SetAnonymous(void * jarg1, unsigned int jarg2) {
  AkChannelConfig *arg1 = (AkChannelConfig *) 0 ;
  AkUInt32 arg2 ;
  
  arg1 = (AkChannelConfig *)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  {
    (arg1)->SetAnonymous(arg2);
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkChannelConfig_SetAmbisonic(void * jarg1, unsigned int jarg2) {
  AkChannelConfig *arg1 = (AkChannelConfig *) 0 ;
  AkUInt32 arg2 ;
  
  arg1 = (AkChannelConfig *)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  {
    (arg1)->SetAmbisonic(arg2);
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkChannelConfig_SetObject(void * jarg1) {
  AkChannelConfig *arg1 = (AkChannelConfig *) 0 ;
  
  arg1 = (AkChannelConfig *)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      (arg1)->SetObject();  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AkChannelConfig::SetObject(): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return ; 	
    } 
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkChannelConfig_SetSameAsMainMix(void * jarg1) {
  AkChannelConfig *arg1 = (AkChannelConfig *) 0 ;
  
  arg1 = (AkChannelConfig *)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      (arg1)->SetSameAsMainMix();  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AkChannelConfig::SetSameAsMainMix(): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return ; 	
    } 
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkChannelConfig_SetSameAsPassthrough(void * jarg1) {
  AkChannelConfig *arg1 = (AkChannelConfig *) 0 ;
  
  arg1 = (AkChannelConfig *)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      (arg1)->SetSameAsPassthrough();  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AkChannelConfig::SetSameAsPassthrough(): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return ; 	
    } 
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkChannelConfig_IsValid(void * jarg1) {
  unsigned int jresult ;
  AkChannelConfig *arg1 = (AkChannelConfig *) 0 ;
  bool result;
  
  arg1 = (AkChannelConfig *)jarg1; 
  {
    result = (bool)((AkChannelConfig const *)arg1)->IsValid();
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkChannelConfig_Serialize(void * jarg1) {
  unsigned int jresult ;
  AkChannelConfig *arg1 = (AkChannelConfig *) 0 ;
  AkUInt32 result;
  
  arg1 = (AkChannelConfig *)jarg1; 
  {
    result = (AkUInt32)((AkChannelConfig const *)arg1)->Serialize();
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkChannelConfig_Deserialize(void * jarg1, unsigned int jarg2) {
  AkChannelConfig *arg1 = (AkChannelConfig *) 0 ;
  AkUInt32 arg2 ;
  
  arg1 = (AkChannelConfig *)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  {
    (arg1)->Deserialize(arg2);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AkChannelConfig_RemoveLFE(void * jarg1) {
  void * jresult ;
  AkChannelConfig *arg1 = (AkChannelConfig *) 0 ;
  AkChannelConfig result;
  
  arg1 = (AkChannelConfig *)jarg1; 
  {
    result = ((AkChannelConfig const *)arg1)->RemoveLFE();
  }
  jresult = new AkChannelConfig((const AkChannelConfig &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AkChannelConfig_RemoveCenter(void * jarg1) {
  void * jresult ;
  AkChannelConfig *arg1 = (AkChannelConfig *) 0 ;
  AkChannelConfig result;
  
  arg1 = (AkChannelConfig *)jarg1; 
  {
    result = ((AkChannelConfig const *)arg1)->RemoveCenter();
  }
  jresult = new AkChannelConfig((const AkChannelConfig &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AkChannelConfig(void * jarg1) {
  AkChannelConfig *arg1 = (AkChannelConfig *) 0 ;
  
  arg1 = (AkChannelConfig *)jarg1; 
  {
    delete arg1;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AkImageSourceParams__SWIG_0() {
  void * jresult ;
  AkImageSourceParams *result = 0 ;
  
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AkImageSourceParams *)new AkImageSourceParams();  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AkImageSourceParams::AkImageSourceParams(): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return 0; 	
    } 
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AkImageSourceParams__SWIG_1(AkVector jarg1, float jarg2, float jarg3) {
  void * jresult ;
  AkVector arg1 ;
  AkReal32 arg2 ;
  AkReal32 arg3 ;
  AkImageSourceParams *result = 0 ;
  
  arg1 = jarg1; 
  arg2 = (AkReal32)jarg2; 
  arg3 = (AkReal32)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AkImageSourceParams *)new AkImageSourceParams(arg1,arg2,arg3);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AkImageSourceParams::AkImageSourceParams(AkVector,AkReal32,AkReal32): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return 0; 	
    } 
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkImageSourceParams_sourcePosition_set(void * jarg1, AkVector jarg2) {
  AkImageSourceParams *arg1 = (AkImageSourceParams *) 0 ;
  AkVector *arg2 = (AkVector *) 0 ;
  
  arg1 = (AkImageSourceParams *)jarg1; 
  arg2 = &jarg2; 
  if (arg1) (arg1)->sourcePosition = *arg2;
}


SWIGEXPORT AkVector* SWIGSTDCALL CSharp_AkImageSourceParams_sourcePosition_get(void * jarg1) {
  AkVector* jresult ;
  AkImageSourceParams *arg1 = (AkImageSourceParams *) 0 ;
  AkVector *result = 0 ;
  
  arg1 = (AkImageSourceParams *)jarg1; 
  result = (AkVector *)& ((arg1)->sourcePosition);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkImageSourceParams_fDistanceScalingFactor_set(void * jarg1, float jarg2) {
  AkImageSourceParams *arg1 = (AkImageSourceParams *) 0 ;
  AkReal32 arg2 ;
  
  arg1 = (AkImageSourceParams *)jarg1; 
  arg2 = (AkReal32)jarg2; 
  if (arg1) (arg1)->fDistanceScalingFactor = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AkImageSourceParams_fDistanceScalingFactor_get(void * jarg1) {
  float jresult ;
  AkImageSourceParams *arg1 = (AkImageSourceParams *) 0 ;
  AkReal32 result;
  
  arg1 = (AkImageSourceParams *)jarg1; 
  result = (AkReal32) ((arg1)->fDistanceScalingFactor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkImageSourceParams_fLevel_set(void * jarg1, float jarg2) {
  AkImageSourceParams *arg1 = (AkImageSourceParams *) 0 ;
  AkReal32 arg2 ;
  
  arg1 = (AkImageSourceParams *)jarg1; 
  arg2 = (AkReal32)jarg2; 
  if (arg1) (arg1)->fLevel = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AkImageSourceParams_fLevel_get(void * jarg1) {
  float jresult ;
  AkImageSourceParams *arg1 = (AkImageSourceParams *) 0 ;
  AkReal32 result;
  
  arg1 = (AkImageSourceParams *)jarg1; 
  result = (AkReal32) ((arg1)->fLevel);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkImageSourceParams_fDiffraction_set(void * jarg1, float jarg2) {
  AkImageSourceParams *arg1 = (AkImageSourceParams *) 0 ;
  AkReal32 arg2 ;
  
  arg1 = (AkImageSourceParams *)jarg1; 
  arg2 = (AkReal32)jarg2; 
  if (arg1) (arg1)->fDiffraction = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AkImageSourceParams_fDiffraction_get(void * jarg1) {
  float jresult ;
  AkImageSourceParams *arg1 = (AkImageSourceParams *) 0 ;
  AkReal32 result;
  
  arg1 = (AkImageSourceParams *)jarg1; 
  result = (AkReal32) ((arg1)->fDiffraction);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkImageSourceParams_uDiffractionEmitterSide_set(void * jarg1, unsigned char jarg2) {
  AkImageSourceParams *arg1 = (AkImageSourceParams *) 0 ;
  AkUInt8 arg2 ;
  
  arg1 = (AkImageSourceParams *)jarg1; 
  arg2 = (AkUInt8)jarg2; 
  if (arg1) (arg1)->uDiffractionEmitterSide = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_AkImageSourceParams_uDiffractionEmitterSide_get(void * jarg1) {
  unsigned char jresult ;
  AkImageSourceParams *arg1 = (AkImageSourceParams *) 0 ;
  AkUInt8 result;
  
  arg1 = (AkImageSourceParams *)jarg1; 
  result = (AkUInt8) ((arg1)->uDiffractionEmitterSide);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkImageSourceParams_uDiffractionListenerSide_set(void * jarg1, unsigned char jarg2) {
  AkImageSourceParams *arg1 = (AkImageSourceParams *) 0 ;
  AkUInt8 arg2 ;
  
  arg1 = (AkImageSourceParams *)jarg1; 
  arg2 = (AkUInt8)jarg2; 
  if (arg1) (arg1)->uDiffractionListenerSide = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_AkImageSourceParams_uDiffractionListenerSide_get(void * jarg1) {
  unsigned char jresult ;
  AkImageSourceParams *arg1 = (AkImageSourceParams *) 0 ;
  AkUInt8 result;
  
  arg1 = (AkImageSourceParams *)jarg1; 
  result = (AkUInt8) ((arg1)->uDiffractionListenerSide);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AkImageSourceParams(void * jarg1) {
  AkImageSourceParams *arg1 = (AkImageSourceParams *) 0 ;
  
  arg1 = (AkImageSourceParams *)jarg1; 
  {
    delete arg1;
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_kDefaultMaxPathLength_get() {
  float jresult ;
  AkReal32 result;
  
  result = (AkReal32)(AkReal32)kDefaultMaxPathLength;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_kDefaultDiffractionMaxEdges_get() {
  unsigned int jresult ;
  AkUInt32 result;
  
  result = (AkUInt32)(AkUInt32)kDefaultDiffractionMaxEdges;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_kDefaultDiffractionMaxPaths_get() {
  unsigned int jresult ;
  AkUInt32 result;
  
  result = (AkUInt32)(AkUInt32)kDefaultDiffractionMaxPaths;
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_kMaxDiffraction_get() {
  float jresult ;
  AkReal32 result;
  
  result = (AkReal32)(AkReal32)kMaxDiffraction;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_kDiffractionMaxEdges_get() {
  unsigned int jresult ;
  AkUInt32 result;
  
  result = (AkUInt32)(AkUInt32)kDiffractionMaxEdges;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_kDiffractionMaxPaths_get() {
  unsigned int jresult ;
  AkUInt32 result;
  
  result = (AkUInt32)(AkUInt32)kDiffractionMaxPaths;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_kPortalToPortalDiffractionMaxPaths_get() {
  unsigned int jresult ;
  AkUInt32 result;
  
  result = (AkUInt32)(AkUInt32)kPortalToPortalDiffractionMaxPaths;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AkSpatialAudioInitSettings() {
  void * jresult ;
  AkSpatialAudioInitSettings *result = 0 ;
  
  {
    result = (AkSpatialAudioInitSettings *)new AkSpatialAudioInitSettings();
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkSpatialAudioInitSettings_uMaxSoundPropagationDepth_set(void * jarg1, unsigned int jarg2) {
  AkSpatialAudioInitSettings *arg1 = (AkSpatialAudioInitSettings *) 0 ;
  AkUInt32 arg2 ;
  
  arg1 = (AkSpatialAudioInitSettings *)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  if (arg1) (arg1)->uMaxSoundPropagationDepth = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkSpatialAudioInitSettings_uMaxSoundPropagationDepth_get(void * jarg1) {
  unsigned int jresult ;
  AkSpatialAudioInitSettings *arg1 = (AkSpatialAudioInitSettings *) 0 ;
  AkUInt32 result;
  
  arg1 = (AkSpatialAudioInitSettings *)jarg1; 
  result = (AkUInt32) ((arg1)->uMaxSoundPropagationDepth);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkSpatialAudioInitSettings_fMovementThreshold_set(void * jarg1, float jarg2) {
  AkSpatialAudioInitSettings *arg1 = (AkSpatialAudioInitSettings *) 0 ;
  AkReal32 arg2 ;
  
  arg1 = (AkSpatialAudioInitSettings *)jarg1; 
  arg2 = (AkReal32)jarg2; 
  if (arg1) (arg1)->fMovementThreshold = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AkSpatialAudioInitSettings_fMovementThreshold_get(void * jarg1) {
  float jresult ;
  AkSpatialAudioInitSettings *arg1 = (AkSpatialAudioInitSettings *) 0 ;
  AkReal32 result;
  
  arg1 = (AkSpatialAudioInitSettings *)jarg1; 
  result = (AkReal32) ((arg1)->fMovementThreshold);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkSpatialAudioInitSettings_uNumberOfPrimaryRays_set(void * jarg1, unsigned int jarg2) {
  AkSpatialAudioInitSettings *arg1 = (AkSpatialAudioInitSettings *) 0 ;
  AkUInt32 arg2 ;
  
  arg1 = (AkSpatialAudioInitSettings *)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  if (arg1) (arg1)->uNumberOfPrimaryRays = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkSpatialAudioInitSettings_uNumberOfPrimaryRays_get(void * jarg1) {
  unsigned int jresult ;
  AkSpatialAudioInitSettings *arg1 = (AkSpatialAudioInitSettings *) 0 ;
  AkUInt32 result;
  
  arg1 = (AkSpatialAudioInitSettings *)jarg1; 
  result = (AkUInt32) ((arg1)->uNumberOfPrimaryRays);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkSpatialAudioInitSettings_uMaxReflectionOrder_set(void * jarg1, unsigned int jarg2) {
  AkSpatialAudioInitSettings *arg1 = (AkSpatialAudioInitSettings *) 0 ;
  AkUInt32 arg2 ;
  
  arg1 = (AkSpatialAudioInitSettings *)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  if (arg1) (arg1)->uMaxReflectionOrder = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkSpatialAudioInitSettings_uMaxReflectionOrder_get(void * jarg1) {
  unsigned int jresult ;
  AkSpatialAudioInitSettings *arg1 = (AkSpatialAudioInitSettings *) 0 ;
  AkUInt32 result;
  
  arg1 = (AkSpatialAudioInitSettings *)jarg1; 
  result = (AkUInt32) ((arg1)->uMaxReflectionOrder);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkSpatialAudioInitSettings_fMaxPathLength_set(void * jarg1, float jarg2) {
  AkSpatialAudioInitSettings *arg1 = (AkSpatialAudioInitSettings *) 0 ;
  AkReal32 arg2 ;
  
  arg1 = (AkSpatialAudioInitSettings *)jarg1; 
  arg2 = (AkReal32)jarg2; 
  if (arg1) (arg1)->fMaxPathLength = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AkSpatialAudioInitSettings_fMaxPathLength_get(void * jarg1) {
  float jresult ;
  AkSpatialAudioInitSettings *arg1 = (AkSpatialAudioInitSettings *) 0 ;
  AkReal32 result;
  
  arg1 = (AkSpatialAudioInitSettings *)jarg1; 
  result = (AkReal32) ((arg1)->fMaxPathLength);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkSpatialAudioInitSettings_fCPULimitPercentage_set(void * jarg1, float jarg2) {
  AkSpatialAudioInitSettings *arg1 = (AkSpatialAudioInitSettings *) 0 ;
  AkReal32 arg2 ;
  
  arg1 = (AkSpatialAudioInitSettings *)jarg1; 
  arg2 = (AkReal32)jarg2; 
  if (arg1) (arg1)->fCPULimitPercentage = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AkSpatialAudioInitSettings_fCPULimitPercentage_get(void * jarg1) {
  float jresult ;
  AkSpatialAudioInitSettings *arg1 = (AkSpatialAudioInitSettings *) 0 ;
  AkReal32 result;
  
  arg1 = (AkSpatialAudioInitSettings *)jarg1; 
  result = (AkReal32) ((arg1)->fCPULimitPercentage);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkSpatialAudioInitSettings_bEnableDiffractionOnReflection_set(void * jarg1, unsigned int jarg2) {
  AkSpatialAudioInitSettings *arg1 = (AkSpatialAudioInitSettings *) 0 ;
  bool arg2 ;
  
  arg1 = (AkSpatialAudioInitSettings *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bEnableDiffractionOnReflection = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkSpatialAudioInitSettings_bEnableDiffractionOnReflection_get(void * jarg1) {
  unsigned int jresult ;
  AkSpatialAudioInitSettings *arg1 = (AkSpatialAudioInitSettings *) 0 ;
  bool result;
  
  arg1 = (AkSpatialAudioInitSettings *)jarg1; 
  result = (bool) ((arg1)->bEnableDiffractionOnReflection);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkSpatialAudioInitSettings_bEnableGeometricDiffractionAndTransmission_set(void * jarg1, unsigned int jarg2) {
  AkSpatialAudioInitSettings *arg1 = (AkSpatialAudioInitSettings *) 0 ;
  bool arg2 ;
  
  arg1 = (AkSpatialAudioInitSettings *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bEnableGeometricDiffractionAndTransmission = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkSpatialAudioInitSettings_bEnableGeometricDiffractionAndTransmission_get(void * jarg1) {
  unsigned int jresult ;
  AkSpatialAudioInitSettings *arg1 = (AkSpatialAudioInitSettings *) 0 ;
  bool result;
  
  arg1 = (AkSpatialAudioInitSettings *)jarg1; 
  result = (bool) ((arg1)->bEnableGeometricDiffractionAndTransmission);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkSpatialAudioInitSettings_bCalcEmitterVirtualPosition_set(void * jarg1, unsigned int jarg2) {
  AkSpatialAudioInitSettings *arg1 = (AkSpatialAudioInitSettings *) 0 ;
  bool arg2 ;
  
  arg1 = (AkSpatialAudioInitSettings *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bCalcEmitterVirtualPosition = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkSpatialAudioInitSettings_bCalcEmitterVirtualPosition_get(void * jarg1) {
  unsigned int jresult ;
  AkSpatialAudioInitSettings *arg1 = (AkSpatialAudioInitSettings *) 0 ;
  bool result;
  
  arg1 = (AkSpatialAudioInitSettings *)jarg1; 
  result = (bool) ((arg1)->bCalcEmitterVirtualPosition);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkSpatialAudioInitSettings_bUseObstruction_set(void * jarg1, unsigned int jarg2) {
  AkSpatialAudioInitSettings *arg1 = (AkSpatialAudioInitSettings *) 0 ;
  bool arg2 ;
  
  arg1 = (AkSpatialAudioInitSettings *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bUseObstruction = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkSpatialAudioInitSettings_bUseObstruction_get(void * jarg1) {
  unsigned int jresult ;
  AkSpatialAudioInitSettings *arg1 = (AkSpatialAudioInitSettings *) 0 ;
  bool result;
  
  arg1 = (AkSpatialAudioInitSettings *)jarg1; 
  result = (bool) ((arg1)->bUseObstruction);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkSpatialAudioInitSettings_bUseOcclusion_set(void * jarg1, unsigned int jarg2) {
  AkSpatialAudioInitSettings *arg1 = (AkSpatialAudioInitSettings *) 0 ;
  bool arg2 ;
  
  arg1 = (AkSpatialAudioInitSettings *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bUseOcclusion = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkSpatialAudioInitSettings_bUseOcclusion_get(void * jarg1) {
  unsigned int jresult ;
  AkSpatialAudioInitSettings *arg1 = (AkSpatialAudioInitSettings *) 0 ;
  bool result;
  
  arg1 = (AkSpatialAudioInitSettings *)jarg1; 
  result = (bool) ((arg1)->bUseOcclusion);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AkSpatialAudioInitSettings(void * jarg1) {
  AkSpatialAudioInitSettings *arg1 = (AkSpatialAudioInitSettings *) 0 ;
  
  arg1 = (AkSpatialAudioInitSettings *)jarg1; 
  {
    delete arg1;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AkImageSourceSettings__SWIG_0() {
  void * jresult ;
  AkImageSourceSettings *result = 0 ;
  
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AkImageSourceSettings *)new AkImageSourceSettings();  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AkImageSourceSettings::AkImageSourceSettings(): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return 0; 	
    } 
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AkImageSourceSettings__SWIG_1(AkVector jarg1, float jarg2, float jarg3) {
  void * jresult ;
  AkVector arg1 ;
  AkReal32 arg2 ;
  AkReal32 arg3 ;
  AkImageSourceSettings *result = 0 ;
  
  arg1 = jarg1; 
  arg2 = (AkReal32)jarg2; 
  arg3 = (AkReal32)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AkImageSourceSettings *)new AkImageSourceSettings(arg1,arg2,arg3);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AkImageSourceSettings::AkImageSourceSettings(AkVector,AkReal32,AkReal32): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return 0; 	
    } 
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AkImageSourceSettings(void * jarg1) {
  AkImageSourceSettings *arg1 = (AkImageSourceSettings *) 0 ;
  
  arg1 = (AkImageSourceSettings *)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      delete arg1;  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AkImageSourceSettings::~AkImageSourceSettings(): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return ; 	
    } 
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkImageSourceSettings_SetOneTexture(void * jarg1, unsigned int jarg2) {
  AkImageSourceSettings *arg1 = (AkImageSourceSettings *) 0 ;
  AkUniqueID arg2 ;
  
  arg1 = (AkImageSourceSettings *)jarg1; 
  arg2 = (AkUniqueID)jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      (arg1)->SetOneTexture(arg2);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AkImageSourceSettings::SetOneTexture(AkUniqueID): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return ; 	
    } 
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkImageSourceSettings_SetName(void * jarg1, char * jarg2) {
  AkImageSourceSettings *arg1 = (AkImageSourceSettings *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (AkImageSourceSettings *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      (arg1)->SetName((char const *)arg2);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AkImageSourceSettings::SetName(char const *): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return ; 	
    } 
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkImageSourceSettings_params__set(void * jarg1, void * jarg2) {
  AkImageSourceSettings *arg1 = (AkImageSourceSettings *) 0 ;
  AkImageSourceParams *arg2 = (AkImageSourceParams *) 0 ;
  
  arg1 = (AkImageSourceSettings *)jarg1; 
  arg2 = (AkImageSourceParams *)jarg2; 
  if (arg1) (arg1)->params = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AkImageSourceSettings_params__get(void * jarg1) {
  void * jresult ;
  AkImageSourceSettings *arg1 = (AkImageSourceSettings *) 0 ;
  AkImageSourceParams *result = 0 ;
  
  arg1 = (AkImageSourceSettings *)jarg1; 
  result = (AkImageSourceParams *)& ((arg1)->params);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AkExtent__SWIG_0() {
  void * jresult ;
  AkExtent *result = 0 ;
  
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AkExtent *)new AkExtent();  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AkExtent::AkExtent(): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return 0; 	
    } 
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AkExtent__SWIG_1(float jarg1, float jarg2, float jarg3) {
  void * jresult ;
  AkReal32 arg1 ;
  AkReal32 arg2 ;
  AkReal32 arg3 ;
  AkExtent *result = 0 ;
  
  arg1 = (AkReal32)jarg1; 
  arg2 = (AkReal32)jarg2; 
  arg3 = (AkReal32)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AkExtent *)new AkExtent(arg1,arg2,arg3);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AkExtent::AkExtent(AkReal32,AkReal32,AkReal32): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return 0; 	
    } 
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkExtent_halfWidth_set(void * jarg1, float jarg2) {
  AkExtent *arg1 = (AkExtent *) 0 ;
  AkReal32 arg2 ;
  
  arg1 = (AkExtent *)jarg1; 
  arg2 = (AkReal32)jarg2; 
  if (arg1) (arg1)->halfWidth = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AkExtent_halfWidth_get(void * jarg1) {
  float jresult ;
  AkExtent *arg1 = (AkExtent *) 0 ;
  AkReal32 result;
  
  arg1 = (AkExtent *)jarg1; 
  result = (AkReal32) ((arg1)->halfWidth);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkExtent_halfHeight_set(void * jarg1, float jarg2) {
  AkExtent *arg1 = (AkExtent *) 0 ;
  AkReal32 arg2 ;
  
  arg1 = (AkExtent *)jarg1; 
  arg2 = (AkReal32)jarg2; 
  if (arg1) (arg1)->halfHeight = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AkExtent_halfHeight_get(void * jarg1) {
  float jresult ;
  AkExtent *arg1 = (AkExtent *) 0 ;
  AkReal32 result;
  
  arg1 = (AkExtent *)jarg1; 
  result = (AkReal32) ((arg1)->halfHeight);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkExtent_halfDepth_set(void * jarg1, float jarg2) {
  AkExtent *arg1 = (AkExtent *) 0 ;
  AkReal32 arg2 ;
  
  arg1 = (AkExtent *)jarg1; 
  arg2 = (AkReal32)jarg2; 
  if (arg1) (arg1)->halfDepth = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AkExtent_halfDepth_get(void * jarg1) {
  float jresult ;
  AkExtent *arg1 = (AkExtent *) 0 ;
  AkReal32 result;
  
  arg1 = (AkExtent *)jarg1; 
  result = (AkReal32) ((arg1)->halfDepth);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AkExtent(void * jarg1) {
  AkExtent *arg1 = (AkExtent *) 0 ;
  
  arg1 = (AkExtent *)jarg1; 
  {
    delete arg1;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AkTriangle__SWIG_0() {
  void * jresult ;
  AkTriangle *result = 0 ;
  
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AkTriangle *)new AkTriangle();  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AkTriangle::AkTriangle(): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return 0; 	
    } 
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AkTriangle__SWIG_1(unsigned short jarg1, unsigned short jarg2, unsigned short jarg3, unsigned short jarg4) {
  void * jresult ;
  AkVertIdx arg1 ;
  AkVertIdx arg2 ;
  AkVertIdx arg3 ;
  AkSurfIdx arg4 ;
  AkTriangle *result = 0 ;
  
  arg1 = (AkVertIdx)jarg1; 
  arg2 = (AkVertIdx)jarg2; 
  arg3 = (AkVertIdx)jarg3; 
  arg4 = (AkSurfIdx)jarg4; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AkTriangle *)new AkTriangle(arg1,arg2,arg3,arg4);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AkTriangle::AkTriangle(AkVertIdx,AkVertIdx,AkVertIdx,AkSurfIdx): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return 0; 	
    } 
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkTriangle_point0_set(void * jarg1, unsigned short jarg2) {
  AkTriangle *arg1 = (AkTriangle *) 0 ;
  AkVertIdx arg2 ;
  
  arg1 = (AkTriangle *)jarg1; 
  arg2 = (AkVertIdx)jarg2; 
  if (arg1) (arg1)->point0 = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_AkTriangle_point0_get(void * jarg1) {
  unsigned short jresult ;
  AkTriangle *arg1 = (AkTriangle *) 0 ;
  AkVertIdx result;
  
  arg1 = (AkTriangle *)jarg1; 
  result = (AkVertIdx) ((arg1)->point0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkTriangle_point1_set(void * jarg1, unsigned short jarg2) {
  AkTriangle *arg1 = (AkTriangle *) 0 ;
  AkVertIdx arg2 ;
  
  arg1 = (AkTriangle *)jarg1; 
  arg2 = (AkVertIdx)jarg2; 
  if (arg1) (arg1)->point1 = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_AkTriangle_point1_get(void * jarg1) {
  unsigned short jresult ;
  AkTriangle *arg1 = (AkTriangle *) 0 ;
  AkVertIdx result;
  
  arg1 = (AkTriangle *)jarg1; 
  result = (AkVertIdx) ((arg1)->point1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkTriangle_point2_set(void * jarg1, unsigned short jarg2) {
  AkTriangle *arg1 = (AkTriangle *) 0 ;
  AkVertIdx arg2 ;
  
  arg1 = (AkTriangle *)jarg1; 
  arg2 = (AkVertIdx)jarg2; 
  if (arg1) (arg1)->point2 = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_AkTriangle_point2_get(void * jarg1) {
  unsigned short jresult ;
  AkTriangle *arg1 = (AkTriangle *) 0 ;
  AkVertIdx result;
  
  arg1 = (AkTriangle *)jarg1; 
  result = (AkVertIdx) ((arg1)->point2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkTriangle_surface_set(void * jarg1, unsigned short jarg2) {
  AkTriangle *arg1 = (AkTriangle *) 0 ;
  AkSurfIdx arg2 ;
  
  arg1 = (AkTriangle *)jarg1; 
  arg2 = (AkSurfIdx)jarg2; 
  if (arg1) (arg1)->surface = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_AkTriangle_surface_get(void * jarg1) {
  unsigned short jresult ;
  AkTriangle *arg1 = (AkTriangle *) 0 ;
  AkSurfIdx result;
  
  arg1 = (AkTriangle *)jarg1; 
  result = (AkSurfIdx) ((arg1)->surface);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkTriangle_Clear(void * jarg1) {
  AkTriangle *arg1 = (AkTriangle *) 0 ;
  
  arg1 = (AkTriangle *)jarg1; 
  AkTriangle_Clear(arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_AkTriangle_GetSizeOf() {
  int jresult ;
  int result;
  
  result = (int)AkTriangle_GetSizeOf();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkTriangle_Clone(void * jarg1, void * jarg2) {
  AkTriangle *arg1 = (AkTriangle *) 0 ;
  AkTriangle *arg2 = 0 ;
  
  arg1 = (AkTriangle *)jarg1; 
  arg2 = (AkTriangle *)jarg2;
  if (!arg2) {
    return ;
  } 
  AkTriangle_Clone(arg1,(AkTriangle const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AkTriangle(void * jarg1) {
  AkTriangle *arg1 = (AkTriangle *) 0 ;
  
  arg1 = (AkTriangle *)jarg1; 
  {
    delete arg1;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AkAcousticSurface() {
  void * jresult ;
  AkAcousticSurface *result = 0 ;
  
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AkAcousticSurface *)new AkAcousticSurface();  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AkAcousticSurface::AkAcousticSurface(): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return 0; 	
    } 
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkAcousticSurface_textureID_set(void * jarg1, unsigned int jarg2) {
  AkAcousticSurface *arg1 = (AkAcousticSurface *) 0 ;
  AkUInt32 arg2 ;
  
  arg1 = (AkAcousticSurface *)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  if (arg1) (arg1)->textureID = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkAcousticSurface_textureID_get(void * jarg1) {
  unsigned int jresult ;
  AkAcousticSurface *arg1 = (AkAcousticSurface *) 0 ;
  AkUInt32 result;
  
  arg1 = (AkAcousticSurface *)jarg1; 
  result = (AkUInt32) ((arg1)->textureID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkAcousticSurface_transmissionLoss_set(void * jarg1, float jarg2) {
  AkAcousticSurface *arg1 = (AkAcousticSurface *) 0 ;
  AkReal32 arg2 ;
  
  arg1 = (AkAcousticSurface *)jarg1; 
  arg2 = (AkReal32)jarg2; 
  if (arg1) (arg1)->transmissionLoss = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AkAcousticSurface_transmissionLoss_get(void * jarg1) {
  float jresult ;
  AkAcousticSurface *arg1 = (AkAcousticSurface *) 0 ;
  AkReal32 result;
  
  arg1 = (AkAcousticSurface *)jarg1; 
  result = (AkReal32) ((arg1)->transmissionLoss);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkAcousticSurface_strName_set(void * jarg1, char * jarg2) {
  AkAcousticSurface *arg1 = (AkAcousticSurface *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (AkAcousticSurface *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if (arg2) {
      arg1->strName = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->strName, (const char *)arg2);
    } else {
      arg1->strName = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_AkAcousticSurface_strName_get(void * jarg1) {
  char * jresult ;
  AkAcousticSurface *arg1 = (AkAcousticSurface *) 0 ;
  char *result = 0 ;
  
  arg1 = (AkAcousticSurface *)jarg1; 
  result = (char *) ((arg1)->strName);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkAcousticSurface_Clear(void * jarg1) {
  AkAcousticSurface *arg1 = (AkAcousticSurface *) 0 ;
  
  arg1 = (AkAcousticSurface *)jarg1; 
  AkAcousticSurface_Clear(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkAcousticSurface_DeleteName(void * jarg1) {
  AkAcousticSurface *arg1 = (AkAcousticSurface *) 0 ;
  
  arg1 = (AkAcousticSurface *)jarg1; 
  AkAcousticSurface_DeleteName(arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_AkAcousticSurface_GetSizeOf() {
  int jresult ;
  int result;
  
  result = (int)AkAcousticSurface_GetSizeOf();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkAcousticSurface_Clone(void * jarg1, void * jarg2) {
  AkAcousticSurface *arg1 = (AkAcousticSurface *) 0 ;
  AkAcousticSurface *arg2 = 0 ;
  
  arg1 = (AkAcousticSurface *)jarg1; 
  arg2 = (AkAcousticSurface *)jarg2;
  if (!arg2) {
    return ;
  } 
  AkAcousticSurface_Clone(arg1,(AkAcousticSurface const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AkAcousticSurface(void * jarg1) {
  AkAcousticSurface *arg1 = (AkAcousticSurface *) 0 ;
  
  arg1 = (AkAcousticSurface *)jarg1; 
  {
    delete arg1;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkReflectionPathInfo_imageSource_set(void * jarg1, AkVector jarg2) {
  AkReflectionPathInfo *arg1 = (AkReflectionPathInfo *) 0 ;
  AkVector *arg2 = (AkVector *) 0 ;
  
  arg1 = (AkReflectionPathInfo *)jarg1; 
  arg2 = &jarg2; 
  if (arg1) (arg1)->imageSource = *arg2;
}


SWIGEXPORT AkVector* SWIGSTDCALL CSharp_AkReflectionPathInfo_imageSource_get(void * jarg1) {
  AkVector* jresult ;
  AkReflectionPathInfo *arg1 = (AkReflectionPathInfo *) 0 ;
  AkVector *result = 0 ;
  
  arg1 = (AkReflectionPathInfo *)jarg1; 
  result = (AkVector *)& ((arg1)->imageSource);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkReflectionPathInfo_numPathPoints_set(void * jarg1, unsigned int jarg2) {
  AkReflectionPathInfo *arg1 = (AkReflectionPathInfo *) 0 ;
  AkUInt32 arg2 ;
  
  arg1 = (AkReflectionPathInfo *)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  if (arg1) (arg1)->numPathPoints = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkReflectionPathInfo_numPathPoints_get(void * jarg1) {
  unsigned int jresult ;
  AkReflectionPathInfo *arg1 = (AkReflectionPathInfo *) 0 ;
  AkUInt32 result;
  
  arg1 = (AkReflectionPathInfo *)jarg1; 
  result = (AkUInt32) ((arg1)->numPathPoints);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkReflectionPathInfo_numReflections_set(void * jarg1, unsigned int jarg2) {
  AkReflectionPathInfo *arg1 = (AkReflectionPathInfo *) 0 ;
  AkUInt32 arg2 ;
  
  arg1 = (AkReflectionPathInfo *)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  if (arg1) (arg1)->numReflections = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkReflectionPathInfo_numReflections_get(void * jarg1) {
  unsigned int jresult ;
  AkReflectionPathInfo *arg1 = (AkReflectionPathInfo *) 0 ;
  AkUInt32 result;
  
  arg1 = (AkReflectionPathInfo *)jarg1; 
  result = (AkUInt32) ((arg1)->numReflections);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkReflectionPathInfo_level_set(void * jarg1, float jarg2) {
  AkReflectionPathInfo *arg1 = (AkReflectionPathInfo *) 0 ;
  AkReal32 arg2 ;
  
  arg1 = (AkReflectionPathInfo *)jarg1; 
  arg2 = (AkReal32)jarg2; 
  if (arg1) (arg1)->level = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AkReflectionPathInfo_level_get(void * jarg1) {
  float jresult ;
  AkReflectionPathInfo *arg1 = (AkReflectionPathInfo *) 0 ;
  AkReal32 result;
  
  arg1 = (AkReflectionPathInfo *)jarg1; 
  result = (AkReal32) ((arg1)->level);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkReflectionPathInfo_isOccluded_set(void * jarg1, unsigned int jarg2) {
  AkReflectionPathInfo *arg1 = (AkReflectionPathInfo *) 0 ;
  bool arg2 ;
  
  arg1 = (AkReflectionPathInfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isOccluded = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkReflectionPathInfo_isOccluded_get(void * jarg1) {
  unsigned int jresult ;
  AkReflectionPathInfo *arg1 = (AkReflectionPathInfo *) 0 ;
  bool result;
  
  arg1 = (AkReflectionPathInfo *)jarg1; 
  result = (bool) ((arg1)->isOccluded);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AkReflectionPathInfo_GetSizeOf() {
  int jresult ;
  int result;
  
  result = (int)AkReflectionPathInfo_GetSizeOf();
  jresult = result; 
  return jresult;
}


SWIGEXPORT AkVector SWIGSTDCALL CSharp_AkReflectionPathInfo_GetPathPoint(void * jarg1, unsigned int jarg2) {
  AkVector jresult ;
  AkReflectionPathInfo *arg1 = (AkReflectionPathInfo *) 0 ;
  AkUInt32 arg2 ;
  AkVector result;
  
  arg1 = (AkReflectionPathInfo *)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  result = AkReflectionPathInfo_GetPathPoint((AkReflectionPathInfo const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AkReflectionPathInfo_GetAcousticSurface(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  AkReflectionPathInfo *arg1 = (AkReflectionPathInfo *) 0 ;
  AkUInt32 arg2 ;
  AkAcousticSurface *result = 0 ;
  
  arg1 = (AkReflectionPathInfo *)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  result = (AkAcousticSurface *) &AkReflectionPathInfo_GetAcousticSurface((AkReflectionPathInfo const *)arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AkReflectionPathInfo_GetDiffraction(void * jarg1, unsigned int jarg2) {
  float jresult ;
  AkReflectionPathInfo *arg1 = (AkReflectionPathInfo *) 0 ;
  AkUInt32 arg2 ;
  AkReal32 result;
  
  arg1 = (AkReflectionPathInfo *)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  result = (AkReal32)AkReflectionPathInfo_GetDiffraction((AkReflectionPathInfo const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkReflectionPathInfo_Clone(void * jarg1, void * jarg2) {
  AkReflectionPathInfo *arg1 = (AkReflectionPathInfo *) 0 ;
  AkReflectionPathInfo *arg2 = 0 ;
  
  arg1 = (AkReflectionPathInfo *)jarg1; 
  arg2 = (AkReflectionPathInfo *)jarg2;
  if (!arg2) {
    return ;
  } 
  AkReflectionPathInfo_Clone(arg1,(AkReflectionPathInfo const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AkReflectionPathInfo() {
  void * jresult ;
  AkReflectionPathInfo *result = 0 ;
  
  {
    result = (AkReflectionPathInfo *)new AkReflectionPathInfo();
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AkReflectionPathInfo(void * jarg1) {
  AkReflectionPathInfo *arg1 = (AkReflectionPathInfo *) 0 ;
  
  arg1 = (AkReflectionPathInfo *)jarg1; 
  {
    delete arg1;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkDiffractionPathInfo_emitterPos_set(void * jarg1, AkVector jarg2) {
  AkDiffractionPathInfo *arg1 = (AkDiffractionPathInfo *) 0 ;
  AkVector *arg2 = (AkVector *) 0 ;
  
  arg1 = (AkDiffractionPathInfo *)jarg1; 
  arg2 = &jarg2; 
  if (arg1) (arg1)->emitterPos = *arg2;
}


SWIGEXPORT AkVector* SWIGSTDCALL CSharp_AkDiffractionPathInfo_emitterPos_get(void * jarg1) {
  AkVector* jresult ;
  AkDiffractionPathInfo *arg1 = (AkDiffractionPathInfo *) 0 ;
  AkVector *result = 0 ;
  
  arg1 = (AkDiffractionPathInfo *)jarg1; 
  result = (AkVector *)& ((arg1)->emitterPos);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkDiffractionPathInfo_virtualPos_set(void * jarg1, void * jarg2) {
  AkDiffractionPathInfo *arg1 = (AkDiffractionPathInfo *) 0 ;
  AkTransform *arg2 = (AkTransform *) 0 ;
  
  arg1 = (AkDiffractionPathInfo *)jarg1; 
  arg2 = (AkTransform *)jarg2; 
  if (arg1) (arg1)->virtualPos = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AkDiffractionPathInfo_virtualPos_get(void * jarg1) {
  void * jresult ;
  AkDiffractionPathInfo *arg1 = (AkDiffractionPathInfo *) 0 ;
  AkTransform *result = 0 ;
  
  arg1 = (AkDiffractionPathInfo *)jarg1; 
  result = (AkTransform *)& ((arg1)->virtualPos);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkDiffractionPathInfo_nodeCount_set(void * jarg1, unsigned int jarg2) {
  AkDiffractionPathInfo *arg1 = (AkDiffractionPathInfo *) 0 ;
  AkUInt32 arg2 ;
  
  arg1 = (AkDiffractionPathInfo *)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  if (arg1) (arg1)->nodeCount = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkDiffractionPathInfo_nodeCount_get(void * jarg1) {
  unsigned int jresult ;
  AkDiffractionPathInfo *arg1 = (AkDiffractionPathInfo *) 0 ;
  AkUInt32 result;
  
  arg1 = (AkDiffractionPathInfo *)jarg1; 
  result = (AkUInt32) ((arg1)->nodeCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkDiffractionPathInfo_diffraction_set(void * jarg1, float jarg2) {
  AkDiffractionPathInfo *arg1 = (AkDiffractionPathInfo *) 0 ;
  AkReal32 arg2 ;
  
  arg1 = (AkDiffractionPathInfo *)jarg1; 
  arg2 = (AkReal32)jarg2; 
  if (arg1) (arg1)->diffraction = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AkDiffractionPathInfo_diffraction_get(void * jarg1) {
  float jresult ;
  AkDiffractionPathInfo *arg1 = (AkDiffractionPathInfo *) 0 ;
  AkReal32 result;
  
  arg1 = (AkDiffractionPathInfo *)jarg1; 
  result = (AkReal32) ((arg1)->diffraction);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkDiffractionPathInfo_transmissionLoss_set(void * jarg1, float jarg2) {
  AkDiffractionPathInfo *arg1 = (AkDiffractionPathInfo *) 0 ;
  AkReal32 arg2 ;
  
  arg1 = (AkDiffractionPathInfo *)jarg1; 
  arg2 = (AkReal32)jarg2; 
  if (arg1) (arg1)->transmissionLoss = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AkDiffractionPathInfo_transmissionLoss_get(void * jarg1) {
  float jresult ;
  AkDiffractionPathInfo *arg1 = (AkDiffractionPathInfo *) 0 ;
  AkReal32 result;
  
  arg1 = (AkDiffractionPathInfo *)jarg1; 
  result = (AkReal32) ((arg1)->transmissionLoss);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkDiffractionPathInfo_totLength_set(void * jarg1, float jarg2) {
  AkDiffractionPathInfo *arg1 = (AkDiffractionPathInfo *) 0 ;
  AkReal32 arg2 ;
  
  arg1 = (AkDiffractionPathInfo *)jarg1; 
  arg2 = (AkReal32)jarg2; 
  if (arg1) (arg1)->totLength = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AkDiffractionPathInfo_totLength_get(void * jarg1) {
  float jresult ;
  AkDiffractionPathInfo *arg1 = (AkDiffractionPathInfo *) 0 ;
  AkReal32 result;
  
  arg1 = (AkDiffractionPathInfo *)jarg1; 
  result = (AkReal32) ((arg1)->totLength);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkDiffractionPathInfo_obstructionValue_set(void * jarg1, float jarg2) {
  AkDiffractionPathInfo *arg1 = (AkDiffractionPathInfo *) 0 ;
  AkReal32 arg2 ;
  
  arg1 = (AkDiffractionPathInfo *)jarg1; 
  arg2 = (AkReal32)jarg2; 
  if (arg1) (arg1)->obstructionValue = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AkDiffractionPathInfo_obstructionValue_get(void * jarg1) {
  float jresult ;
  AkDiffractionPathInfo *arg1 = (AkDiffractionPathInfo *) 0 ;
  AkReal32 result;
  
  arg1 = (AkDiffractionPathInfo *)jarg1; 
  result = (AkReal32) ((arg1)->obstructionValue);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AkDiffractionPathInfo_GetSizeOf() {
  int jresult ;
  int result;
  
  result = (int)AkDiffractionPathInfo_GetSizeOf();
  jresult = result; 
  return jresult;
}


SWIGEXPORT AkVector SWIGSTDCALL CSharp_AkDiffractionPathInfo_GetNodes(void * jarg1, unsigned int jarg2) {
  AkVector jresult ;
  AkDiffractionPathInfo *arg1 = (AkDiffractionPathInfo *) 0 ;
  AkUInt32 arg2 ;
  AkVector result;
  
  arg1 = (AkDiffractionPathInfo *)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  result = AkDiffractionPathInfo_GetNodes((AkDiffractionPathInfo const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AkDiffractionPathInfo_GetAngles(void * jarg1, unsigned int jarg2) {
  float jresult ;
  AkDiffractionPathInfo *arg1 = (AkDiffractionPathInfo *) 0 ;
  AkUInt32 arg2 ;
  AkReal32 result;
  
  arg1 = (AkDiffractionPathInfo *)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  result = (AkReal32)AkDiffractionPathInfo_GetAngles((AkDiffractionPathInfo const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_AkDiffractionPathInfo_GetPortals(void * jarg1, unsigned int jarg2) {
  unsigned long long jresult ;
  AkDiffractionPathInfo *arg1 = (AkDiffractionPathInfo *) 0 ;
  AkUInt32 arg2 ;
  AkUInt64 result;
  
  arg1 = (AkDiffractionPathInfo *)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  result = (AkUInt64)AkDiffractionPathInfo_GetPortals((AkDiffractionPathInfo const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_AkDiffractionPathInfo_GetRooms(void * jarg1, unsigned int jarg2) {
  unsigned long long jresult ;
  AkDiffractionPathInfo *arg1 = (AkDiffractionPathInfo *) 0 ;
  AkUInt32 arg2 ;
  AkUInt64 result;
  
  arg1 = (AkDiffractionPathInfo *)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  result = (AkUInt64)AkDiffractionPathInfo_GetRooms((AkDiffractionPathInfo const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkDiffractionPathInfo_Clone(void * jarg1, void * jarg2) {
  AkDiffractionPathInfo *arg1 = (AkDiffractionPathInfo *) 0 ;
  AkDiffractionPathInfo *arg2 = 0 ;
  
  arg1 = (AkDiffractionPathInfo *)jarg1; 
  arg2 = (AkDiffractionPathInfo *)jarg2;
  if (!arg2) {
    return ;
  } 
  AkDiffractionPathInfo_Clone(arg1,(AkDiffractionPathInfo const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AkDiffractionPathInfo() {
  void * jresult ;
  AkDiffractionPathInfo *result = 0 ;
  
  {
    result = (AkDiffractionPathInfo *)new AkDiffractionPathInfo();
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AkDiffractionPathInfo(void * jarg1) {
  AkDiffractionPathInfo *arg1 = (AkDiffractionPathInfo *) 0 ;
  
  arg1 = (AkDiffractionPathInfo *)jarg1; 
  {
    delete arg1;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AkRoomParams__SWIG_0() {
  void * jresult ;
  AkRoomParams *result = 0 ;
  
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AkRoomParams *)new AkRoomParams();  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AkRoomParams::AkRoomParams(): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return 0; 	
    } 
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AkRoomParams__SWIG_1(void * jarg1) {
  void * jresult ;
  AkRoomParams *arg1 = 0 ;
  AkRoomParams *result = 0 ;
  
  arg1 = (AkRoomParams *)jarg1;
  if (!arg1) {
    return 0;
  } 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AkRoomParams *)new AkRoomParams((AkRoomParams const &)*arg1);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AkRoomParams::AkRoomParams(AkRoomParams const &): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return 0; 	
    } 
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkRoomParams_Front_set(void * jarg1, AkVector jarg2) {
  AkRoomParams *arg1 = (AkRoomParams *) 0 ;
  AkVector *arg2 = (AkVector *) 0 ;
  
  arg1 = (AkRoomParams *)jarg1; 
  arg2 = &jarg2; 
  if (arg1) (arg1)->Front = *arg2;
}


SWIGEXPORT AkVector* SWIGSTDCALL CSharp_AkRoomParams_Front_get(void * jarg1) {
  AkVector* jresult ;
  AkRoomParams *arg1 = (AkRoomParams *) 0 ;
  AkVector *result = 0 ;
  
  arg1 = (AkRoomParams *)jarg1; 
  result = (AkVector *)& ((arg1)->Front);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkRoomParams_Up_set(void * jarg1, AkVector jarg2) {
  AkRoomParams *arg1 = (AkRoomParams *) 0 ;
  AkVector *arg2 = (AkVector *) 0 ;
  
  arg1 = (AkRoomParams *)jarg1; 
  arg2 = &jarg2; 
  if (arg1) (arg1)->Up = *arg2;
}


SWIGEXPORT AkVector* SWIGSTDCALL CSharp_AkRoomParams_Up_get(void * jarg1) {
  AkVector* jresult ;
  AkRoomParams *arg1 = (AkRoomParams *) 0 ;
  AkVector *result = 0 ;
  
  arg1 = (AkRoomParams *)jarg1; 
  result = (AkVector *)& ((arg1)->Up);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkRoomParams_ReverbAuxBus_set(void * jarg1, unsigned int jarg2) {
  AkRoomParams *arg1 = (AkRoomParams *) 0 ;
  AkAuxBusID arg2 ;
  
  arg1 = (AkRoomParams *)jarg1; 
  arg2 = (AkAuxBusID)jarg2; 
  if (arg1) (arg1)->ReverbAuxBus = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkRoomParams_ReverbAuxBus_get(void * jarg1) {
  unsigned int jresult ;
  AkRoomParams *arg1 = (AkRoomParams *) 0 ;
  AkAuxBusID result;
  
  arg1 = (AkRoomParams *)jarg1; 
  result = (AkAuxBusID) ((arg1)->ReverbAuxBus);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkRoomParams_ReverbLevel_set(void * jarg1, float jarg2) {
  AkRoomParams *arg1 = (AkRoomParams *) 0 ;
  AkReal32 arg2 ;
  
  arg1 = (AkRoomParams *)jarg1; 
  arg2 = (AkReal32)jarg2; 
  if (arg1) (arg1)->ReverbLevel = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AkRoomParams_ReverbLevel_get(void * jarg1) {
  float jresult ;
  AkRoomParams *arg1 = (AkRoomParams *) 0 ;
  AkReal32 result;
  
  arg1 = (AkRoomParams *)jarg1; 
  result = (AkReal32) ((arg1)->ReverbLevel);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkRoomParams_TransmissionLoss_set(void * jarg1, float jarg2) {
  AkRoomParams *arg1 = (AkRoomParams *) 0 ;
  AkReal32 arg2 ;
  
  arg1 = (AkRoomParams *)jarg1; 
  arg2 = (AkReal32)jarg2; 
  if (arg1) (arg1)->TransmissionLoss = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AkRoomParams_TransmissionLoss_get(void * jarg1) {
  float jresult ;
  AkRoomParams *arg1 = (AkRoomParams *) 0 ;
  AkReal32 result;
  
  arg1 = (AkRoomParams *)jarg1; 
  result = (AkReal32) ((arg1)->TransmissionLoss);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkRoomParams_RoomGameObj_AuxSendLevelToSelf_set(void * jarg1, float jarg2) {
  AkRoomParams *arg1 = (AkRoomParams *) 0 ;
  AkReal32 arg2 ;
  
  arg1 = (AkRoomParams *)jarg1; 
  arg2 = (AkReal32)jarg2; 
  if (arg1) (arg1)->RoomGameObj_AuxSendLevelToSelf = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AkRoomParams_RoomGameObj_AuxSendLevelToSelf_get(void * jarg1) {
  float jresult ;
  AkRoomParams *arg1 = (AkRoomParams *) 0 ;
  AkReal32 result;
  
  arg1 = (AkRoomParams *)jarg1; 
  result = (AkReal32) ((arg1)->RoomGameObj_AuxSendLevelToSelf);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkRoomParams_RoomGameObj_KeepRegistered_set(void * jarg1, unsigned int jarg2) {
  AkRoomParams *arg1 = (AkRoomParams *) 0 ;
  bool arg2 ;
  
  arg1 = (AkRoomParams *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->RoomGameObj_KeepRegistered = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkRoomParams_RoomGameObj_KeepRegistered_get(void * jarg1) {
  unsigned int jresult ;
  AkRoomParams *arg1 = (AkRoomParams *) 0 ;
  bool result;
  
  arg1 = (AkRoomParams *)jarg1; 
  result = (bool) ((arg1)->RoomGameObj_KeepRegistered);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AkRoomParams(void * jarg1) {
  AkRoomParams *arg1 = (AkRoomParams *) 0 ;
  
  arg1 = (AkRoomParams *)jarg1; 
  {
    delete arg1;
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetGameObjectRadius(AkGameObjectID jarg1, float jarg2, float jarg3) {
  int jresult ;
  AkGameObjectID arg1 ;
  AkReal32 arg2 ;
  AkReal32 arg3 ;
  AKRESULT result;
  
  arg1 = jarg1; 
  arg2 = (AkReal32)jarg2; 
  arg3 = (AkReal32)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SpatialAudio::SetGameObjectRadius(arg1,arg2,arg3);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SpatialAudio::SetGameObjectRadius(AkGameObjectID,AkReal32,AkReal32): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetImageSource(unsigned int jarg1, void * jarg2, unsigned int jarg3, AkRoomID jarg4, AkGameObjectID jarg5) {
  int jresult ;
  AkImageSourceID arg1 ;
  AkImageSourceSettings *arg2 = 0 ;
  AkUniqueID arg3 ;
  AkRoomID arg4 ;
  AkGameObjectID arg5 ;
  AKRESULT result;
  
  arg1 = (AkImageSourceID)jarg1; 
  arg2 = (AkImageSourceSettings *)jarg2;
  if (!arg2) {
    return AK_Fail;
  } 
  arg3 = (AkUniqueID)jarg3; 
  arg4 = jarg4; 
  arg5 = jarg5; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SpatialAudio::SetImageSource(arg1,(AkImageSourceSettings const &)*arg2,arg3,arg4,arg5);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SpatialAudio::SetImageSource(AkImageSourceID,AkImageSourceSettings const &,AkUniqueID,AkRoomID,AkGameObjectID): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RemoveImageSource(unsigned int jarg1, unsigned int jarg2, AkGameObjectID jarg3) {
  int jresult ;
  AkImageSourceID arg1 ;
  AkUniqueID arg2 ;
  AkGameObjectID arg3 ;
  AKRESULT result;
  
  arg1 = (AkImageSourceID)jarg1; 
  arg2 = (AkUniqueID)jarg2; 
  arg3 = jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SpatialAudio::RemoveImageSource(arg1,arg2,arg3);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SpatialAudio::RemoveImageSource(AkImageSourceID,AkUniqueID,AkGameObjectID): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ClearImageSources__SWIG_0(unsigned int jarg1, AkGameObjectID jarg2) {
  int jresult ;
  AkUniqueID arg1 ;
  AkGameObjectID arg2 ;
  AKRESULT result;
  
  arg1 = (AkUniqueID)jarg1; 
  arg2 = jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SpatialAudio::ClearImageSources(arg1,arg2);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SpatialAudio::ClearImageSources(AkUniqueID,AkGameObjectID): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ClearImageSources__SWIG_1(unsigned int jarg1) {
  int jresult ;
  AkUniqueID arg1 ;
  AKRESULT result;
  
  arg1 = (AkUniqueID)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SpatialAudio::ClearImageSources(arg1);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SpatialAudio::ClearImageSources(AkUniqueID): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ClearImageSources__SWIG_2() {
  int jresult ;
  AKRESULT result;
  
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SpatialAudio::ClearImageSources();  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SpatialAudio::ClearImageSources(): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RemoveGeometry(AkSpatialAudioID jarg1) {
  int jresult ;
  AkGeometrySetID arg1 ;
  AKRESULT result;
  
  arg1 = jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SpatialAudio::RemoveGeometry(arg1);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SpatialAudio::RemoveGeometry(AkGeometrySetID): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_QueryReflectionPaths(AkGameObjectID jarg1, unsigned int jarg2, AkVector* jarg3, AkVector* jarg4, void * jarg5, unsigned int * jarg6) {
  int jresult ;
  AkGameObjectID arg1 ;
  AkUInt32 arg2 ;
  AkVector *arg3 = 0 ;
  AkVector *arg4 = 0 ;
  AkReflectionPathInfo *arg5 = (AkReflectionPathInfo *) 0 ;
  AkUInt32 *arg6 = 0 ;
  AKRESULT result;
  
  arg1 = jarg1; 
  arg2 = (AkUInt32)jarg2; 
  arg3 = jarg3; 
  arg4 = jarg4; 
  arg5 = (AkReflectionPathInfo *)jarg5; 
  arg6 = (AkUInt32 *)jarg6; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SpatialAudio::QueryReflectionPaths(arg1,arg2,*arg3,*arg4,arg5,*arg6);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SpatialAudio::QueryReflectionPaths(AkGameObjectID,AkUInt32,AkVector &,AkVector &,AkReflectionPathInfo *,AkUInt32 &): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RemoveRoom(AkRoomID jarg1) {
  int jresult ;
  AkRoomID arg1 ;
  AKRESULT result;
  
  arg1 = jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SpatialAudio::RemoveRoom(arg1);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SpatialAudio::RemoveRoom(AkRoomID): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RemovePortal(AkSpatialAudioID jarg1) {
  int jresult ;
  AkPortalID arg1 ;
  AKRESULT result;
  
  arg1 = jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SpatialAudio::RemovePortal(arg1);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SpatialAudio::RemovePortal(AkPortalID): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetGameObjectInRoom(AkGameObjectID jarg1, AkRoomID jarg2) {
  int jresult ;
  AkGameObjectID arg1 ;
  AkRoomID arg2 ;
  AKRESULT result;
  
  arg1 = jarg1; 
  arg2 = jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SpatialAudio::SetGameObjectInRoom(arg1,arg2);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SpatialAudio::SetGameObjectInRoom(AkGameObjectID,AkRoomID): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetReflectionsOrder(unsigned int jarg1, unsigned int jarg2) {
  int jresult ;
  AkUInt32 arg1 ;
  bool arg2 ;
  AKRESULT result;
  
  arg1 = (AkUInt32)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SpatialAudio::SetReflectionsOrder(arg1,arg2);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SpatialAudio::SetReflectionsOrder(AkUInt32,bool): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetNumberOfPrimaryRays(unsigned int jarg1) {
  int jresult ;
  AkUInt32 arg1 ;
  AKRESULT result;
  
  arg1 = (AkUInt32)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SpatialAudio::SetNumberOfPrimaryRays(arg1);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SpatialAudio::SetNumberOfPrimaryRays(AkUInt32): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetEarlyReflectionsAuxSend(AkGameObjectID jarg1, unsigned int jarg2) {
  int jresult ;
  AkGameObjectID arg1 ;
  AkAuxBusID arg2 ;
  AKRESULT result;
  
  arg1 = jarg1; 
  arg2 = (AkAuxBusID)jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SpatialAudio::SetEarlyReflectionsAuxSend(arg1,arg2);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SpatialAudio::SetEarlyReflectionsAuxSend(AkGameObjectID,AkAuxBusID): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetEarlyReflectionsVolume(AkGameObjectID jarg1, float jarg2) {
  int jresult ;
  AkGameObjectID arg1 ;
  AkReal32 arg2 ;
  AKRESULT result;
  
  arg1 = jarg1; 
  arg2 = (AkReal32)jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SpatialAudio::SetEarlyReflectionsVolume(arg1,arg2);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SpatialAudio::SetEarlyReflectionsVolume(AkGameObjectID,AkReal32): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetPortalObstructionAndOcclusion(AkSpatialAudioID jarg1, float jarg2, float jarg3) {
  int jresult ;
  AkPortalID arg1 ;
  AkReal32 arg2 ;
  AkReal32 arg3 ;
  AKRESULT result;
  
  arg1 = jarg1; 
  arg2 = (AkReal32)jarg2; 
  arg3 = (AkReal32)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SpatialAudio::SetPortalObstructionAndOcclusion(arg1,arg2,arg3);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SpatialAudio::SetPortalObstructionAndOcclusion(AkPortalID,AkReal32,AkReal32): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetGameObjectToPortalObstruction(AkGameObjectID jarg1, AkSpatialAudioID jarg2, float jarg3) {
  int jresult ;
  AkGameObjectID arg1 ;
  AkPortalID arg2 ;
  AkReal32 arg3 ;
  AKRESULT result;
  
  arg1 = jarg1; 
  arg2 = jarg2; 
  arg3 = (AkReal32)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SpatialAudio::SetGameObjectToPortalObstruction(arg1,arg2,arg3);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SpatialAudio::SetGameObjectToPortalObstruction(AkGameObjectID,AkPortalID,AkReal32): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetPortalToPortalObstruction(AkSpatialAudioID jarg1, AkSpatialAudioID jarg2, float jarg3) {
  int jresult ;
  AkPortalID arg1 ;
  AkPortalID arg2 ;
  AkReal32 arg3 ;
  AKRESULT result;
  
  arg1 = jarg1; 
  arg2 = jarg2; 
  arg3 = (AkReal32)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SpatialAudio::SetPortalToPortalObstruction(arg1,arg2,arg3);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SpatialAudio::SetPortalToPortalObstruction(AkPortalID,AkPortalID,AkReal32): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_QueryWetDiffraction(AkSpatialAudioID jarg1, float * jarg2) {
  int jresult ;
  AkPortalID arg1 ;
  AkReal32 *arg2 = 0 ;
  AKRESULT result;
  
  arg1 = jarg1; 
  arg2 = (AkReal32 *)jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SpatialAudio::QueryWetDiffraction(arg1,*arg2);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SpatialAudio::QueryWetDiffraction(AkPortalID,AkReal32 &): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_QueryDiffractionPaths(AkGameObjectID jarg1, unsigned int jarg2, AkVector* jarg3, AkVector* jarg4, void * jarg5, unsigned int * jarg6) {
  int jresult ;
  AkGameObjectID arg1 ;
  AkUInt32 arg2 ;
  AkVector *arg3 = 0 ;
  AkVector *arg4 = 0 ;
  AkDiffractionPathInfo *arg5 = (AkDiffractionPathInfo *) 0 ;
  AkUInt32 *arg6 = 0 ;
  AKRESULT result;
  
  arg1 = jarg1; 
  arg2 = (AkUInt32)jarg2; 
  arg3 = jarg3; 
  arg4 = jarg4; 
  arg5 = (AkDiffractionPathInfo *)jarg5; 
  arg6 = (AkUInt32 *)jarg6; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SpatialAudio::QueryDiffractionPaths(arg1,arg2,*arg3,*arg4,arg5,*arg6);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SpatialAudio::QueryDiffractionPaths(AkGameObjectID,AkUInt32,AkVector &,AkVector &,AkDiffractionPathInfo *,AkUInt32 &): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ResetStochasticEngine() {
  int jresult ;
  AKRESULT result;
  
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AK::SpatialAudio::ResetStochasticEngine();  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AK::SpatialAudio::ResetStochasticEngine(): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkPlatformInitSettings_threadLEngine_set(void * jarg1, void * jarg2) {
  AkPlatformInitSettings *arg1 = (AkPlatformInitSettings *) 0 ;
  AkThreadProperties *arg2 = (AkThreadProperties *) 0 ;
  
  arg1 = (AkPlatformInitSettings *)jarg1; 
  arg2 = (AkThreadProperties *)jarg2; 
  if (arg1) (arg1)->threadLEngine = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AkPlatformInitSettings_threadLEngine_get(void * jarg1) {
  void * jresult ;
  AkPlatformInitSettings *arg1 = (AkPlatformInitSettings *) 0 ;
  AkThreadProperties *result = 0 ;
  
  arg1 = (AkPlatformInitSettings *)jarg1; 
  result = (AkThreadProperties *)& ((arg1)->threadLEngine);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkPlatformInitSettings_threadOutputMgr_set(void * jarg1, void * jarg2) {
  AkPlatformInitSettings *arg1 = (AkPlatformInitSettings *) 0 ;
  AkThreadProperties *arg2 = (AkThreadProperties *) 0 ;
  
  arg1 = (AkPlatformInitSettings *)jarg1; 
  arg2 = (AkThreadProperties *)jarg2; 
  if (arg1) (arg1)->threadOutputMgr = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AkPlatformInitSettings_threadOutputMgr_get(void * jarg1) {
  void * jresult ;
  AkPlatformInitSettings *arg1 = (AkPlatformInitSettings *) 0 ;
  AkThreadProperties *result = 0 ;
  
  arg1 = (AkPlatformInitSettings *)jarg1; 
  result = (AkThreadProperties *)& ((arg1)->threadOutputMgr);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkPlatformInitSettings_threadBankManager_set(void * jarg1, void * jarg2) {
  AkPlatformInitSettings *arg1 = (AkPlatformInitSettings *) 0 ;
  AkThreadProperties *arg2 = (AkThreadProperties *) 0 ;
  
  arg1 = (AkPlatformInitSettings *)jarg1; 
  arg2 = (AkThreadProperties *)jarg2; 
  if (arg1) (arg1)->threadBankManager = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AkPlatformInitSettings_threadBankManager_get(void * jarg1) {
  void * jresult ;
  AkPlatformInitSettings *arg1 = (AkPlatformInitSettings *) 0 ;
  AkThreadProperties *result = 0 ;
  
  arg1 = (AkPlatformInitSettings *)jarg1; 
  result = (AkThreadProperties *)& ((arg1)->threadBankManager);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkPlatformInitSettings_threadMonitor_set(void * jarg1, void * jarg2) {
  AkPlatformInitSettings *arg1 = (AkPlatformInitSettings *) 0 ;
  AkThreadProperties *arg2 = (AkThreadProperties *) 0 ;
  
  arg1 = (AkPlatformInitSettings *)jarg1; 
  arg2 = (AkThreadProperties *)jarg2; 
  if (arg1) (arg1)->threadMonitor = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AkPlatformInitSettings_threadMonitor_get(void * jarg1) {
  void * jresult ;
  AkPlatformInitSettings *arg1 = (AkPlatformInitSettings *) 0 ;
  AkThreadProperties *result = 0 ;
  
  arg1 = (AkPlatformInitSettings *)jarg1; 
  result = (AkThreadProperties *)& ((arg1)->threadMonitor);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkPlatformInitSettings_uNumRefillsInVoice_set(void * jarg1, unsigned short jarg2) {
  AkPlatformInitSettings *arg1 = (AkPlatformInitSettings *) 0 ;
  AkUInt16 arg2 ;
  
  arg1 = (AkPlatformInitSettings *)jarg1; 
  arg2 = (AkUInt16)jarg2; 
  if (arg1) (arg1)->uNumRefillsInVoice = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_AkPlatformInitSettings_uNumRefillsInVoice_get(void * jarg1) {
  unsigned short jresult ;
  AkPlatformInitSettings *arg1 = (AkPlatformInitSettings *) 0 ;
  AkUInt16 result;
  
  arg1 = (AkPlatformInitSettings *)jarg1; 
  result = (AkUInt16) ((arg1)->uNumRefillsInVoice);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkPlatformInitSettings_uSampleRate_set(void * jarg1, unsigned int jarg2) {
  AkPlatformInitSettings *arg1 = (AkPlatformInitSettings *) 0 ;
  AkUInt32 arg2 ;
  
  arg1 = (AkPlatformInitSettings *)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  if (arg1) (arg1)->uSampleRate = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkPlatformInitSettings_uSampleRate_get(void * jarg1) {
  unsigned int jresult ;
  AkPlatformInitSettings *arg1 = (AkPlatformInitSettings *) 0 ;
  AkUInt32 result;
  
  arg1 = (AkPlatformInitSettings *)jarg1; 
  result = (AkUInt32) ((arg1)->uSampleRate);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkPlatformInitSettings_bEnableAvxSupport_set(void * jarg1, unsigned int jarg2) {
  AkPlatformInitSettings *arg1 = (AkPlatformInitSettings *) 0 ;
  bool arg2 ;
  
  arg1 = (AkPlatformInitSettings *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bEnableAvxSupport = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkPlatformInitSettings_bEnableAvxSupport_get(void * jarg1) {
  unsigned int jresult ;
  AkPlatformInitSettings *arg1 = (AkPlatformInitSettings *) 0 ;
  bool result;
  
  arg1 = (AkPlatformInitSettings *)jarg1; 
  result = (bool) ((arg1)->bEnableAvxSupport);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkPlatformInitSettings_uMaxSystemAudioObjects_set(void * jarg1, unsigned int jarg2) {
  AkPlatformInitSettings *arg1 = (AkPlatformInitSettings *) 0 ;
  AkUInt32 arg2 ;
  
  arg1 = (AkPlatformInitSettings *)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  if (arg1) (arg1)->uMaxSystemAudioObjects = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkPlatformInitSettings_uMaxSystemAudioObjects_get(void * jarg1) {
  unsigned int jresult ;
  AkPlatformInitSettings *arg1 = (AkPlatformInitSettings *) 0 ;
  AkUInt32 result;
  
  arg1 = (AkPlatformInitSettings *)jarg1; 
  result = (AkUInt32) ((arg1)->uMaxSystemAudioObjects);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AkPlatformInitSettings(void * jarg1) {
  AkPlatformInitSettings *arg1 = (AkPlatformInitSettings *) 0 ;
  
  arg1 = (AkPlatformInitSettings *)jarg1; 
  {
    delete arg1;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GetDeviceIDFromName(wchar_t* jarg1) {
  unsigned int jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  AkUInt32 result;
  
  arg1 = (wchar_t *)jarg1; 
  {
    result = (AkUInt32)AK::GetDeviceIDFromName(arg1);
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT wchar_t* SWIGSTDCALL CSharp_GetWindowsDeviceName__SWIG_0(int jarg1, unsigned int * jarg2, int jarg3) {
  wchar_t* jresult ;
  AkInt32 arg1 ;
  AkUInt32 *arg2 = 0 ;
  AkAudioDeviceState arg3 ;
  wchar_t *result = 0 ;
  
  arg1 = (AkInt32)jarg1; 
  arg2 = (AkUInt32 *)jarg2; 
  arg3 = (AkAudioDeviceState)jarg3; 
  {
    result = (wchar_t *)AK::GetWindowsDeviceName(arg1,*arg2,arg3);
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT wchar_t* SWIGSTDCALL CSharp_GetWindowsDeviceName__SWIG_1(int jarg1, unsigned int * jarg2) {
  wchar_t* jresult ;
  AkInt32 arg1 ;
  AkUInt32 *arg2 = 0 ;
  wchar_t *result = 0 ;
  
  arg1 = (AkInt32)jarg1; 
  arg2 = (AkUInt32 *)jarg2; 
  {
    result = (wchar_t *)AK::GetWindowsDeviceName(arg1,*arg2);
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GetWindowsDeviceCount__SWIG_0(int jarg1) {
  unsigned int jresult ;
  AkAudioDeviceState arg1 ;
  AkUInt32 result;
  
  arg1 = (AkAudioDeviceState)jarg1; 
  {
    result = (AkUInt32)AK::GetWindowsDeviceCount(arg1);
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GetWindowsDeviceCount__SWIG_1() {
  unsigned int jresult ;
  AkUInt32 result;
  
  {
    result = (AkUInt32)AK::GetWindowsDeviceCount();
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AkStreamMgrSettings(void * jarg1) {
  AkStreamMgrSettings *arg1 = (AkStreamMgrSettings *) 0 ;
  
  arg1 = (AkStreamMgrSettings *)jarg1; 
  {
    delete arg1;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkDeviceSettings_pIOMemory_set(void * jarg1, void * jarg2) {
  AkDeviceSettings *arg1 = (AkDeviceSettings *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (AkDeviceSettings *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->pIOMemory = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AkDeviceSettings_pIOMemory_get(void * jarg1) {
  void * jresult ;
  AkDeviceSettings *arg1 = (AkDeviceSettings *) 0 ;
  void *result = 0 ;
  
  arg1 = (AkDeviceSettings *)jarg1; 
  result = (void *) ((arg1)->pIOMemory);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkDeviceSettings_uIOMemorySize_set(void * jarg1, unsigned int jarg2) {
  AkDeviceSettings *arg1 = (AkDeviceSettings *) 0 ;
  AkUInt32 arg2 ;
  
  arg1 = (AkDeviceSettings *)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  if (arg1) (arg1)->uIOMemorySize = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkDeviceSettings_uIOMemorySize_get(void * jarg1) {
  unsigned int jresult ;
  AkDeviceSettings *arg1 = (AkDeviceSettings *) 0 ;
  AkUInt32 result;
  
  arg1 = (AkDeviceSettings *)jarg1; 
  result = (AkUInt32) ((arg1)->uIOMemorySize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkDeviceSettings_uIOMemoryAlignment_set(void * jarg1, unsigned int jarg2) {
  AkDeviceSettings *arg1 = (AkDeviceSettings *) 0 ;
  AkUInt32 arg2 ;
  
  arg1 = (AkDeviceSettings *)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  if (arg1) (arg1)->uIOMemoryAlignment = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkDeviceSettings_uIOMemoryAlignment_get(void * jarg1) {
  unsigned int jresult ;
  AkDeviceSettings *arg1 = (AkDeviceSettings *) 0 ;
  AkUInt32 result;
  
  arg1 = (AkDeviceSettings *)jarg1; 
  result = (AkUInt32) ((arg1)->uIOMemoryAlignment);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkDeviceSettings_ePoolAttributes_set(void * jarg1, unsigned int jarg2) {
  AkDeviceSettings *arg1 = (AkDeviceSettings *) 0 ;
  AkUInt32 arg2 ;
  
  arg1 = (AkDeviceSettings *)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  if (arg1) (arg1)->ePoolAttributes = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkDeviceSettings_ePoolAttributes_get(void * jarg1) {
  unsigned int jresult ;
  AkDeviceSettings *arg1 = (AkDeviceSettings *) 0 ;
  AkUInt32 result;
  
  arg1 = (AkDeviceSettings *)jarg1; 
  result = (AkUInt32) ((arg1)->ePoolAttributes);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkDeviceSettings_uGranularity_set(void * jarg1, unsigned int jarg2) {
  AkDeviceSettings *arg1 = (AkDeviceSettings *) 0 ;
  AkUInt32 arg2 ;
  
  arg1 = (AkDeviceSettings *)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  if (arg1) (arg1)->uGranularity = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkDeviceSettings_uGranularity_get(void * jarg1) {
  unsigned int jresult ;
  AkDeviceSettings *arg1 = (AkDeviceSettings *) 0 ;
  AkUInt32 result;
  
  arg1 = (AkDeviceSettings *)jarg1; 
  result = (AkUInt32) ((arg1)->uGranularity);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkDeviceSettings_uSchedulerTypeFlags_set(void * jarg1, unsigned int jarg2) {
  AkDeviceSettings *arg1 = (AkDeviceSettings *) 0 ;
  AkUInt32 arg2 ;
  
  arg1 = (AkDeviceSettings *)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  if (arg1) (arg1)->uSchedulerTypeFlags = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkDeviceSettings_uSchedulerTypeFlags_get(void * jarg1) {
  unsigned int jresult ;
  AkDeviceSettings *arg1 = (AkDeviceSettings *) 0 ;
  AkUInt32 result;
  
  arg1 = (AkDeviceSettings *)jarg1; 
  result = (AkUInt32) ((arg1)->uSchedulerTypeFlags);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkDeviceSettings_threadProperties_set(void * jarg1, void * jarg2) {
  AkDeviceSettings *arg1 = (AkDeviceSettings *) 0 ;
  AkThreadProperties *arg2 = (AkThreadProperties *) 0 ;
  
  arg1 = (AkDeviceSettings *)jarg1; 
  arg2 = (AkThreadProperties *)jarg2; 
  if (arg1) (arg1)->threadProperties = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AkDeviceSettings_threadProperties_get(void * jarg1) {
  void * jresult ;
  AkDeviceSettings *arg1 = (AkDeviceSettings *) 0 ;
  AkThreadProperties *result = 0 ;
  
  arg1 = (AkDeviceSettings *)jarg1; 
  result = (AkThreadProperties *)& ((arg1)->threadProperties);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkDeviceSettings_fTargetAutoStmBufferLength_set(void * jarg1, float jarg2) {
  AkDeviceSettings *arg1 = (AkDeviceSettings *) 0 ;
  AkReal32 arg2 ;
  
  arg1 = (AkDeviceSettings *)jarg1; 
  arg2 = (AkReal32)jarg2; 
  if (arg1) (arg1)->fTargetAutoStmBufferLength = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AkDeviceSettings_fTargetAutoStmBufferLength_get(void * jarg1) {
  float jresult ;
  AkDeviceSettings *arg1 = (AkDeviceSettings *) 0 ;
  AkReal32 result;
  
  arg1 = (AkDeviceSettings *)jarg1; 
  result = (AkReal32) ((arg1)->fTargetAutoStmBufferLength);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkDeviceSettings_uMaxConcurrentIO_set(void * jarg1, unsigned int jarg2) {
  AkDeviceSettings *arg1 = (AkDeviceSettings *) 0 ;
  AkUInt32 arg2 ;
  
  arg1 = (AkDeviceSettings *)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  if (arg1) (arg1)->uMaxConcurrentIO = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkDeviceSettings_uMaxConcurrentIO_get(void * jarg1) {
  unsigned int jresult ;
  AkDeviceSettings *arg1 = (AkDeviceSettings *) 0 ;
  AkUInt32 result;
  
  arg1 = (AkDeviceSettings *)jarg1; 
  result = (AkUInt32) ((arg1)->uMaxConcurrentIO);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkDeviceSettings_bUseStreamCache_set(void * jarg1, unsigned int jarg2) {
  AkDeviceSettings *arg1 = (AkDeviceSettings *) 0 ;
  bool arg2 ;
  
  arg1 = (AkDeviceSettings *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bUseStreamCache = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkDeviceSettings_bUseStreamCache_get(void * jarg1) {
  unsigned int jresult ;
  AkDeviceSettings *arg1 = (AkDeviceSettings *) 0 ;
  bool result;
  
  arg1 = (AkDeviceSettings *)jarg1; 
  result = (bool) ((arg1)->bUseStreamCache);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkDeviceSettings_uMaxCachePinnedBytes_set(void * jarg1, unsigned int jarg2) {
  AkDeviceSettings *arg1 = (AkDeviceSettings *) 0 ;
  AkUInt32 arg2 ;
  
  arg1 = (AkDeviceSettings *)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  if (arg1) (arg1)->uMaxCachePinnedBytes = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkDeviceSettings_uMaxCachePinnedBytes_get(void * jarg1) {
  unsigned int jresult ;
  AkDeviceSettings *arg1 = (AkDeviceSettings *) 0 ;
  AkUInt32 result;
  
  arg1 = (AkDeviceSettings *)jarg1; 
  result = (AkUInt32) ((arg1)->uMaxCachePinnedBytes);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AkDeviceSettings(void * jarg1) {
  AkDeviceSettings *arg1 = (AkDeviceSettings *) 0 ;
  
  arg1 = (AkDeviceSettings *)jarg1; 
  {
    delete arg1;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkThreadProperties_nPriority_set(void * jarg1, int jarg2) {
  AkThreadProperties *arg1 = (AkThreadProperties *) 0 ;
  int arg2 ;
  
  arg1 = (AkThreadProperties *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->nPriority = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AkThreadProperties_nPriority_get(void * jarg1) {
  int jresult ;
  AkThreadProperties *arg1 = (AkThreadProperties *) 0 ;
  int result;
  
  arg1 = (AkThreadProperties *)jarg1; 
  result = (int) ((arg1)->nPriority);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkThreadProperties_dwAffinityMask_set(void * jarg1, unsigned int jarg2) {
  AkThreadProperties *arg1 = (AkThreadProperties *) 0 ;
  AkUInt32 arg2 ;
  
  arg1 = (AkThreadProperties *)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  if (arg1) (arg1)->dwAffinityMask = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkThreadProperties_dwAffinityMask_get(void * jarg1) {
  unsigned int jresult ;
  AkThreadProperties *arg1 = (AkThreadProperties *) 0 ;
  AkUInt32 result;
  
  arg1 = (AkThreadProperties *)jarg1; 
  result = (AkUInt32) ((arg1)->dwAffinityMask);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkThreadProperties_uStackSize_set(void * jarg1, unsigned int jarg2) {
  AkThreadProperties *arg1 = (AkThreadProperties *) 0 ;
  AkUInt32 arg2 ;
  
  arg1 = (AkThreadProperties *)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  if (arg1) (arg1)->uStackSize = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkThreadProperties_uStackSize_get(void * jarg1) {
  unsigned int jresult ;
  AkThreadProperties *arg1 = (AkThreadProperties *) 0 ;
  AkUInt32 result;
  
  arg1 = (AkThreadProperties *)jarg1; 
  result = (AkUInt32) ((arg1)->uStackSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AkThreadProperties() {
  void * jresult ;
  AkThreadProperties *result = 0 ;
  
  {
    result = (AkThreadProperties *)new AkThreadProperties();
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AkThreadProperties(void * jarg1) {
  AkThreadProperties *arg1 = (AkThreadProperties *) 0 ;
  
  arg1 = (AkThreadProperties *)jarg1; 
  {
    delete arg1;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetErrorLogger__SWIG_0(void* jarg1) {
  AkErrorLogger arg1 = (AkErrorLogger) 0 ;
  
  arg1 = (AkErrorLogger)jarg1; 
  {
    SetErrorLogger(arg1);
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetErrorLogger__SWIG_1() {
  {
    SetErrorLogger();
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetAudioInputCallbacks(void* jarg1, void* jarg2) {
  AkGetAudioSamples arg1 = (AkGetAudioSamples) 0 ;
  AkGetAudioFormat arg2 = (AkGetAudioFormat) 0 ;
  
  arg1 = (AkGetAudioSamples)jarg1; 
  arg2 = (AkGetAudioFormat)jarg2; 
  {
    SetAudioInputCallbacks(arg1,arg2);
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AkUnityPlatformSpecificSettings(void * jarg1) {
  AkUnityPlatformSpecificSettings *arg1 = (AkUnityPlatformSpecificSettings *) 0 ;
  
  arg1 = (AkUnityPlatformSpecificSettings *)jarg1; 
  {
    delete arg1;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AkCommunicationSettings() {
  void * jresult ;
  AkCommunicationSettings *result = 0 ;
  
  {
    result = (AkCommunicationSettings *)new AkCommunicationSettings();
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkCommunicationSettings_uPoolSize_set(void * jarg1, unsigned int jarg2) {
  AkCommunicationSettings *arg1 = (AkCommunicationSettings *) 0 ;
  AkUInt32 arg2 ;
  
  arg1 = (AkCommunicationSettings *)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  if (arg1) (arg1)->uPoolSize = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkCommunicationSettings_uPoolSize_get(void * jarg1) {
  unsigned int jresult ;
  AkCommunicationSettings *arg1 = (AkCommunicationSettings *) 0 ;
  AkUInt32 result;
  
  arg1 = (AkCommunicationSettings *)jarg1; 
  result = (AkUInt32) ((arg1)->uPoolSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkCommunicationSettings_uDiscoveryBroadcastPort_set(void * jarg1, unsigned short jarg2) {
  AkCommunicationSettings *arg1 = (AkCommunicationSettings *) 0 ;
  AkUInt16 arg2 ;
  
  arg1 = (AkCommunicationSettings *)jarg1; 
  arg2 = (AkUInt16)jarg2; 
  if (arg1) (arg1)->uDiscoveryBroadcastPort = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_AkCommunicationSettings_uDiscoveryBroadcastPort_get(void * jarg1) {
  unsigned short jresult ;
  AkCommunicationSettings *arg1 = (AkCommunicationSettings *) 0 ;
  AkUInt16 result;
  
  arg1 = (AkCommunicationSettings *)jarg1; 
  result = (AkUInt16) ((arg1)->uDiscoveryBroadcastPort);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkCommunicationSettings_uCommandPort_set(void * jarg1, unsigned short jarg2) {
  AkCommunicationSettings *arg1 = (AkCommunicationSettings *) 0 ;
  AkUInt16 arg2 ;
  
  arg1 = (AkCommunicationSettings *)jarg1; 
  arg2 = (AkUInt16)jarg2; 
  if (arg1) (arg1)->uCommandPort = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_AkCommunicationSettings_uCommandPort_get(void * jarg1) {
  unsigned short jresult ;
  AkCommunicationSettings *arg1 = (AkCommunicationSettings *) 0 ;
  AkUInt16 result;
  
  arg1 = (AkCommunicationSettings *)jarg1; 
  result = (AkUInt16) ((arg1)->uCommandPort);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkCommunicationSettings_uNotificationPort_set(void * jarg1, unsigned short jarg2) {
  AkCommunicationSettings *arg1 = (AkCommunicationSettings *) 0 ;
  AkUInt16 arg2 ;
  
  arg1 = (AkCommunicationSettings *)jarg1; 
  arg2 = (AkUInt16)jarg2; 
  if (arg1) (arg1)->uNotificationPort = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_AkCommunicationSettings_uNotificationPort_get(void * jarg1) {
  unsigned short jresult ;
  AkCommunicationSettings *arg1 = (AkCommunicationSettings *) 0 ;
  AkUInt16 result;
  
  arg1 = (AkCommunicationSettings *)jarg1; 
  result = (AkUInt16) ((arg1)->uNotificationPort);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkCommunicationSettings_commSystem_set(void * jarg1, int jarg2) {
  AkCommunicationSettings *arg1 = (AkCommunicationSettings *) 0 ;
  AkCommunicationSettings::AkCommSystem arg2 ;
  
  arg1 = (AkCommunicationSettings *)jarg1; 
  arg2 = (AkCommunicationSettings::AkCommSystem)jarg2; 
  if (arg1) (arg1)->commSystem = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AkCommunicationSettings_commSystem_get(void * jarg1) {
  int jresult ;
  AkCommunicationSettings *arg1 = (AkCommunicationSettings *) 0 ;
  AkCommunicationSettings::AkCommSystem result;
  
  arg1 = (AkCommunicationSettings *)jarg1; 
  result = (AkCommunicationSettings::AkCommSystem) ((arg1)->commSystem);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkCommunicationSettings_bInitSystemLib_set(void * jarg1, unsigned int jarg2) {
  AkCommunicationSettings *arg1 = (AkCommunicationSettings *) 0 ;
  bool arg2 ;
  
  arg1 = (AkCommunicationSettings *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bInitSystemLib = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkCommunicationSettings_bInitSystemLib_get(void * jarg1) {
  unsigned int jresult ;
  AkCommunicationSettings *arg1 = (AkCommunicationSettings *) 0 ;
  bool result;
  
  arg1 = (AkCommunicationSettings *)jarg1; 
  result = (bool) ((arg1)->bInitSystemLib);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkCommunicationSettings_szAppNetworkName_set(void * jarg1, char * jarg2) {
  AkCommunicationSettings *arg1 = (AkCommunicationSettings *) 0 ;
  char *arg2 ;
  
  arg1 = (AkCommunicationSettings *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->szAppNetworkName, (const char *)arg2, 64-1);
      arg1->szAppNetworkName[64-1] = 0;
    } else {
      arg1->szAppNetworkName[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_AkCommunicationSettings_szAppNetworkName_get(void * jarg1) {
  char * jresult ;
  AkCommunicationSettings *arg1 = (AkCommunicationSettings *) 0 ;
  char *result = 0 ;
  
  arg1 = (AkCommunicationSettings *)jarg1; 
  result = (char *)(char *) ((arg1)->szAppNetworkName);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AkCommunicationSettings(void * jarg1) {
  AkCommunicationSettings *arg1 = (AkCommunicationSettings *) 0 ;
  
  arg1 = (AkCommunicationSettings *)jarg1; 
  {
    delete arg1;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AkInitializationSettings() {
  void * jresult ;
  AkInitializationSettings *result = 0 ;
  
  {
    result = (AkInitializationSettings *)new AkInitializationSettings();
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AkInitializationSettings(void * jarg1) {
  AkInitializationSettings *arg1 = (AkInitializationSettings *) 0 ;
  
  arg1 = (AkInitializationSettings *)jarg1; 
  {
    delete arg1;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkInitializationSettings_streamMgrSettings_set(void * jarg1, void * jarg2) {
  AkInitializationSettings *arg1 = (AkInitializationSettings *) 0 ;
  AkStreamMgrSettings *arg2 = (AkStreamMgrSettings *) 0 ;
  
  arg1 = (AkInitializationSettings *)jarg1; 
  arg2 = (AkStreamMgrSettings *)jarg2; 
  if (arg1) (arg1)->streamMgrSettings = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AkInitializationSettings_streamMgrSettings_get(void * jarg1) {
  void * jresult ;
  AkInitializationSettings *arg1 = (AkInitializationSettings *) 0 ;
  AkStreamMgrSettings *result = 0 ;
  
  arg1 = (AkInitializationSettings *)jarg1; 
  result = (AkStreamMgrSettings *)& ((arg1)->streamMgrSettings);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkInitializationSettings_deviceSettings_set(void * jarg1, void * jarg2) {
  AkInitializationSettings *arg1 = (AkInitializationSettings *) 0 ;
  AkDeviceSettings *arg2 = (AkDeviceSettings *) 0 ;
  
  arg1 = (AkInitializationSettings *)jarg1; 
  arg2 = (AkDeviceSettings *)jarg2; 
  if (arg1) (arg1)->deviceSettings = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AkInitializationSettings_deviceSettings_get(void * jarg1) {
  void * jresult ;
  AkInitializationSettings *arg1 = (AkInitializationSettings *) 0 ;
  AkDeviceSettings *result = 0 ;
  
  arg1 = (AkInitializationSettings *)jarg1; 
  result = (AkDeviceSettings *)& ((arg1)->deviceSettings);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkInitializationSettings_initSettings_set(void * jarg1, void * jarg2) {
  AkInitializationSettings *arg1 = (AkInitializationSettings *) 0 ;
  AkInitSettings *arg2 = (AkInitSettings *) 0 ;
  
  arg1 = (AkInitializationSettings *)jarg1; 
  arg2 = (AkInitSettings *)jarg2; 
  if (arg1) (arg1)->initSettings = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AkInitializationSettings_initSettings_get(void * jarg1) {
  void * jresult ;
  AkInitializationSettings *arg1 = (AkInitializationSettings *) 0 ;
  AkInitSettings *result = 0 ;
  
  arg1 = (AkInitializationSettings *)jarg1; 
  result = (AkInitSettings *)& ((arg1)->initSettings);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkInitializationSettings_platformSettings_set(void * jarg1, void * jarg2) {
  AkInitializationSettings *arg1 = (AkInitializationSettings *) 0 ;
  AkPlatformInitSettings *arg2 = (AkPlatformInitSettings *) 0 ;
  
  arg1 = (AkInitializationSettings *)jarg1; 
  arg2 = (AkPlatformInitSettings *)jarg2; 
  if (arg1) (arg1)->platformSettings = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AkInitializationSettings_platformSettings_get(void * jarg1) {
  void * jresult ;
  AkInitializationSettings *arg1 = (AkInitializationSettings *) 0 ;
  AkPlatformInitSettings *result = 0 ;
  
  arg1 = (AkInitializationSettings *)jarg1; 
  result = (AkPlatformInitSettings *)& ((arg1)->platformSettings);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkInitializationSettings_musicSettings_set(void * jarg1, void * jarg2) {
  AkInitializationSettings *arg1 = (AkInitializationSettings *) 0 ;
  AkMusicSettings *arg2 = (AkMusicSettings *) 0 ;
  
  arg1 = (AkInitializationSettings *)jarg1; 
  arg2 = (AkMusicSettings *)jarg2; 
  if (arg1) (arg1)->musicSettings = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AkInitializationSettings_musicSettings_get(void * jarg1) {
  void * jresult ;
  AkInitializationSettings *arg1 = (AkInitializationSettings *) 0 ;
  AkMusicSettings *result = 0 ;
  
  arg1 = (AkInitializationSettings *)jarg1; 
  result = (AkMusicSettings *)& ((arg1)->musicSettings);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkInitializationSettings_unityPlatformSpecificSettings_set(void * jarg1, void * jarg2) {
  AkInitializationSettings *arg1 = (AkInitializationSettings *) 0 ;
  AkUnityPlatformSpecificSettings *arg2 = (AkUnityPlatformSpecificSettings *) 0 ;
  
  arg1 = (AkInitializationSettings *)jarg1; 
  arg2 = (AkUnityPlatformSpecificSettings *)jarg2; 
  if (arg1) (arg1)->unityPlatformSpecificSettings = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AkInitializationSettings_unityPlatformSpecificSettings_get(void * jarg1) {
  void * jresult ;
  AkInitializationSettings *arg1 = (AkInitializationSettings *) 0 ;
  AkUnityPlatformSpecificSettings *result = 0 ;
  
  arg1 = (AkInitializationSettings *)jarg1; 
  result = (AkUnityPlatformSpecificSettings *)& ((arg1)->unityPlatformSpecificSettings);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkInitializationSettings_useAsyncOpen_set(void * jarg1, unsigned int jarg2) {
  AkInitializationSettings *arg1 = (AkInitializationSettings *) 0 ;
  bool arg2 ;
  
  arg1 = (AkInitializationSettings *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->useAsyncOpen = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkInitializationSettings_useAsyncOpen_get(void * jarg1) {
  unsigned int jresult ;
  AkInitializationSettings *arg1 = (AkInitializationSettings *) 0 ;
  bool result;
  
  arg1 = (AkInitializationSettings *)jarg1; 
  result = (bool) ((arg1)->useAsyncOpen);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AkExternalSourceInfo__SWIG_0() {
  void * jresult ;
  AkSerializedExternalSourceInfo *result = 0 ;
  
  {
    result = (AkSerializedExternalSourceInfo *)new AkSerializedExternalSourceInfo();
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AkExternalSourceInfo(void * jarg1) {
  AkSerializedExternalSourceInfo *arg1 = (AkSerializedExternalSourceInfo *) 0 ;
  
  arg1 = (AkSerializedExternalSourceInfo *)jarg1; 
  {
    delete arg1;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AkExternalSourceInfo__SWIG_1(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  void * jresult ;
  void *arg1 = (void *) 0 ;
  AkUInt32 arg2 ;
  AkUInt32 arg3 ;
  AkCodecID arg4 ;
  AkSerializedExternalSourceInfo *result = 0 ;
  
  arg1 = jarg1; 
  arg2 = (AkUInt32)jarg2; 
  arg3 = (AkUInt32)jarg3; 
  arg4 = (AkCodecID)jarg4; 
  {
    result = (AkSerializedExternalSourceInfo *)new AkSerializedExternalSourceInfo(arg1,arg2,arg3,arg4);
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AkExternalSourceInfo__SWIG_2(wchar_t* jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  AkOSChar *arg1 = (AkOSChar *) 0 ;
  AkUInt32 arg2 ;
  AkCodecID arg3 ;
  AkSerializedExternalSourceInfo *result = 0 ;
  
  arg1 = (AkOSChar *)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  arg3 = (AkCodecID)jarg3; 
  {
    result = (AkSerializedExternalSourceInfo *)new AkSerializedExternalSourceInfo(arg1,arg2,arg3);
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AkExternalSourceInfo__SWIG_3(unsigned int jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  AkFileID arg1 ;
  AkUInt32 arg2 ;
  AkCodecID arg3 ;
  AkSerializedExternalSourceInfo *result = 0 ;
  
  arg1 = (AkFileID)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  arg3 = (AkCodecID)jarg3; 
  {
    result = (AkSerializedExternalSourceInfo *)new AkSerializedExternalSourceInfo(arg1,arg2,arg3);
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkExternalSourceInfo_Clear(void * jarg1) {
  AkSerializedExternalSourceInfo *arg1 = (AkSerializedExternalSourceInfo *) 0 ;
  
  arg1 = (AkSerializedExternalSourceInfo *)jarg1; 
  {
    (arg1)->Clear();
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkExternalSourceInfo_Clone(void * jarg1, void * jarg2) {
  AkSerializedExternalSourceInfo *arg1 = (AkSerializedExternalSourceInfo *) 0 ;
  AkSerializedExternalSourceInfo *arg2 = 0 ;
  
  arg1 = (AkSerializedExternalSourceInfo *)jarg1; 
  arg2 = (AkSerializedExternalSourceInfo *)jarg2;
  if (!arg2) {
    return ;
  } 
  {
    (arg1)->Clone((AkSerializedExternalSourceInfo const &)*arg2);
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_AkExternalSourceInfo_GetSizeOf() {
  int jresult ;
  int result;
  
  {
    result = (int)AkSerializedExternalSourceInfo::GetSizeOf();
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkExternalSourceInfo_iExternalSrcCookie_set(void * jarg1, unsigned int jarg2) {
  AkSerializedExternalSourceInfo *arg1 = (AkSerializedExternalSourceInfo *) 0 ;
  AkUInt32 arg2 ;
  
  arg1 = (AkSerializedExternalSourceInfo *)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  {
    AkSerializedExternalSourceInfo_iExternalSrcCookie_set(arg1,arg2);
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkExternalSourceInfo_iExternalSrcCookie_get(void * jarg1) {
  unsigned int jresult ;
  AkSerializedExternalSourceInfo *arg1 = (AkSerializedExternalSourceInfo *) 0 ;
  AkUInt32 result;
  
  arg1 = (AkSerializedExternalSourceInfo *)jarg1; 
  {
    result = (AkUInt32)AkSerializedExternalSourceInfo_iExternalSrcCookie_get(arg1);
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkExternalSourceInfo_idCodec_set(void * jarg1, unsigned int jarg2) {
  AkSerializedExternalSourceInfo *arg1 = (AkSerializedExternalSourceInfo *) 0 ;
  AkCodecID arg2 ;
  
  arg1 = (AkSerializedExternalSourceInfo *)jarg1; 
  arg2 = (AkCodecID)jarg2; 
  {
    AkSerializedExternalSourceInfo_idCodec_set(arg1,arg2);
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkExternalSourceInfo_idCodec_get(void * jarg1) {
  unsigned int jresult ;
  AkSerializedExternalSourceInfo *arg1 = (AkSerializedExternalSourceInfo *) 0 ;
  AkCodecID result;
  
  arg1 = (AkSerializedExternalSourceInfo *)jarg1; 
  {
    result = (AkCodecID)AkSerializedExternalSourceInfo_idCodec_get(arg1);
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkExternalSourceInfo_szFile_set(void * jarg1, wchar_t* jarg2) {
  AkSerializedExternalSourceInfo *arg1 = (AkSerializedExternalSourceInfo *) 0 ;
  AkOSChar *arg2 = (AkOSChar *) 0 ;
  
  arg1 = (AkSerializedExternalSourceInfo *)jarg1; 
  arg2 = (AkOSChar *)jarg2; 
  {
    AkSerializedExternalSourceInfo_szFile_set(arg1,arg2);
  }
}


SWIGEXPORT wchar_t* SWIGSTDCALL CSharp_AkExternalSourceInfo_szFile_get(void * jarg1) {
  wchar_t* jresult ;
  AkSerializedExternalSourceInfo *arg1 = (AkSerializedExternalSourceInfo *) 0 ;
  AkOSChar *result = 0 ;
  
  arg1 = (AkSerializedExternalSourceInfo *)jarg1; 
  {
    result = (AkOSChar *)AkSerializedExternalSourceInfo_szFile_get(arg1);
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkExternalSourceInfo_pInMemory_set(void * jarg1, void * jarg2) {
  AkSerializedExternalSourceInfo *arg1 = (AkSerializedExternalSourceInfo *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (AkSerializedExternalSourceInfo *)jarg1; 
  arg2 = jarg2; 
  {
    AkSerializedExternalSourceInfo_pInMemory_set(arg1,arg2);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AkExternalSourceInfo_pInMemory_get(void * jarg1) {
  void * jresult ;
  AkSerializedExternalSourceInfo *arg1 = (AkSerializedExternalSourceInfo *) 0 ;
  void *result = 0 ;
  
  arg1 = (AkSerializedExternalSourceInfo *)jarg1; 
  {
    result = (void *)AkSerializedExternalSourceInfo_pInMemory_get(arg1);
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkExternalSourceInfo_uiMemorySize_set(void * jarg1, unsigned int jarg2) {
  AkSerializedExternalSourceInfo *arg1 = (AkSerializedExternalSourceInfo *) 0 ;
  AkUInt32 arg2 ;
  
  arg1 = (AkSerializedExternalSourceInfo *)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  {
    AkSerializedExternalSourceInfo_uiMemorySize_set(arg1,arg2);
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkExternalSourceInfo_uiMemorySize_get(void * jarg1) {
  unsigned int jresult ;
  AkSerializedExternalSourceInfo *arg1 = (AkSerializedExternalSourceInfo *) 0 ;
  AkUInt32 result;
  
  arg1 = (AkSerializedExternalSourceInfo *)jarg1; 
  {
    result = (AkUInt32)AkSerializedExternalSourceInfo_uiMemorySize_get(arg1);
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkExternalSourceInfo_idFile_set(void * jarg1, unsigned int jarg2) {
  AkSerializedExternalSourceInfo *arg1 = (AkSerializedExternalSourceInfo *) 0 ;
  AkFileID arg2 ;
  
  arg1 = (AkSerializedExternalSourceInfo *)jarg1; 
  arg2 = (AkFileID)jarg2; 
  {
    AkSerializedExternalSourceInfo_idFile_set(arg1,arg2);
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkExternalSourceInfo_idFile_get(void * jarg1) {
  unsigned int jresult ;
  AkSerializedExternalSourceInfo *arg1 = (AkSerializedExternalSourceInfo *) 0 ;
  AkFileID result;
  
  arg1 = (AkSerializedExternalSourceInfo *)jarg1; 
  {
    result = (AkFileID)AkSerializedExternalSourceInfo_idFile_get(arg1);
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Init(void * jarg1) {
  int jresult ;
  AkInitializationSettings *arg1 = (AkInitializationSettings *) 0 ;
  AKRESULT result;
  
  arg1 = (AkInitializationSettings *)jarg1; 
  {
    result = (AKRESULT)Init(arg1);
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_InitSpatialAudio(void * jarg1) {
  int jresult ;
  AkSpatialAudioInitSettings *arg1 = (AkSpatialAudioInitSettings *) 0 ;
  AKRESULT result;
  
  arg1 = (AkSpatialAudioInitSettings *)jarg1; 
  {
    result = (AKRESULT)InitSpatialAudio(arg1);
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_InitCommunication(void * jarg1) {
  int jresult ;
  AkCommunicationSettings *arg1 = (AkCommunicationSettings *) 0 ;
  AKRESULT result;
  
  arg1 = (AkCommunicationSettings *)jarg1; 
  {
    result = (AKRESULT)InitCommunication(arg1);
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Term() {
  {
    Term();
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_RegisterGameObjInternal(AkGameObjectID jarg1) {
  int jresult ;
  AkGameObjectID arg1 ;
  AKRESULT result;
  
  arg1 = jarg1; 
  {
    result = (AKRESULT)RegisterGameObjInternal(arg1);
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnregisterGameObjInternal(AkGameObjectID jarg1) {
  int jresult ;
  AkGameObjectID arg1 ;
  AKRESULT result;
  
  arg1 = jarg1; 
  {
    result = (AKRESULT)UnregisterGameObjInternal(arg1);
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RegisterGameObjInternal_WithName(AkGameObjectID jarg1, wchar_t* jarg2) {
  int jresult ;
  AkGameObjectID arg1 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  AKRESULT result;
  
  arg1 = jarg1; 
  arg2 = (wchar_t *)jarg2; 
  {
    result = (AKRESULT)RegisterGameObjInternal_WithName(arg1,(wchar_t const *)arg2);
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetBasePath(wchar_t* jarg1) {
  int jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  AKRESULT result;
  
  arg1 = (wchar_t *)jarg1; 
  {
    result = (AKRESULT)SetBasePath((wchar_t const *)arg1);
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetCurrentLanguage(wchar_t* jarg1) {
  int jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  AKRESULT result;
  
  arg1 = (wchar_t *)jarg1; 
  {
    result = (AKRESULT)SetCurrentLanguage((wchar_t const *)arg1);
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LoadFilePackage(wchar_t* jarg1, unsigned int * jarg2) {
  int jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  AkUInt32 *arg2 = 0 ;
  AKRESULT result;
  
  arg1 = (wchar_t *)jarg1; 
  arg2 = (AkUInt32 *)jarg2; 
  {
    result = (AKRESULT)LoadFilePackage((wchar_t const *)arg1,*arg2);
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AddBasePath(wchar_t* jarg1) {
  int jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  AKRESULT result;
  
  arg1 = (wchar_t *)jarg1; 
  {
    result = (AKRESULT)AddBasePath((wchar_t const *)arg1);
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetGameName(wchar_t* jarg1) {
  int jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  AKRESULT result;
  
  arg1 = (wchar_t *)jarg1; 
  {
    result = (AKRESULT)SetGameName((wchar_t const *)arg1);
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetDecodedBankPath(wchar_t* jarg1) {
  int jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  AKRESULT result;
  
  arg1 = (wchar_t *)jarg1; 
  {
    result = (AKRESULT)SetDecodedBankPath((wchar_t const *)arg1);
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LoadAndDecodeBank(wchar_t* jarg1, unsigned int jarg2, unsigned int * jarg3) {
  int jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  bool arg2 ;
  AkBankID *arg3 = 0 ;
  AKRESULT result;
  
  arg1 = (wchar_t *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (AkBankID *)jarg3; 
  {
    result = (AKRESULT)LoadAndDecodeBank((wchar_t const *)arg1,arg2,*arg3);
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LoadAndDecodeBankFromMemory(void * jarg1, unsigned int jarg2, unsigned int jarg3, wchar_t* jarg4, unsigned int jarg5, unsigned int * jarg6) {
  int jresult ;
  void *arg1 = (void *) 0 ;
  AkUInt32 arg2 ;
  bool arg3 ;
  wchar_t *arg4 = (wchar_t *) 0 ;
  bool arg5 ;
  AkBankID *arg6 = 0 ;
  AKRESULT result;
  
  arg1 = jarg1; 
  arg2 = (AkUInt32)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (wchar_t *)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = (AkBankID *)jarg6; 
  {
    result = (AKRESULT)LoadAndDecodeBankFromMemory(arg1,arg2,arg3,(wchar_t const *)arg4,arg5,*arg6);
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PostEventOnRoom__SWIG_0(wchar_t* jarg1, AkRoomID jarg2, unsigned int jarg3, void * jarg4, void * jarg5, unsigned int jarg6, void * jarg7, unsigned int jarg8) {
  unsigned int jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  AkRoomID arg2 ;
  AkUInt32 arg3 ;
  AkCallbackFunc arg4 = (AkCallbackFunc) 0 ;
  void *arg5 = (void *) 0 ;
  AkUInt32 arg6 ;
  AkExternalSourceInfo *arg7 = (AkExternalSourceInfo *) 0 ;
  AkPlayingID arg8 ;
  AkPlayingID result;
  
  arg1 = (wchar_t *)jarg1; 
  arg2 = jarg2; 
  arg3 = (AkUInt32)jarg3; 
  arg4 = jarg4 != NULL ? AkCallbackSerializer::EventCallback : NULL; 
  arg5 = jarg5; 
  arg6 = (AkUInt32)jarg6; 
  arg7 = (AkExternalSourceInfo *)jarg7; 
  arg8 = (AkPlayingID)jarg8; 
  {
    result = (AkPlayingID)PostEventOnRoom((wchar_t const *)arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PostEventOnRoom__SWIG_1(wchar_t* jarg1, AkRoomID jarg2, unsigned int jarg3, void * jarg4, void * jarg5, unsigned int jarg6, void * jarg7) {
  unsigned int jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  AkRoomID arg2 ;
  AkUInt32 arg3 ;
  AkCallbackFunc arg4 = (AkCallbackFunc) 0 ;
  void *arg5 = (void *) 0 ;
  AkUInt32 arg6 ;
  AkExternalSourceInfo *arg7 = (AkExternalSourceInfo *) 0 ;
  AkPlayingID result;
  
  arg1 = (wchar_t *)jarg1; 
  arg2 = jarg2; 
  arg3 = (AkUInt32)jarg3; 
  arg4 = jarg4 != NULL ? AkCallbackSerializer::EventCallback : NULL; 
  arg5 = jarg5; 
  arg6 = (AkUInt32)jarg6; 
  arg7 = (AkExternalSourceInfo *)jarg7; 
  {
    result = (AkPlayingID)PostEventOnRoom((wchar_t const *)arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PostEventOnRoom__SWIG_2(wchar_t* jarg1, AkRoomID jarg2, unsigned int jarg3, void * jarg4, void * jarg5) {
  unsigned int jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  AkRoomID arg2 ;
  AkUInt32 arg3 ;
  AkCallbackFunc arg4 = (AkCallbackFunc) 0 ;
  void *arg5 = (void *) 0 ;
  AkPlayingID result;
  
  arg1 = (wchar_t *)jarg1; 
  arg2 = jarg2; 
  arg3 = (AkUInt32)jarg3; 
  arg4 = jarg4 != NULL ? AkCallbackSerializer::EventCallback : NULL; 
  arg5 = jarg5; 
  {
    result = (AkPlayingID)PostEventOnRoom((wchar_t const *)arg1,arg2,arg3,arg4,arg5);
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PostEventOnRoom__SWIG_3(wchar_t* jarg1, AkRoomID jarg2) {
  unsigned int jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  AkRoomID arg2 ;
  AkPlayingID result;
  
  arg1 = (wchar_t *)jarg1; 
  arg2 = jarg2; 
  {
    result = (AkPlayingID)PostEventOnRoom((wchar_t const *)arg1,arg2);
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT wchar_t* SWIGSTDCALL CSharp_GetCurrentLanguage() {
  wchar_t* jresult ;
  AkOSChar *result = 0 ;
  
  {
    result = (AkOSChar *)GetCurrentLanguage();
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnloadFilePackage(unsigned int jarg1) {
  int jresult ;
  AkUInt32 arg1 ;
  AKRESULT result;
  
  arg1 = (AkUInt32)jarg1; 
  {
    result = (AKRESULT)UnloadFilePackage(arg1);
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnloadAllFilePackages() {
  int jresult ;
  AKRESULT result;
  
  {
    result = (AKRESULT)UnloadAllFilePackages();
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetObjectPosition(AkGameObjectID jarg1, AkVector jarg2, AkVector jarg3, AkVector jarg4) {
  int jresult ;
  AkGameObjectID arg1 ;
  AkVector arg2 ;
  AkVector arg3 ;
  AkVector arg4 ;
  AKRESULT result;
  
  arg1 = jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  arg4 = jarg4; 
  {
    result = (AKRESULT)SetObjectPosition(arg1,arg2,arg3,arg4);
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetSourceMultiplePlayPositions__SWIG_0(unsigned int jarg1, unsigned int* jarg2, unsigned int* jarg3, int* jarg4, unsigned int * jarg5, unsigned int jarg6) {
  int jresult ;
  AkPlayingID arg1 ;
  AkUniqueID *arg2 = (AkUniqueID *) 0 ;
  AkUniqueID *arg3 = (AkUniqueID *) 0 ;
  AkTimeMs *arg4 = (AkTimeMs *) 0 ;
  AkUInt32 *arg5 = (AkUInt32 *) 0 ;
  bool arg6 ;
  AKRESULT result;
  
  arg1 = (AkPlayingID)jarg1; 
  arg2 = jarg2;
  arg3 = jarg3;
  arg4 = jarg4;
  arg5 = (AkUInt32 *)jarg5; 
  arg6 = jarg6 ? true : false; 
  {
    result = (AKRESULT)GetSourceMultiplePlayPositions(arg1,arg2,arg3,arg4,arg5,arg6);
  }
  jresult = result; 
  
  
  
  
  
  
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetSourceMultiplePlayPositions__SWIG_1(unsigned int jarg1, unsigned int* jarg2, unsigned int* jarg3, int* jarg4, unsigned int * jarg5) {
  int jresult ;
  AkPlayingID arg1 ;
  AkUniqueID *arg2 = (AkUniqueID *) 0 ;
  AkUniqueID *arg3 = (AkUniqueID *) 0 ;
  AkTimeMs *arg4 = (AkTimeMs *) 0 ;
  AkUInt32 *arg5 = (AkUInt32 *) 0 ;
  AKRESULT result;
  
  arg1 = (AkPlayingID)jarg1; 
  arg2 = jarg2;
  arg3 = jarg3;
  arg4 = jarg4;
  arg5 = (AkUInt32 *)jarg5; 
  {
    result = (AKRESULT)GetSourceMultiplePlayPositions(arg1,arg2,arg3,arg4,arg5);
  }
  jresult = result; 
  
  
  
  
  
  
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetListeners(AkGameObjectID jarg1, AkGameObjectID* jarg2, unsigned int jarg3) {
  int jresult ;
  AkGameObjectID arg1 ;
  AkGameObjectID *arg2 = (AkGameObjectID *) 0 ;
  AkUInt32 arg3 ;
  AKRESULT result;
  
  arg1 = jarg1; 
  arg2 = jarg2; 
  arg3 = (AkUInt32)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)SetListeners(arg1,arg2,arg3);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in SetListeners(AkGameObjectID,AkGameObjectID *,AkUInt32): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetDefaultListeners(AkGameObjectID* jarg1, unsigned int jarg2) {
  int jresult ;
  AkGameObjectID *arg1 = (AkGameObjectID *) 0 ;
  AkUInt32 arg2 ;
  AKRESULT result;
  
  arg1 = jarg1; 
  arg2 = (AkUInt32)jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)SetDefaultListeners(arg1,arg2);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in SetDefaultListeners(AkGameObjectID *,AkUInt32): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AddOutput__SWIG_0(void * jarg1, unsigned long long * jarg2, AkGameObjectID* jarg3, unsigned int jarg4) {
  int jresult ;
  AkOutputSettings *arg1 = 0 ;
  AkOutputDeviceID *arg2 = (AkOutputDeviceID *) 0 ;
  AkGameObjectID *arg3 = (AkGameObjectID *) 0 ;
  AkUInt32 arg4 ;
  AKRESULT result;
  
  arg1 = (AkOutputSettings *)jarg1;
  if (!arg1) {
    return AK_Fail;
  } 
  arg2 = (AkOutputDeviceID *)jarg2; 
  arg3 = jarg3; 
  arg4 = (AkUInt32)jarg4; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AddOutput((AkOutputSettings const &)*arg1,arg2,arg3,arg4);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AddOutput(AkOutputSettings const &,AkOutputDeviceID *,AkGameObjectID *,AkUInt32): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AddOutput__SWIG_1(void * jarg1, unsigned long long * jarg2, AkGameObjectID* jarg3) {
  int jresult ;
  AkOutputSettings *arg1 = 0 ;
  AkOutputDeviceID *arg2 = (AkOutputDeviceID *) 0 ;
  AkGameObjectID *arg3 = (AkGameObjectID *) 0 ;
  AKRESULT result;
  
  arg1 = (AkOutputSettings *)jarg1;
  if (!arg1) {
    return AK_Fail;
  } 
  arg2 = (AkOutputDeviceID *)jarg2; 
  arg3 = jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AddOutput((AkOutputSettings const &)*arg1,arg2,arg3);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AddOutput(AkOutputSettings const &,AkOutputDeviceID *,AkGameObjectID *): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AddOutput__SWIG_2(void * jarg1, unsigned long long * jarg2) {
  int jresult ;
  AkOutputSettings *arg1 = 0 ;
  AkOutputDeviceID *arg2 = (AkOutputDeviceID *) 0 ;
  AKRESULT result;
  
  arg1 = (AkOutputSettings *)jarg1;
  if (!arg1) {
    return AK_Fail;
  } 
  arg2 = (AkOutputDeviceID *)jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AddOutput((AkOutputSettings const &)*arg1,arg2);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AddOutput(AkOutputSettings const &,AkOutputDeviceID *): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AddOutput__SWIG_3(void * jarg1) {
  int jresult ;
  AkOutputSettings *arg1 = 0 ;
  AKRESULT result;
  
  arg1 = (AkOutputSettings *)jarg1;
  if (!arg1) {
    return AK_Fail;
  } 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)AddOutput((AkOutputSettings const &)*arg1);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in AddOutput(AkOutputSettings const &): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GetDefaultStreamSettings(void * jarg1) {
  AkStreamMgrSettings *arg1 = 0 ;
  
  arg1 = (AkStreamMgrSettings *)jarg1;
  if (!arg1) {
    return ;
  } 
  {
    GetDefaultStreamSettings(*arg1);
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_GetDefaultDeviceSettings(void * jarg1) {
  AkDeviceSettings *arg1 = 0 ;
  
  arg1 = (AkDeviceSettings *)jarg1;
  if (!arg1) {
    return ;
  } 
  {
    GetDefaultDeviceSettings(*arg1);
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_GetDefaultMusicSettings(void * jarg1) {
  AkMusicSettings *arg1 = 0 ;
  
  arg1 = (AkMusicSettings *)jarg1;
  if (!arg1) {
    return ;
  } 
  {
    GetDefaultMusicSettings(*arg1);
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_GetDefaultInitSettings(void * jarg1) {
  AkInitSettings *arg1 = 0 ;
  
  arg1 = (AkInitSettings *)jarg1;
  if (!arg1) {
    return ;
  } 
  {
    GetDefaultInitSettings(*arg1);
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_GetDefaultPlatformInitSettings(void * jarg1) {
  AkPlatformInitSettings *arg1 = 0 ;
  
  arg1 = (AkPlatformInitSettings *)jarg1;
  if (!arg1) {
    return ;
  } 
  {
    GetDefaultPlatformInitSettings(*arg1);
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GetMajorMinorVersion() {
  unsigned int jresult ;
  AkUInt32 result;
  
  {
    result = (AkUInt32)GetMajorMinorVersion();
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GetSubminorBuildVersion() {
  unsigned int jresult ;
  AkUInt32 result;
  
  {
    result = (AkUInt32)GetSubminorBuildVersion();
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StartResourceMonitoring() {
  {
    StartResourceMonitoring();
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_StopResourceMonitoring() {
  {
    StopResourceMonitoring();
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_GetResourceMonitorDataSummary(void * jarg1) {
  AkResourceMonitorDataSummary *arg1 = 0 ;
  
  arg1 = (AkResourceMonitorDataSummary *)jarg1;
  if (!arg1) {
    return ;
  } 
  {
    GetResourceMonitorDataSummary(*arg1);
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetRoomPortal(AkSpatialAudioID jarg1, void * jarg2, void * jarg3, unsigned int jarg4, AkRoomID jarg5, AkRoomID jarg6) {
  int jresult ;
  AkPortalID arg1 ;
  AkTransform *arg2 = 0 ;
  AkExtent *arg3 = 0 ;
  bool arg4 ;
  AkRoomID arg5 ;
  AkRoomID arg6 ;
  AKRESULT result;
  
  arg1 = jarg1; 
  arg2 = (AkTransform *)jarg2;
  if (!arg2) {
    return AK_Fail;
  } 
  arg3 = (AkExtent *)jarg3;
  if (!arg3) {
    return AK_Fail;
  } 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5; 
  arg6 = jarg6; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)SetRoomPortal(arg1,(AkTransform const &)*arg2,(AkExtent const &)*arg3,arg4,arg5,arg6);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in SetRoomPortal(AkPortalID,AkTransform const &,AkExtent const &,bool,AkRoomID,AkRoomID): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetRoom(AkRoomID jarg1, void * jarg2, AkSpatialAudioID jarg3, char * jarg4) {
  int jresult ;
  AkRoomID arg1 ;
  AkRoomParams *arg2 = 0 ;
  AkGeometrySetID arg3 ;
  char *arg4 = (char *) 0 ;
  AKRESULT result;
  
  arg1 = jarg1; 
  arg2 = (AkRoomParams *)jarg2;
  if (!arg2) {
    return AK_Fail;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)SetRoom(arg1,*arg2,arg3,(char const *)arg4);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in SetRoom(AkRoomID,AkRoomParams &,AkGeometrySetID,char const *): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RegisterSpatialAudioListener(AkGameObjectID jarg1) {
  int jresult ;
  AkGameObjectID arg1 ;
  AKRESULT result;
  
  arg1 = jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)RegisterSpatialAudioListener(arg1);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in RegisterSpatialAudioListener(AkGameObjectID): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnregisterSpatialAudioListener(AkGameObjectID jarg1) {
  int jresult ;
  AkGameObjectID arg1 ;
  AKRESULT result;
  
  arg1 = jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) {
      result = (AKRESULT)UnregisterSpatialAudioListener(arg1);  	
    } else {
      AKPLATFORM::OutputDebugMsg("Wwise warning in UnregisterSpatialAudioListener(AkGameObjectID): AkInitializer.cs Awake() was not executed yet. Set the Script Execution Order properly so the current call is executed after."); 		return AK_Fail; 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetGeometry(AkSpatialAudioID jarg1, void * jarg2, unsigned int jarg3, void * jarg4, unsigned int jarg5, void * jarg6, unsigned int jarg7, AkRoomID jarg8, unsigned int jarg9, unsigned int jarg10, unsigned int jarg11) {
  int jresult ;
  AkGeometrySetID arg1 ;
  AkTriangle *arg2 = (AkTriangle *) 0 ;
  AkUInt32 arg3 ;
  AkVertex *arg4 = (AkVertex *) 0 ;
  AkUInt32 arg5 ;
  AkAcousticSurface *arg6 = (AkAcousticSurface *) 0 ;
  AkUInt32 arg7 ;
  AkRoomID arg8 ;
  bool arg9 ;
  bool arg10 ;
  bool arg11 ;
  AKRESULT result;
  
  arg1 = jarg1; 
  arg2 = (AkTriangle *)jarg2; 
  arg3 = (AkUInt32)jarg3; 
  arg4 = (AkVertex *)jarg4; 
  arg5 = (AkUInt32)jarg5; 
  arg6 = (AkAcousticSurface *)jarg6; 
  arg7 = (AkUInt32)jarg7; 
  arg8 = jarg8; 
  arg9 = jarg9 ? true : false; 
  arg10 = jarg10 ? true : false; 
  arg11 = jarg11 ? true : false; 
  {
    result = (AKRESULT)SetGeometry(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PostEventOnRoom__SWIG_4(unsigned int jarg1, AkRoomID jarg2, unsigned int jarg3, void * jarg4, void * jarg5, unsigned int jarg6, void * jarg7, unsigned int jarg8) {
  unsigned int jresult ;
  AkUniqueID arg1 ;
  AkRoomID arg2 ;
  AkUInt32 arg3 ;
  AkCallbackFunc arg4 = (AkCallbackFunc) 0 ;
  void *arg5 = (void *) 0 ;
  AkUInt32 arg6 ;
  AkExternalSourceInfo *arg7 = (AkExternalSourceInfo *) 0 ;
  AkPlayingID arg8 ;
  AkPlayingID result;
  
  arg1 = (AkUniqueID)jarg1; 
  arg2 = jarg2; 
  arg3 = (AkUInt32)jarg3; 
  arg4 = jarg4 != NULL ? AkCallbackSerializer::EventCallback : NULL; 
  arg5 = jarg5; 
  arg6 = (AkUInt32)jarg6; 
  arg7 = (AkExternalSourceInfo *)jarg7; 
  arg8 = (AkPlayingID)jarg8; 
  {
    result = (AkPlayingID)PostEventOnRoom(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PostEventOnRoom__SWIG_5(unsigned int jarg1, AkRoomID jarg2, unsigned int jarg3, void * jarg4, void * jarg5, unsigned int jarg6, void * jarg7) {
  unsigned int jresult ;
  AkUniqueID arg1 ;
  AkRoomID arg2 ;
  AkUInt32 arg3 ;
  AkCallbackFunc arg4 = (AkCallbackFunc) 0 ;
  void *arg5 = (void *) 0 ;
  AkUInt32 arg6 ;
  AkExternalSourceInfo *arg7 = (AkExternalSourceInfo *) 0 ;
  AkPlayingID result;
  
  arg1 = (AkUniqueID)jarg1; 
  arg2 = jarg2; 
  arg3 = (AkUInt32)jarg3; 
  arg4 = jarg4 != NULL ? AkCallbackSerializer::EventCallback : NULL; 
  arg5 = jarg5; 
  arg6 = (AkUInt32)jarg6; 
  arg7 = (AkExternalSourceInfo *)jarg7; 
  {
    result = (AkPlayingID)PostEventOnRoom(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PostEventOnRoom__SWIG_6(unsigned int jarg1, AkRoomID jarg2, unsigned int jarg3, void * jarg4, void * jarg5) {
  unsigned int jresult ;
  AkUniqueID arg1 ;
  AkRoomID arg2 ;
  AkUInt32 arg3 ;
  AkCallbackFunc arg4 = (AkCallbackFunc) 0 ;
  void *arg5 = (void *) 0 ;
  AkPlayingID result;
  
  arg1 = (AkUniqueID)jarg1; 
  arg2 = jarg2; 
  arg3 = (AkUInt32)jarg3; 
  arg4 = jarg4 != NULL ? AkCallbackSerializer::EventCallback : NULL; 
  arg5 = jarg5; 
  {
    result = (AkPlayingID)PostEventOnRoom(arg1,arg2,arg3,arg4,arg5);
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PostEventOnRoom__SWIG_7(unsigned int jarg1, AkRoomID jarg2) {
  unsigned int jresult ;
  AkUniqueID arg1 ;
  AkRoomID arg2 ;
  AkPlayingID result;
  
  arg1 = (AkUniqueID)jarg1; 
  arg2 = jarg2; 
  {
    result = (AkPlayingID)PostEventOnRoom(arg1,arg2);
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional > * SWIGSTDCALL CSharp_AkPlaylist_SWIGUpcast(AK::SoundEngine::DynamicSequence::Playlist *jarg1) {
    return (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,AkGrowByPolicy_Proportional > *)jarg1;
}

SWIGEXPORT AkMIDIEvent * SWIGSTDCALL CSharp_AkMIDIPost_SWIGUpcast(AkMIDIPost *jarg1) {
    return (AkMIDIEvent *)jarg1;
}

SWIGEXPORT AkSerializedCallbackInfo * SWIGSTDCALL CSharp_AkEventCallbackInfo_SWIGUpcast(AkSerializedEventCallbackInfo *jarg1) {
    return (AkSerializedCallbackInfo *)jarg1;
}

SWIGEXPORT AkSerializedEventCallbackInfo * SWIGSTDCALL CSharp_AkMIDIEventCallbackInfo_SWIGUpcast(AkSerializedMIDIEventCallbackInfo *jarg1) {
    return (AkSerializedEventCallbackInfo *)jarg1;
}

SWIGEXPORT AkSerializedEventCallbackInfo * SWIGSTDCALL CSharp_AkMarkerCallbackInfo_SWIGUpcast(AkSerializedMarkerCallbackInfo *jarg1) {
    return (AkSerializedEventCallbackInfo *)jarg1;
}

SWIGEXPORT AkSerializedEventCallbackInfo * SWIGSTDCALL CSharp_AkDurationCallbackInfo_SWIGUpcast(AkSerializedDurationCallbackInfo *jarg1) {
    return (AkSerializedEventCallbackInfo *)jarg1;
}

SWIGEXPORT AkSerializedCallbackInfo * SWIGSTDCALL CSharp_AkDynamicSequenceItemCallbackInfo_SWIGUpcast(AkSerializedDynamicSequenceItemCallbackInfo *jarg1) {
    return (AkSerializedCallbackInfo *)jarg1;
}

SWIGEXPORT AkSerializedCallbackInfo * SWIGSTDCALL CSharp_AkMusicSyncCallbackInfo_SWIGUpcast(AkSerializedMusicSyncCallbackInfo *jarg1) {
    return (AkSerializedCallbackInfo *)jarg1;
}

SWIGEXPORT AkSerializedEventCallbackInfo * SWIGSTDCALL CSharp_AkMusicPlaylistCallbackInfo_SWIGUpcast(AkSerializedMusicPlaylistCallbackInfo *jarg1) {
    return (AkSerializedEventCallbackInfo *)jarg1;
}

#ifdef __cplusplus
}
#endif

